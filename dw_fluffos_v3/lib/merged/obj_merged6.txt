# Total Tokens: 61418
# Total Files Merged: 87

======
FILE: furnitures/commercial/blackboard.c
==================================================

#include <language.h>
#define DEFAULT_LANGUAGE "morporkian"
#define BOARD_TAG "blackboard"
inherit "/std/room/furniture/commercial";
int do_write( string language );
void setup() {
    set_name ("blackboard");
    set_short ("blackboard");
    add_alias (({"board", "sign"}));
    set_long ("The residue of faded chalk-dust and long forgotten "
        "doodles lies heavily on the blackboard.  The grain of the "
        "board is worn and slightly mottled with age, hinting at "
        "a long and dignified history of classrooms and university "
        "lecterns.  Or perhaps just hinting at cheap wood and "
        "bad upkeep.\n");
    set_allowed_room_verbs( (["standing" : "stands",
                            "hanging"  : "hangs"]) );
    set_commercial_size(1);
    set_weight(2000);
    set_value(240000);
}
void init() {
    add_command ("write", "[on] <direct:object'blackboard'> in <string'language'>",
        (: do_write($4[1]) :) );
    add_command ("clean", "<direct:object>");
}
string query_readable_message(object player, int ignore_labels) {
    if (!sizeof(query_read_mess())) {
        return "A few random letters that escaped cleaning can be seen on "
            "the blackboard";
    }
    return ::query_readable_message(player, ignore_labels);
}
int do_clean() {
    if (!is_allowed (this_player()->query_name())) {
        this_player()->add_failed_mess (this_object(), "You cannot clean "
            +  capitalize (query_owner()) + "'s blackboard!\n", ({ }));
        return 0;
    }
    set_read_mess( 0 );
    return 1;
}
string find_words( string language ) {
    string words;
    words = implode( map( filter( query_read_mess(),
        (: $1[READ_LANG] == $(language) :) ), (: $1[READ_MESS] :) ), "\n" );
    return words;
}
int do_write(string language)
{
    string existing_text;
    if (!is_allowed (this_player()->query_name())) {
        this_player()->add_failed_mess (this_object(), "You cannot write on "
            +  capitalize (query_owner()) + "'s blackboard!\n", ({ }));
        return 0;
    }
    language = lower_case( language );
    if ( !this_player()->query_skill(
        LANGUAGE_HAND->query_language_written_skill(language)) ) {
        this_player()->add_failed_mess(this_object(), "You can't write in " +
           language + ".\n" );
        return -1;
    }
    existing_text = find_words( language );
    this_player()->do_edit(existing_text, "blackboard_text",
        this_object(), 0, language);
    this_player()->add_succeeded_mess (this_object(), "$N find$s a handy "
        "piece of chalk and start$s to write on the blackboard.\n", ({ }));
    return 1;
}
void blackboard_text(string text, string language)
{
    if (!text)
    {
        tell_room (environment (this_object()), this_player()->one_short()
            + " steps back from the blackboard without making any "
            "changes.\n", this_player());
        tell_object (this_player(), "Okay, nothing has been changed.\n");
        return;
    }
    set_read_mess( filter( query_read_mess(),
        (: $1[READ_LANG] != $(language) :) ) );
    add_read_mess( text, "chalk", language );
    tell_room(environment (this_object()), this_player()->one_short()
            + " finishes writing on the blackboard.\n", this_player());
}
void init_dynamic_arg(mapping map) {
   string my_words;
   commercial::init_dynamic_arg(map, player);
   my_words = query_auto_load_value(map, BOARD_TAG, "words");
   if ( stringp(my_words) ) {
       add_read_mess(my_words, "chalk", DEFAULT_LANGUAGE);
   }
     set_read_mess( filter( query_read_mess(), (: $1[READ_LANG] != "common" :) ) );
}

==================================================
FILE: furnitures/commercial/blackjack.c
==================================================

inherit "/std/room/furniture/games/card_base";
inherit "/std/room/furniture/games/multiplayer_base";
inherit "/std/room/furniture/commercial";
#include <money.h>
#define BLACKJACK_BET 0
#define BLACKJACK_PLAYING 1
#define BLACKJACK_BUST 2
#define BLACKJACK_STAND 3
class player_data {
   class playing_card* hand;
   int starting_bet;
   int state;
}
#define BOARD_TAG "blackjack"
private int _cost;
private int _finished;
private int _max_bet;
private int _min_bet;
private int _timeout_call;
private int _timeout_length;
private int _num_decks;
private int _soft_seventeen;
private int _double_on_doubles;
private class playing_card* _dealer_hand;
private class playing_card* _deck;
private class playing_card* _discard;
int query_hand_value(class playing_card* cards);
void create() {
   multiplayer_base::create();
   commercial::create();
}
void setup() {
   set_name( "table" );
   set_short( "blackjack table" );
   add_adjective( ({ "blackjack" } ));
   add_alias("blackjack");
   set_long( "The green felt of the table looks nice and soft, there is "
             "a single deck of cards sitting in the middle of the table.  "
             "The table looks like it will seat 4 people.\n");
   set_allowed_positions(({"sitting", "lying", "kneeling", "meditating"}));
   set_allowed_room_verbs((["sitting" : "sits" ]));
   set_weight(2000);
   set_value(240000);
   _timeout_length = 5 * 60;
   _cost = 400;
   _num_decks = 1;
   add_player_id_type("green", 0);
   add_player_id_type("red", 0);
   add_player_id_type("blue", 0);
   add_player_id_type("maroon", 0);
   set_minimum_needed(1);
   add_help_file("blackjack");
   set_commercial_size(15);
   set_commercial_type("gambling");
   set_shop_use_types(({ "blackjack" }));
}
string query_card_status() {
   string id_bing;
   string ret;
   string* not_playing;
   class player_data data;
   class playing_card card;
   string* womble;
   string place;
   ret = "";
   not_playing = ({ });
   womble = query_player_ids();
   place = environment()->query_property("place");
   foreach (id_bing in womble) {
      if (is_person_playing(id_bing) ||
          is_game_started()) {
         ret += capitalize(id_bing) + " (" +
                query_player_cap_name(id_bing) + ")";
         data = query_player_data(id_bing);
         if (data) {
            if (data->starting_bet) {
               ret += "  " +
                      MONEY_HAND->money_value_string(data->starting_bet, place);
               if (sizeof(data->hand)) {
                  foreach (card in data->hand) {
                     ret += "  " + query_card_string(card);
                  }
               }
               if (data->state == BLACKJACK_STAND) {
                  ret += " (stand)";
               } else if (data->state == BLACKJACK_BUST) {
                  ret += " (bust)";
               }
               ret += "\n";
            } else {
               ret += "  No bet yet.\n";
            }
         } else {
            ret += "\n";
         }
      } else {
         not_playing += ({ id_bing });
      }
   }
   if (sizeof(not_playing)) {
      ret += query_multiple_short(map(not_playing, (: capitalize($1) :))) +
                               " are not playing.\n";
   }
   ret += "\n";
   if (sizeof(_dealer_hand)) {
      ret += "Dealer's cards ";
      if (!_finished) {
         ret += "XXXX";
      }
      foreach (card in _dealer_hand[(_finished?0:1)..]) {
         ret += "  " + query_card_string(card);
      }
      if (query_hand_value(_dealer_hand) > 21) {
         ret += " (bust)";
      }
      ret += "\n";
   }
   return ret;
}
string long(string str, int dark) {
   if (dark) {
      return ::long() +
             "It is too dark to make out the pieces on the board.\n";
   }
   return ::long() + query_card_status();
}
class playing_card query_next_card() {
   class playing_card card;
   if (!sizeof(_deck)) {
      if (!sizeof(_discard)) {
         _deck = make_deck(_num_decks, 0);
         _deck = shuffle_deck(_deck);
      } else {
         _deck = make_deck(_num_decks, 0);
         _deck = shuffle_deck(_deck);
      }
      tell_all_players("The dealer shuffles the deck before the next card "
                       "is dealt.\n");
      _discard = ({});
   }
   card = _deck[0];
   _deck = _deck[1..];
   return card;
}
void deal_cards(string id) {
   class player_data data;
   string hands;
   if (!sizeof(_dealer_hand)) {
      _dealer_hand = ({ query_next_card(), query_next_card() });
   }
   hands = "";
      data = query_player_data(id);
      data->hand = ({ query_next_card(), query_next_card() });
      hands += query_player_cap_name(id) + " hand is: "+
                      query_card_string(data->hand[0]) + "  " +
                      query_card_string(data->hand[1]) +
                      "  (total " +
                      query_hand_value(data->hand) + ")\n";
   hands += "Dealer's cards: XXXX " +
             query_card_string(_dealer_hand[0]) + "\n"
             "You need to stay or hit yourself for more cards.\n";
   tell_all_players(hands);
}
int start_game() {
   class player_data data;
   string id;
   randomise_player_numbers();
   if (!::start_game()) {
      return 0;
   }
   foreach (id in query_player_ids()) {
      data = new(class player_data);
      data->starting_bet = 0;
      data->hand = ({ });
      data->state = BLACKJACK_BET;
      set_player_data(id, data);
   }
   _dealer_hand = ({ });
   _finished = 0;
   tell_all_players("Place your starting bets.\n");
   return 1;
}
int query_hand_value(class playing_card* cards) {
   class playing_card bing;
   int value;
   int no_aces;
   foreach (bing in cards) {
      if (bing->number == 1) {
         no_aces++;
      } else if (bing->number >= 10) {
         value +=  10;
      } else {
         value += bing->number;
      }
   }
   if (no_aces > 0) {
      if (no_aces > 1) {
         value += no_aces - 1;
      }
      if (value <= 10) {
         value += 11;
      } else {
         value += 1;
      }
   }
   return value;
}
int is_soft_result(class playing_card* cards) {
   class playing_card bing;
   int value;
   int no_aces;
   foreach (bing in cards) {
      if (bing->number == 1) {
         no_aces++;
      } else if (bing->number >= 10) {
         value +=  10;
      } else {
         value += bing->number;
      }
   }
   if (no_aces > 0) {
      if (no_aces > 1) {
         value += no_aces - 1;
      }
      if (value <= 10) {
         return 1;
      }
   }
   return 0;
}
void finish_bet(string id) {
   class player_data data;
   data = query_player_data(id);
   call_out("deal_cards", 2, id);
}
void complete_round() {
   int value;
   string stuff;
   object ob;
   int new_value;
   class playing_card card;
   class player_data data;
   string id;
   string place;
   int paid;
   string* winners;
   string* losers;
   remove_call_out(_timeout_call);
   _timeout_call = 0;
   place = environment()->query_property("place");
   value = query_hand_value(_dealer_hand);
   while (value < 17 ||
          (value == 17 && _soft_seventeen && is_soft_result(_dealer_hand))) {
      _dealer_hand += ({ query_next_card() });
      value = query_hand_value(_dealer_hand);
   }
   stuff = "";
   foreach (card in _dealer_hand) {
      stuff += "  " + query_card_string(card);
   }
   if (value > 21) {
      stuff += "  Total " + value + " (bust)\n";
      value = 0;
   } else {
      stuff += "  Total " + value + "\n";
   }
   winners = ({ });
   losers = ({ });
   foreach (id in query_currently_playing_ids()) {
      data = query_player_data(id);
      if (data->state == BLACKJACK_STAND) {
         new_value = query_hand_value(data->hand);
         if (new_value == 21 && sizeof(data->hand) == 2) {
            winners += ({ id });
            ob = query_player_object(id);
            if (ob) {
               ob->adjust_money(MONEY_HAND->create_money_array((data->starting_bet * 5) / 2,
                                           place), place);
            }
            adjust_float(-(data->starting_bet * 3) / 2);
            if (ob) {
               stuff += ob->query_cap_name();
            } else {
               stuff += id;
            }
            stuff += " gets a payout of " +
                     MONEY_HAND->money_value_string((data->starting_bet * 3) / 2, place) +
                     " (plus their original money back).\n";
            paid = 1;
         } else if (new_value > value) {
            winners += ({ id });
            ob = query_player_object(id);
            if (ob) {
               ob->adjust_money(MONEY_HAND->create_money_array(data->starting_bet * 2,
                                           place), place);
            }
            adjust_float(-data->starting_bet);
            if (ob) {
               stuff += ob->the_short();
            } else {
               stuff += id;
            }
            stuff += " gets a payout of " +
                     MONEY_HAND->money_value_string(data->starting_bet, place) +
                     " (plus their original money back).\n";
            paid = 1;
         } else {
            losers += ({ id });
         }
      }
   }
   if (!paid) {
      stuff += "No one gets paid anything.\n";
   }
   tell_all_players("The dealer reveals their cards as " +
                    stuff);
   if (sizeof(winners)) {
      tell_room(environment(),
                query_multiple_short(winners) + " win" +
                (sizeof(winners) > 1?"":"s") + " the blackjack hand.\n");
   } else {
      tell_room(environment(),  "No one wins the blackjack hand.\n");
   }
   finish_game(0);
   _finished = 1;
}
void force_finish() {
   if (is_game_started()) {
      complete_round();
   }
}
int do_bet(string str) {
   string place;
   string id;
   int amount;
   class player_data data;
   if (!is_game_started()) {
      add_failed_mess("The game has not started.\n");
      return 0;
   }
   id = find_player_id_of_person(this_player());
   if (!id) {
      add_failed_mess("You are not playing.\n");
      return 0;
   }
   place = environment()->query_property("place");
   amount = MONEY_HAND->value_from_string(str, place);
   if (!amount) {
      add_failed_mess("Invalid bet amount.\n");
      return 0;
   }
   if (this_player()->query_value_in(place) < amount) {
      add_failed_mess("You do not have that much to bid.\n");
      return 0;
   }
   if (amount < _min_bet) {
      add_failed_mess("The minimum bet for $D is " +
         MONEY_HAND->money_value_string(_min_bet, place) + ".\n");
      return 0;
   }
   if (amount > _max_bet) {
      add_failed_mess("The maximum bet for $D is " +
         MONEY_HAND->money_value_string(_max_bet, place) + ".\n");
      return 0;
   }
   data = query_player_data(id);
   if (data->starting_bet) {
      add_failed_mess("You have already bet on $D.\n");
      return 0;
   }
   this_player()->pay_money(MONEY_HAND->create_money_array(amount, place),
                            place);
   adjust_float(amount);
   data->starting_bet = amount;
   data->state = BLACKJACK_PLAYING;
   finish_bet(id);
   add_succeeded_mess("$N $V " +
                      MONEY_HAND->money_value_string(amount, place) +
                      " on $D.\n");
   return 1;
}
int do_hit() {
   int value;
   int not_done;
   string id;
   class player_data data;
   class playing_card card;
   if (!is_game_started()) {
      add_failed_mess("The game has not started.\n");
      return 0;
   }
   id = find_player_id_of_person(this_player());
   if (!id) {
      add_failed_mess("You are not playing.\n");
      return 0;
   }
   data = query_player_data(id);
   if (data->state != BLACKJACK_PLAYING) {
      add_failed_mess("You are out of the game and cannot get any more "
                      "cards.\n");
      return 0;
   }
   if (!sizeof(data->hand)) {
      add_failed_mess("You cannot hit before you have been dealt cards.\n");
      return 0;
   }
   card = query_next_card();
   data->hand += ({ card });
   value = query_hand_value(data->hand);
   if (value > 21) {
      add_succeeded_mess("$N $V and get$s " + query_card_string(card) +
                         " giving a total of " + value +
                         " and going bust on $D.\n");
      data->state = BLACKJACK_BUST;
      foreach (id in query_currently_playing_ids()) {
         data = query_player_data(id);
         if (data->state != BLACKJACK_BUST &&
             data->state != BLACKJACK_STAND) {
            not_done = 1;
         }
      }
      if (!not_done) {
          remove_call_out(_timeout_call);
          _timeout_call = call_out("complete_round", 2);
      }
   } else {
      add_succeeded_mess("$N $V and gets " + query_card_string(card) +
                         " giving a total of " + value + " on $D.\n");
   }
   return 1;
}
int do_stand() {
   int value;
   string id;
   class player_data data;
   int not_done;
   if (!is_game_started()) {
      add_failed_mess("The game has not started.\n");
      return 0;
   }
   id = find_player_id_of_person(this_player());
   if (!id) {
      add_failed_mess("You are not playing.\n");
      return 0;
   }
   data = query_player_data(id);
   if (data->state != BLACKJACK_PLAYING) {
      add_failed_mess("You are not playing and set yourself to stand.\n");
      return 0;
   }
   value = query_hand_value(data->hand);
   data->state = BLACKJACK_STAND;
   foreach (id in query_currently_playing_ids()) {
      data = query_player_data(id);
      if (data->state != BLACKJACK_BUST &&
          data->state != BLACKJACK_STAND) {
         not_done = 1;
      }
   }
   if (!not_done) {
       remove_call_out(_timeout_call);
       _timeout_call = call_out("complete_round", 2);
   }
   add_succeeded_mess("$N $V with a total of " + value +
                      " on $D.\n");
   return 1;
}
int do_start() {
   if (!is_open_for("blackjack", this_player()->query_name())) {
      add_failed_mess("The blackjack table is not open.\n");
      return 0;
   }
   if (_timeout_call) {
      add_failed_mess("Someone is still playing, you cannot start a "
                      "new game yet.\n");
      return 0;
   }
   if (query_float() < (_max_bet * 3 * 4) / 2) {
      if (is_allowed(this_player()->query_name())) {
         add_failed_mess("The float is too low for the table to open.\n");
         return 0;
      }
      add_failed_mess("The blackjack table is not open.\n");
      return 0;
   }
   if (!is_playing(this_player())) {
      add_failed_mess("You must be playing the game to start it.\n");
      return 0;
   }
   if (!start_game()) {
      add_failed_mess("You need at least three people to play modern art.\n");
      return 0;
   }
   add_succeeded_mess("$N $V a game on $D.\n");
   remove_call_out(_timeout_call);
   _timeout_call = call_out("force_finish", _timeout_length);
   tell_all_players("Timeout for this game is " + (_timeout_length / 60) +
                    " minutes.\n");
   return 1;
}
int do_finish() {
   string person;
   if (!is_game_started()) {
      add_failed_mess("The game has not started.\n");
      return 0;
   }
   person = find_player_id_of_person(this_player());
   if (!person) {
      add_failed_mess("You must actually be playing to finish the game.\n");
      return 0;
   }
   force_finish();
   return 1;
}
string query_main_status(int hint) {
   string place;
   string ret;
   place = query_money_place();
   ret = "$I$0=Blackjack table:\n"
          "$I$6=   Table is " +
             (query_float() >= (_max_bet * 3 * 4) / 2?"open.\n":
              "closed! (Float needed: " +
              MONEY_HAND->money_value_string((_max_bet * 3 * 4) / 2, place) +
              "; current: " +
              MONEY_HAND->money_value_string(query_float(), place) + ")\n") +
          "$I$6=   Timeout length: " + (_timeout_length / 60) + " minutes.\n";
   if (hint) {
      ret += "$I$6=      set timeout <number> on <table>\n";
   }
   ret += "$I$6=   Maximum bet: " +
              MONEY_HAND->money_value_string(_max_bet, place) + "\n";
   if (hint) {
      ret += "$I$6=      set maximum bet <amount> on <table>\n";
   }
   ret += "$I$6=   Minimum bet: " +
              MONEY_HAND->money_value_string(_min_bet, place) + "\n";
   if (hint) {
      ret += "$I$6=      set minimum bet <amount> on <table>\n";
   }
   ret += "$I$6=   Num Decks  : " + _num_decks + "\n";
   if (hint) {
      ret += "$I$6=      set num decks <amount> on <table>\n";
   }
   ret += "$I$6=   Soft 17    : " + (_soft_seventeen?"on":"off") + "\n";
   if (hint) {
      ret += "$I$6=      set hit on soft seventeen {on|off} on <table>\n";
   }
   ret += "$I$6=   Float needed: " +
              MONEY_HAND->money_value_string((_max_bet * 3 * 4) / 2, place) +
          " (max players * max bet * 3 / 2)\n$I$6=   Revenue: " +
          MONEY_HAND->money_value_string(query_revenue(), place) +
          "\n\n";
   return ret;
}
int do_set_bet(string str, int max_bet) {
   string place;
   int value;
   if (!is_allowed(this_player()->query_name())) {
      add_failed_mess("You are not allowed to change the paramaters of "
                   "$D.\n");
      return 0;
   }
   place = query_money_place();
   value = MONEY_HAND->value_from_string(str, place);
   if (!value) {
      add_failed_mess("Unable to parse the string " + str + ".\n");
      return 0;
   }
   if (max_bet) {
      _max_bet = value;
      add_succeeded_mess("$N set$s the maximum bet to " +
          MONEY_HAND->money_value_string(value, place) + " on $D.\n");
   } else {
      _min_bet = value;
      add_succeeded_mess("$N set$s the minimum bet to " +
          MONEY_HAND->money_value_string(value, place) + " on $D.\n");
   }
   return 1;
}
int do_set_timeout(int length) {
   if (!is_allowed(this_player()->query_name())) {
      add_failed_mess("You are not allowed to change the paramaters of "
                   "$D.\n");
      return 0;
   }
   if (length <= 0) {
      add_failed_mess("The timeout must be greator than 0.\n");
      return 0;
   }
   _timeout_length = length * 60;
   add_succeeded_mess("$N set$s the timeout on $D to " + length + " minutes.\n");
   return 1;
}
int do_set_soft_seventeen(int value) {
   if (!is_allowed(this_player()->query_name())) {
      add_failed_mess("You are not allowed to change the paramaters of "
                   "$D.\n");
      return 0;
   }
   _soft_seventeen = value;
   add_succeeded_mess("$N set$s the soft seventeen dealer hit on $D " +
                      (value?"on":"off") + ".\n");
   return 1;
}
int do_set_double_on_doubles(int value) {
   if (!is_allowed(this_player()->query_name())) {
      add_failed_mess("You are not allowed to change the paramaters of "
                   "$D.\n");
      return 0;
   }
   _double_on_doubles = value;
   add_succeeded_mess("$N set$s the double on doubles on $D " +
                      (value?"on":"off") + ".\n");
   return 1;
}
int do_set_num_decks(int num_decks) {
   if (!is_allowed(this_player()->query_name())) {
      add_failed_mess("You are not allowed to change the paramaters of "
                   "$D.\n");
      return 0;
   }
   if (num_decks <= 0) {
      add_failed_mess("The timeout must be greator than 0.\n");
      return 0;
   }
   if (num_decks >= 10) {
      add_failed_mess("The number of decks must be less than 10.\n");
      return 0;
   }
   _num_decks = num_decks;
   add_succeeded_mess("$N set$s the number of decks on $D to " + num_decks +
                      ".\n");
   return 1;
}
void init() {
   multiplayer_base::init();
   commercial::init();
   add_command("bet", "<string'amount'> on <direct:object>",
               (: do_bet($4[0]) :));
   add_command("hit", "on <direct:object>",
               (: do_hit() :));
   add_command("stay", "on <direct:object>",
               (: do_stand() :));
   add_command("start", "[new] game on <direct:object>",
               (: do_start() :));
   if (environment()->is_allowed(this_player()->query_name())) {
      add_command("set", "minimum bet <string'amount'> on <direct:object>",
                  (: do_set_bet($4[0], 0) :));
      add_command("set", "maximum bet <string'amount'> on <direct:object>",
                  (: do_set_bet($4[0], 1) :));
      add_command("set", "timeout <number'minutes'> on <direct:object>",
                  (: do_set_timeout($4[0]) :));
      add_command("set", "num decks <number'num decks'> on <direct:object>",
                  (: do_set_num_decks($4[0]) :));
      add_command("set", "hit on soft seventeen {on|off} on <direct:object>",
                  (: do_set_soft_seventeen($4[0] == "on") :));
   }
}
mapping query_dynamic_auto_load() {
   mapping map;
   map = commercial::query_dynamic_auto_load();
   multiplayer_base::query_dynamic_auto_load(map);
   add_auto_load_value(map, BOARD_TAG, "cost", _cost);
   add_auto_load_value(map, BOARD_TAG, "dealer hand", _dealer_hand);
   add_auto_load_value(map, BOARD_TAG, "deck", _deck);
   add_auto_load_value(map, BOARD_TAG, "discard", _discard);
   add_auto_load_value(map, BOARD_TAG, "finished", _finished);
   add_auto_load_value(map, BOARD_TAG, "max bet", _max_bet);
   add_auto_load_value(map, BOARD_TAG, "min bet ", _min_bet);
   add_auto_load_value(map, BOARD_TAG, "timeout", _timeout_length);
   add_auto_load_value(map, BOARD_TAG, "num decks", _num_decks);
   add_auto_load_value(map, BOARD_TAG, "soft seventeen", _soft_seventeen);
   add_auto_load_value(map, BOARD_TAG, "double on doublet", _double_on_doubles);
   return map;
}
void init_dynamic_arg(mapping map, object player) {
   commercial::init_dynamic_arg(map, player);
   multiplayer_base::init_dynamic_arg(map, player);
   _cost = query_auto_load_value(map, BOARD_TAG, "cost");
   _dealer_hand = query_auto_load_value(map, BOARD_TAG, "dealer hand");
   _deck = query_auto_load_value(map, BOARD_TAG, "deck");
   _discard = query_auto_load_value(map, BOARD_TAG, "discard");
   _finished = query_auto_load_value(map, BOARD_TAG, "finished");
   _min_bet = query_auto_load_value(map, BOARD_TAG, "min bet");
   _max_bet = query_auto_load_value(map, BOARD_TAG, "max bet");
   _timeout_length = query_auto_load_value(map, BOARD_TAG, "timeout");
   _num_decks = query_auto_load_value(map, BOARD_TAG, "num decks");
   _soft_seventeen = query_auto_load_value(map, BOARD_TAG, "soft seventeen");
   _double_on_doubles = query_auto_load_value(map, BOARD_TAG, "double on doublet");
   if (!_num_decks) {
      _num_decks = 1;
   }
   if (is_game_started()) {
      remove_call_out(_timeout_call);
      _timeout_call = call_out("force_finish", _timeout_length);
   }
}

==================================================
FILE: furnitures/commercial/filing_cabinet.c
==================================================

inherit "/std/room/furniture/document_handler";
void setup() {
   set_short("filing cabinet");
   set_name("cabinet");
   add_alias("filing");
   set_long("A big grey wooden box with draws that slide in and out.  It "
            "looks like it could hold bunches of documents, nicely order "
            "and available for quick retrieval.");
   set_allowed_positions(({"sitting", "lying", "kneeling", "meditating"}));
   set_allowed_room_verbs((["sitting" : "sits" ]));
   set_weight(2000);
   set_value(240000);
   set_commercial_size(5);
   set_commercial_type("utility");
}

==================================================
FILE: furnitures/commercial/medium_shop.c
==================================================

inherit "/std/room/furniture/shop_base";
void setup() {
   set_name( "counter" );
   set_short( "medium shop counter" );
   add_adjective( ({ "medium", "shop" } ));
   set_long( "The smooth polished surface of the medium counter shines and "
             "glows at you.\n");
   set_allowed_positions(({"sitting", "standing" }));
   set_allowed_room_verbs((["sitting" : "sits", "standing" : "stands" ]));
   set_weight(1000);
   set_value(1200000);
   set_maximum_inventory_size(100);
   set_commercial_size(60);
}

==================================================
FILE: furnitures/commercial/money_changer.c
==================================================

inherit "/std/room/furniture/commercial";
#include <money.h>
#include <move_failures.h>
private mapping _money;
private int _cut;
private int _cost;
#define BOARD_TAG "money changer"
void setup() {
   set_name( "counter" );
   set_short( "money changer counter" );
   add_adjective( ({ "money", "changer" } ));
   add_alias("changer");
   set_long( "A box with a bunch of holes in it, it looks like it will "
             "change coins into other types of coins.\n");
   set_allowed_positions(({"sitting", "lying", "kneeling", "meditating"}));
   set_allowed_room_verbs((["sitting" : "sits" ]));
   set_weight(2000);
   set_value(240000);
   add_help_file("money_changer");
   set_commercial_size(5);
   _cut = 10;
   _cost = 400;
   _money = ([ ]);
}
int change( string words, string type ) {
   int val_index;
   int value;
   int value_type;
   int value_unit;
   int value_change;
   int value_num;
   int i;
   string place;
   mixed money;
   object changed;
   object *monies;
   mixed *change;
   mixed *values;
   mixed *money_bits;
   place = query_money_place();
   if ( !place || ( place == "" ) ) {
      place = "default";
   }
   values = (mixed *)MONEY_HAND->query_values_in( place );
   MONEY_OBJECT->set_money_array( values );
   val_index = (int)MONEY_OBJECT->find_best_fit( type );
   if ( val_index == -1 ) {
      return notify_fail( "The coin type \""+ type +
            "\" is not legal tender here.\n" );
   }
   money = (mixed)MONEY_HAND->parse_money( words, this_player(), place );
   if ( intp( money ) ) {
      switch( money ) {
         case NO_MATCH :
            return notify_fail( "You do not have \""+ words +"\".\n" );
         case NO_MONEY :
            return notify_fail( "You can only change money here.\n" );
         default :
            return notify_fail( "You can only change legal tender.\n" );
      }
   }
   if (place != "default")  {
      monies = MONEY_HAND->filter_legal_tender(money, "default");
      if (monies[0])  monies[0]->move(this_player());
      if (!monies[1])  {
         return notify_fail( "You can only change legal tender.\n" );
      }
      money = monies[1];
   }
   money_bits = money->query_money_array();
   value = (int)money->query_value_in( place );
   i = member_array(values[val_index], money->query_money_array());
   if (i != -1) {
      value_type = money->query_money_array()[i + 1] * values[val_index + 1];
   }
   value_unit = (values[val_index + 1] * (100 + _cut)) / 100;
   value_change = (value - value_type) % value_unit;
   value_num = (value - value_type) / value_unit;
   value = value_num * values[val_index + 1] + value_type;
   if ( value < values[ val_index + 1 ] ) {
      money->move( this_player() );
      return notify_fail( MONEY_HAND->money_string(money->query_money_array(), place) +
                         " is not even worth one "+ values[ val_index ] +
                       ".\n" );
   }
   if (_money[values[val_index]] < value_num) {
      money->move( this_player() );
      add_failed_mess("The money changer does not have enough " +
                      MONEY_HAND->query_main_plural_for(values[val_index]) +
                      " to pay you.\n");
      return 0;
   }
   _money[values[val_index]] -= value_num;
   for (i = 0; i < sizeof(money_bits); i += 2) {
      _money[money_bits[i]] += money_bits[i + 1];
   }
   changed = clone_object( MONEY_OBJECT );
   changed->set_money_array( ({ values[ val_index ],
                                value / values[ val_index + 1 ] }));
   change = (mixed *)MONEY_HAND->create_money_array( value_change, place );
   for (i = 0; i < sizeof(changed); i += 2) {
      _money[change[i]] -= change[i + 1];
   }
   this_player()->add_succeeded_mess(this_object(),
    ({ "You changed "+query_multiple_short(money->half_short( 1 ) ) +
         " into "+
         query_multiple_short( changed->half_short( 1 ) ) +".\n",
       "$N $V some money into "+type+".\n" }), ({ }) );
   money->move( "/room/rubbish" );
   if ( sizeof( change ) ) {
      changed->adjust_money( change );
      write( "You were returned "+ (string)MONEY_HAND->money_string( change )
            +" in change.\n" );
   }
   if ( (int)changed->move( this_player() ) != MOVE_OK ) {
      write( "Unfortunately, you're too heavily burdened to accept all that "+
            "money, so it's put on the table for you.\n" );
      changed->move( this_object() );
   }
   return 1;
}
string query_main_status(int hint) {
   string type;
   string place;
   int num;
   string str;
   place = query_money_place();
   str = "$I$0=Money Changer:\n";
   str += "$I$6=   Percentage cut " + _cut + "%\n";
   foreach (type, num in _money) {
      str += "$I$6=   " + num + " " + type + "\n";
   }
   return str;
}
int do_set_cost(string str) {
   string place;
   int value;
   if (!is_allowed(this_player()->query_name())) {
      add_failed_mess("You are not allowed to change the paramaters of "
                   "$D.\n");
      return 0;
   }
   place = query_money_place();
   value = MONEY_HAND->value_from_string(str, place);
   if (!value) {
      add_failed_mess("Unable to parse the string " + str + ".\n");
      return 0;
   }
   _cost = value;
   add_succeeded_mess("$N set$s the cost of each use of $D to " +
          MONEY_HAND->money_value_string(value, place) + ".\n");
   return 1;
}
int do_set_cut(int number) {
   if (!is_allowed(this_player()->query_name())) {
      add_failed_mess("You are not allowed to change the paramaters of "
                   "$D.\n");
      return 0;
   }
   if (number < 0) {
      add_failed_mess("You need to set the cut to a number greator than 0.\n");
      return 0;
   }
   if (number > 500) {
      add_failed_mess("You need to set the cut to a number less than 500.\n");
      return 0;
   }
   _cut = number;
   add_succeeded_mess("$N set$s the cut for $D to " + _cut + "%.\n");
   return 1;
}
int do_deposit(int num, string str) {
   mixed* values;
   int i;
   if (!is_allowed(this_player()->query_name())) {
      add_failed_mess("You are not allowed to change the paramaters of "
                   "$D.\n");
      return 0;
   }
   values = this_player()->query_money_array();
   for (i = 0; i < sizeof(values); i += 2) {
      if (lower_case(values[i]) == lower_case(str)) {
         break;
      }
   }
   if (i >= sizeof(values)) {
      add_failed_mess("You do not have any " + str + " to deposit.\n");
      return 0;
   }
   if (values[i + 1] < num) {
      add_failed_mess("You do not have " + num + " of " + values[i] +
                      ", you only have " + values[i+1] + ".\n");
      return 0;
   }
   _money[values[i]] += num;
   this_player()->adjust_money(-num, values[i]);
   add_succeeded_mess("$N deposit$s " + num + " of " + str + " in $D.\n");
   return 1;
}
int do_withdraw(int num, string str) {
   string tmp;
   int bing;
   if (!is_allowed(this_player()->query_name())) {
      add_failed_mess("You are not allowed to change the paramaters of "
                   "$D.\n");
      return 0;
   }
   foreach (tmp, bing in _money) {
      if (lower_case(str) == lower_case(tmp)) {
         if (num > bing) {
            add_failed_mess("The $D does not have " +
                            num + " of " + tmp + " it only has " +
                            bing + ".\n");
            str = tmp;
         }
      }
   }
   if (!_money[str]) {
      add_failed_mess("You do not appear to have any " + str + " in $D.\n");
      return 0;
   }
   _money[str] -= num;
   if (!_money[str]) {
      map_delete(_money, str);
   }
   this_player()->adjust_money(num, str);
   add_succeeded_mess("$N withdraw$s " + num + " of " + str + " from $D.\n");
   return 1;
}
void init() {
   commercial::init();
   add_command("change", "<string'money'> into <string'type'> on <direct:object>",
                  (: change($4[0], $4[1]) :));
   if (environment()->is_allowed(this_player()->query_name())) {
      add_command("set", "cut <number'percentage'> on <direct:object>",
                  (: do_set_cut($4[0]) :));
      add_command("deposit", "<number> of <string'type'> on <direct:object>",
                  (: do_deposit($4[0], $4[1]) :));
      add_command("withdraw", "<number> of <string'type'> on <direct:object>",
                  (: do_withdraw($4[0], $4[1]) :));
   }
}
mapping query_dynamic_auto_load() {
   mapping map;
   map = commercial::query_dynamic_auto_load();
   add_auto_load_value(map, BOARD_TAG, "cut", _cut);
   add_auto_load_value(map, BOARD_TAG, "money", _money);
   add_auto_load_value(map, BOARD_TAG, "cost", _cost);
   return map;
}
void init_dynamic_arg(mapping map, object player) {
   commercial::init_dynamic_arg(map, player);
   _cut = query_auto_load_value(map, BOARD_TAG, "cut");
   _money = query_auto_load_value(map, BOARD_TAG, "money");
   _cost = query_auto_load_value(map, BOARD_TAG, "cost");
}

==================================================
FILE: furnitures/commercial/newspaper_archive_box.c
==================================================

inherit "/std/room/furniture/commercial";
#include <room/newspaper.h>
#include <money.h>
#include <move_failures.h>
#define BOARD_TAG "newspaper box"
private string _paper;
private int _cost;
private int _back_issue_cost;
void setup() {
   set_name("box");
   set_short("newspaper archive box");
   add_adjective(({ "archive", "box" }));
   add_help_file("newspaper_archive_box");
   set_allowed_positions(({"sitting", "lying", "kneeling", "meditating"}));
   set_allowed_room_verbs((["sitting" : "sits", "standing" : "stands" ]));
   set_value(2700);
   set_commercial_size(5);
   reset_get();
}
void set_paper(string paper) {
   string place;
   string* bits;
   if (!paper) {
      return ;
   }
   _paper = paper;
   place = query_money_place();
   set_short(_paper + " box");
   set_long("This is a very large battered looking metal box that is full "
            "of old and new copies of " +
            (lower_case(paper)[0..3] == "the "?"":"the ") +
            paper + ".  There is a door on the front you could pull open "
            "beside which is small white writing saying " +
            MONEY_HAND->money_value_string(_cost, place) + " for the current "
            "issue and " +
            MONEY_HAND->money_value_string(_back_issue_cost, place) +
            " for back issues.\n");
   if (lower_case(_paper)[0..3] == "the ") {
      add_property("determinate", "");
   }
   bits = explode(lower_case(_paper), " ");
   add_adjective(bits);
}
int do_buy(int issue) {
   int paper_cost;
   int cost;
   int edition;
   string place;
   object ob;
   int *editions;
   place = query_money_place();
   if (issue == -1) {
      edition = NEWSPAPER_HANDLER->query_last_edition_num(_paper);
      if (!edition) {
         add_failed_mess("There is no edition to buy.\n");
         return 0;
      }
      cost = _cost;
      paper_cost = (NEWSPAPER_HANDLER->query_paper_cost(_paper) * 2) / 3;
   } else {
      edition = NEWSPAPER_HANDLER->query_last_edition_num(_paper);
      if (issue <= 0 || issue > edition) {
         add_failed_mess("The issue numberm ust be between 1 and " +
                         edition + ".\n");
         return 0;
      }
      edition = issue;
      paper_cost = NEWSPAPER_HANDLER->query_paper_cost(_paper) * 2;
      cost = _back_issue_cost;
   }
   if (this_player()->query_value_in(place) < cost) {
      add_failed_mess("You do not have enough money to pay for " +
                      _paper + ", you need " +
                      MONEY_HAND->money_value_string(cost, place) +
                      ".\n");
      return 0;
   }
   this_player()->pay_money(MONEY_HAND->create_money_array(cost, place), place);
   adjust_float(cost - paper_cost);
   ob = clone_object("/obj/misc/newspaper");
   ob->set_paper(_paper);
   ob->set_edition(edition);
   if (ob->move(this_player()) != MOVE_OK) {
      ob->move(environment(this_player()));
      write("Unable to move the paper into your inventory, putting it on "
            "the ground.\n");
   }
   editions = this_player()->query_property("Paper " + _paper);
   if (!editions) {
      editions = ({ });
   }
   if (member_array(edition, editions) == -1) {
      editions += ({ edition });
      this_player()->add_property("Paper " + _paper, editions);
      NEWSPAPER_HANDLER->add_edition_paper_sold(_paper, edition,
                        NEWSPAPER_HANDLER->query_paper_cost(_paper));
   } else {
      NEWSPAPER_HANDLER->add_edition_revenue(_paper, edition,
                        NEWSPAPER_HANDLER->query_paper_cost(_paper));
   }
   add_succeeded_mess("$N pull$s a newspaper from $D.\n");
   return 1;
}
string query_main_status(int hints) {
   string ret;
   int paper_cost;
   int back_issue_cost;
   string place;
   place = query_money_place();
   paper_cost = NEWSPAPER_HANDLER->query_paper_cost(_paper);
   back_issue_cost = paper_cost * 2;
   paper_cost = (paper_cost * 2) / 3;
   ret = "$I$0=" + the_short() + ":\n";
   ret +=   "$I$6=   Revenue                        : " +
          MONEY_HAND->money_value_string(query_revenue(), place) +
          "\n$I$6=   Cost from publisher            : " +
          MONEY_HAND->money_value_string(paper_cost, place) +
          "\n$I$6=   Sale price                     : " +
          MONEY_HAND->money_value_string(_cost, place) +
          "\n$I$6=   Back Issue Cost from publisher : " +
          MONEY_HAND->money_value_string(back_issue_cost, place) +
          "\n$I$6=   Back Issue Sale price          : " +
          MONEY_HAND->money_value_string(_back_issue_cost, place) +
          "\n";
   if (hints) {
      ret += "$I$6=      set cost <amount> on <box>\n";
   }
   return ret;
}
int do_set_cost(string amount, int back_issue) {
   int amt;
   string place;
   place = query_money_place();
   amt = MONEY_HAND->value_from_string(amount, place);
   if (amt <= 0) {
      add_failed_mess("The value " + amount + " is invalid.\n");
      return 0;
   }
   if (back_issue) {
      _back_issue_cost = amt;
   } else {
      _cost = amt;
   }
   set_long("This is a very large battered looking metal box that is full "
            "of old and new copies of " +
            (lower_case(_paper)[0..3] == "the "?"":"the ") +
            _paper + ".  There is a door on the front you could pull open "
            "beside which is small white writing saying " +
            MONEY_HAND->money_value_string(_cost, place) + " for the current "
            "issue and " +
            MONEY_HAND->money_value_string(_back_issue_cost, place) +
            " for back issues.\n");
   if (back_issue) {
      add_succeeded_mess("$N set$s the cost to buy back issue of the paper "
                         "from $D to " +
                         MONEY_HAND->money_value_string(amt, place) + ".\n");
   } else {
      add_succeeded_mess("$N set$s the cost to buy papers from $D to " +
                         MONEY_HAND->money_value_string(amt, place) + ".\n");
   }
   return 1;
}
void init() {
   add_command("buy", "issue <number> from <direct:object>",
               (: do_buy($4[0]) :));
   add_command("pull", "[door] [on] <direct:object>", (: do_buy(-1) :));
   add_command("pull", "open <direct:object>", (: do_buy(-1) :));
   if (is_allowed(this_player()->query_name())) {
      add_command("set", "cost <string'amount'> on <direct:object>",
                  (: do_set_cost($4[0], 0) :));
      add_command("set", "back issue cost <string'amount'> on <direct:object>",
                  (: do_set_cost($4[0], 1) :));
   }
   ::init();
}
mapping query_commercial_options() {
   mapping ret;
   string paper;
   ret = ([ ]);
   foreach (paper in NEWSPAPER_HANDLER->query_all_papers()) {
      ret[paper] = 0;
   }
   return ([ "paper" : ret ]);
}
void set_commercial_option(string type, string name) {
   switch (type) {
   case "paper" :
      _cost = NEWSPAPER_HANDLER->query_paper_cost(name);
      _back_issue_cost = NEWSPAPER_HANDLER->query_paper_cost(name) * 3;
      call_out("set_paper", 1, name);
      break;
   }
}
mapping query_dynamic_auto_load() {
   mapping map;
   map = commercial::query_dynamic_auto_load();
   add_auto_load_value(map, BOARD_TAG, "cost", _cost);
   add_auto_load_value(map, BOARD_TAG, "paper", _paper);
   add_auto_load_value(map, BOARD_TAG, "back cost", _back_issue_cost);
   return map;
}
void init_dynamic_arg(mapping map, object player) {
   string name;
   commercial::init_dynamic_arg(map, player);
   _cost = query_auto_load_value(map, BOARD_TAG, "cost");
   _back_issue_cost = query_auto_load_value(map, BOARD_TAG, "back cost");
   name = query_auto_load_value(map, BOARD_TAG, "paper");
   call_out("set_paper", 1, name);
}

==================================================
FILE: furnitures/commercial/newspaper_box.c
==================================================

inherit "/std/room/furniture/commercial";
#include <room/newspaper.h>
#include <money.h>
#include <move_failures.h>
#define BOARD_TAG "newspaper box"
private string _paper;
private int _cost;
void setup() {
   set_name("box");
   set_short("newspaper box");
   add_adjective("box");
   add_help_file("newspaper_box");
   set_allowed_positions(({"sitting", "lying", "kneeling", "meditating"}));
   set_allowed_room_verbs((["sitting" : "sits", "standing" : "stands" ]));
   set_value(900);
   set_commercial_size(1);
   reset_get();
}
void set_paper(string paper) {
   string place;
   string* bits;
   if (!paper) {
      return ;
   }
   _paper = paper;
   place = query_money_place();
   set_short(_paper + " box");
   set_long("This is a battered looking metal box that is full of copies of " +
            (lower_case(paper)[0..3] == "the "?"":"the ") +
            paper + ".  There is a door on the front you could pull open "
            "beside which is small white writing saying " +
            MONEY_HAND->money_value_string(_cost, place) + ".\n");
   if (lower_case(_paper)[0..3] == "the ") {
      add_property("determinate", "");
   }
   bits = explode(lower_case(_paper), " ");
   add_adjective(bits);
}
int do_buy() {
   int paper_cost;
   int cost;
   int edition;
   string place;
   object ob;
   int *editions;
   place = query_money_place();
   cost = _cost;
   paper_cost = (NEWSPAPER_HANDLER->query_paper_cost(_paper) * 2) / 3;
   edition = NEWSPAPER_HANDLER->query_last_edition_num(_paper);
   if (!edition) {
      add_failed_mess("There is no edition to buy.\n");
      return 0;
   }
   if (this_player()->query_value_in(place) < cost) {
      add_failed_mess("You do not have enough money to pay for " +
                      _paper + ", you need " +
                      MONEY_HAND->money_value_string(cost, place) +
                      ".\n");
      return 0;
   }
   this_player()->pay_money(MONEY_HAND->create_money_array(cost, place), place);
   adjust_float(cost - paper_cost);
   ob = clone_object("/obj/misc/newspaper");
   ob->set_paper(_paper);
   ob->set_edition(edition);
   if (ob->move(this_player()) != MOVE_OK) {
      ob->move(environment(this_player()));
      write("Unable to move the paper into your inventory, putting it on "
            "the ground.\n");
   }
   editions = this_player()->query_property("Paper " + _paper);
   if (!editions) {
      editions = ({ });
   }
   if (member_array(edition, editions) == -1) {
      editions += ({ edition });
      this_player()->add_property("Paper " + _paper, editions);
      NEWSPAPER_HANDLER->add_edition_paper_sold(_paper, edition,
                        NEWSPAPER_HANDLER->query_paper_cost(_paper));
   } else {
      NEWSPAPER_HANDLER->add_edition_revenue(_paper, edition,
                        NEWSPAPER_HANDLER->query_paper_cost(_paper));
   }
   add_succeeded_mess("$N pull$s a newspaper from $D.\n");
   return 1;
}
string query_main_status(int hints) {
   string ret;
   int paper_cost;
   string place;
   place = query_money_place();
   paper_cost = (NEWSPAPER_HANDLER->query_paper_cost(_paper) * 2) / 3;
   ret = the_short() + ":\n";
   ret +=   "$I$6=   Revenue             : " +
          MONEY_HAND->money_value_string(query_revenue(), place) +
          "\n$I$6=   Cost from publisher : " +
          MONEY_HAND->money_value_string(paper_cost, place) +
          "\n$I$6=   Sale price          : " +
          MONEY_HAND->money_value_string(_cost, place) +
          "\n";
   if (hints) {
      ret += "$I$6=      set cost <amount> on <box>\n";
   }
   return ret;
}
int do_set_cost(string amount) {
   int amt;
   string place;
   place = query_money_place();
   amt = MONEY_HAND->value_from_string(amount, place);
   if (amt <= 0) {
      add_failed_mess("The value " + amount + " is invalid.\n");
      return 0;
   }
   _cost = amt;
   set_long("This is a battered looking metal box that is full of copies of " +
            (lower_case(_paper)[0..3] == "the "?"":"the ") +
            _paper + ".  There is a door on the front you could pull open "
            "beside which is small white writing saying " +
            MONEY_HAND->money_value_string(_cost, place) + ".\n");
   add_succeeded_mess("$N set$s the cost of buy papers from $D to " +
                      MONEY_HAND->money_value_string(amt, place) + ".\n");
   return 1;
}
void init() {
   add_command("buy", "paper from <direct:object>", (: do_buy() :));
   add_command("pull", "[door] [on] <direct:object>", (: do_buy() :));
   add_command("pull", "open <direct:object>", (: do_buy() :));
   if (is_allowed(this_player()->query_name())) {
      add_command("set", "cost <string'amount'> on <direct:object>",
                  (: do_set_cost($4[0]) :));
   }
   ::init();
}
mapping query_commercial_options() {
   mapping ret;
   string paper;
   ret = ([ ]);
   foreach (paper in NEWSPAPER_HANDLER->query_all_papers()) {
      ret[paper] = 0;
   }
   return ([ "paper" : ret ]);
}
void set_commercial_option(string type, string name) {
   switch (type) {
   case "paper" :
      _cost = NEWSPAPER_HANDLER->query_paper_cost(name);
      call_out("set_paper", 1, name);
      break;
   }
}
mapping query_dynamic_auto_load() {
   mapping map;
   map = commercial::query_dynamic_auto_load();
   add_auto_load_value(map, BOARD_TAG, "cost", _cost);
   add_auto_load_value(map, BOARD_TAG, "paper", _paper);
   return map;
}
void init_dynamic_arg(mapping map, object player) {
   string name;
   commercial::init_dynamic_arg(map, player);
   _cost = query_auto_load_value(map, BOARD_TAG, "cost");
   name = query_auto_load_value(map, BOARD_TAG, "paper");
   call_out("set_paper", 1, name);
}

==================================================
FILE: furnitures/commercial/pickler.c
==================================================

inherit "/std/room/furniture/commercial";
#include <money.h>
#define FEE_PER_USE 40
#define BOARD_TAG "pickler"
private int _revenue;
private int _cost;
void setup() {
   set_name( "pickler" );
   set_short( "pickler" );
   set_long( "A small wooden box with a handle on it, it has some words "
             "written on it.\n");
   add_read_mess("Pickler, pull for results", 0, "common");
   set_allowed_positions(({"sitting", "lying", "kneeling", "meditating"}));
   set_allowed_room_verbs((["sitting" : "sits" ]));
   set_weight(2000);
   set_value(240000);
   add_help_file("pickler");
   set_commercial_size(2);
   set_commercial_type("utility");
   set_shop_use_types(({ "pickler" }));
   _cost = 80;
}
int do_pickle(object* obs) {
   object* pickleable;
   string place;
   int amt;
   int here_amt;
   if (!is_open_for("pickler", this_player()->query_name())) {
      add_failed_mess("The pickler is not open.\n");
      return 0;
   }
   place = query_money_place();
   pickleable = filter(obs, (: !$1->query_cured() &&
                               ($1->query_property("cureable") ||
                                $1->query_decay_speed()) :));
   if (!sizeof(pickleable)) {
      add_failed_mess("You cannot pickle any of " +
                      query_multiple_short(obs) + ".\n");
      return 0;
   }
   amt = sizeof(pickleable) * _cost;
   here_amt = amt - sizeof(pickleable) * FEE_PER_USE;
   if (here_amt < 0) {
      if (query_float() < -here_amt) {
          add_failed_mess(environment()->the_short() + " does not "
                          "have enough money to pickle anything.\n");
          return 0;
      }
   }
   if (this_player()->query_value_in(place) < amt) {
      add_failed_mess("You do not have the needed " +
                      MONEY_HAND->money_value_string(amt, place) +
                      " to pay for $I to be pickled.\n", pickleable);
      return 0;
   }
   this_player()->pay_money(MONEY_HAND->create_money_array(amt, place), place);
   pickleable->do_cure();
   adjust_float(here_amt);
   _revenue += here_amt;
   add_succeeded_mess("$N pickle$s $I on $D.\n", pickleable);
   return 1;
}
int do_set_cost(string amount) {
   int amt;
   string place;
   place = query_money_place();
   amt = MONEY_HAND->value_from_string(amount, place);
   if (amt <= 0) {
      add_failed_mess("The value " + amount + " is invalid.\n");
      return 0;
   }
   _cost = amt;
   add_succeeded_mess("$N set$s the cost of using $D to " +
                      MONEY_HAND->money_value_string(amt, place) + ".\n");
   return 1;
}
string query_main_status(int hint) {
   string place;
   place = query_money_place();
   return the_short() + " status:\n"
          "\n$I$6=   Fee Per Use : " +
              MONEY_HAND->money_value_string(FEE_PER_USE, place) + " (fixed)"
          "\n$I$6=   Cost Per Use: " +
              MONEY_HAND->money_value_string(_cost, place) +
          "\n$I$6=   Profit      : " +
             MONEY_HAND->money_value_string(_revenue, place) + "\n";
}
int do_stats() {
   string ret;
   ret = query_main_status(0);
   write(ret);
   add_succeeded_mess("");
   return 1;
}
void init() {
   commercial::init();
   add_command("use", "<direct:object> to [pickle] <indirect:object>",
               (: do_pickle :));
   add_command("use", "<direct:object> with <indirect:object>",
               (: do_pickle :));
   add_command("pickle", "<indirect:object> with <direct:object>",
               (: do_pickle :));
   add_command("pull", "[handle] [on] <direct:object> with <indirect:object>",
               (: do_pickle :));
   if (environment()->is_allowed(this_player()->query_name())) {
      add_command("status", "<direct:object>",
                  (: do_stats() :));
      add_command("set", "cost <string'cost'> on <direct:object>",
                  (: do_set_cost($4[0]) :));
   }
}
mapping query_dynamic_auto_load() {
   mapping map;
   map = commercial::query_dynamic_auto_load();
   add_auto_load_value(map, BOARD_TAG, "revenue", _revenue);
   add_auto_load_value(map, BOARD_TAG, "cost", _cost);
   return map;
}
void init_dynamic_arg(mapping map, object player) {
   commercial::init_dynamic_arg(map, player);
   _revenue = query_auto_load_value(map, BOARD_TAG, "revenue");
   _cost = query_auto_load_value(map, BOARD_TAG, "cost");
}

==================================================
FILE: furnitures/commercial/poll_data.c
==================================================

inherit "/std/room/inherit/voting_room";
inherit "/std/room/furniture/commercial";
#include <money.h>
#define BOARD_TAG "poll data"
#define POLL_DATA_MAXIMUM_RESULTS 10
private int _allow_open_voting;
private string* _finished_votes;
void finish_vote(string type, string description, string* choices,
                 mapping votes, string* voted);
void create() {
   voting_room::create();
   commercial::create();
   _finished_votes = ({ });
}
void setup() {
   set_name( "poll" );
   set_short( "opinion poll" );
   add_adjective( ({ "opinion" } ));
   set_long( "A box with a bunch of pieces paper sitting on it.  It seems "
             "to be keeping a tally of something.\n");
   set_allowed_positions(({"sitting", "lying", "kneeling", "meditating"}));
   set_allowed_room_verbs((["sitting" : "sits" ]));
   set_weight(2000);
   set_value(240000);
   set_commercial_size(2);
   set_commercial_type("misc");
   set_shop_use_types(({ "poll add", "poll vote" }));
   set_completion_action((: finish_vote :));
   set_no_elections(1);
   set_vote_conditions((: is_open_for("poll vote", $1->query_name()) :));
   add_help_file("poll_data");
}
int load_me() {
   if (!query_commercial_id()) {
      setup_new_commercial_id();
   }
   set_save_file(query_save_dir() + query_commercial_id());
   if (!_finished_votes) {
      _finished_votes = ({ });
   }
}
int do_show_results() {
   string ret;
   string result;
   ret = "";
   foreach (result in _finished_votes) {
      ret += result + "\n\n";
   }
   write("$P$Vote Archive$P$" + ret);
   add_succeeded_mess("");
   return 1;
}
int do_create_vote(string choices) {
   if (!is_open_for("poll add", this_player()->query_name())) {
      add_failed_mess("Unable to add a vote.\n");
      return 0;
   }
  return ::do_create_vote(choices);
}
void finish_vote(string type, string description, string* choices,
                 int* votes, string* voted)
{
   string ret;
   int i;
   ret = "Vote finished at " + ctime(time()) + ":\n";
   ret += "$I$3=   " + description + "\n\n";
   ret += "$I$0=Results:\n$I$3=   ";
   for (i = 0; i < sizeof(choices); i++) {
      ret += choices[i] + ": " + votes[i] + "\n";
   }
   if (!_finished_votes) {
      _finished_votes = ({ ret });
   } else {
      _finished_votes += ({ ret });
   }
   if (sizeof(_finished_votes) > POLL_DATA_MAXIMUM_RESULTS) {
      _finished_votes = _finished_votes[0..POLL_DATA_MAXIMUM_RESULTS];
   }
   save_room();
}
int do_set_duration(int hours) {
   if (hours <= 0) {
      add_failed_mess("The duration must be positive.\n");
      return 0;
   }
   set_vote_duration(hours * 60 * 60);
   add_succeeded_mess("Set the vote duration to " + hours + " hours.\n");
   return 1;
}
int do_delete_vote(int id) {
   if (!::delete_vote(id)) {
      add_failed_mess("Cannot delete the vote id #" + id + ".\n");
      return 0;
   }
   add_succeeded_mess("Deleted the vote id#" + id + ".\n");
   return 1;
}
int do_end_vote(int id) {
   if ( !query_our_votes()[ id ] ) {
      add_failed_mess("Cannot end the vote id #" + id + ".\n");
      return 0;
   }
   end_vote(id);
   add_succeeded_mess("Finished the vote id#" + id + ".\n");
   return 1;
}
string query_main_status() {
   string ret;
   ret = "Vote duration:    " + (query_vote_duration() / (60 * 60)) +
         " hours\n";
   return ret;
}
void init() {
   commercial::init();
   voting_room::init();
   voting_room::init_add_vote();
   add_command("results", "of votes", (: do_show_results() :));
   if (environment()->is_allowed(this_player()->query_name())) {
      add_command("set", "vote duration <number'hours'> on <direct:object>",
                  (: do_set_duration($4[0]) :));
      add_command("delete", "vote <number'vote id'>",
                  (: do_delete_vote($4[0]) :));
      add_command("finish", "vote <number'vote id'>",
                  (: do_end_vote($4[0]) :));
   }
}

==================================================
FILE: furnitures/commercial/postal.c
==================================================

inherit "/std/room/furniture/commercial";
#include <money.h>
#include <mail.h>
#define BOARD_TAG "postal"
int _num_uses;
void setup() {
   set_name( "counter" );
   set_short( "postal counter" );
   add_adjective("postal");
   set_long( "A wooden counter that looks like a place you could write "
             "and read mail.\n");
   set_allowed_positions(({"sitting", "lying", "kneeling", "meditating"}));
   set_allowed_room_verbs((["sitting" : "sits" ]));
   set_weight(2000);
   set_value(6400000);
   add_help_file("postal");
   set_commercial_size(25);
   set_commercial_type("utility");
   set_shop_use_types(({ "pickler" }));
}
int do_mail(string to) {
   if (MAIL_TRACK->mail(to)) {
      _num_uses++;
      return 1;
   }
   return 0;
}
string query_main_status(int hint) {
   string place;
   place = query_money_place();
   return the_short() + " status:\n"
          "\n$I$6=   Number of  uses : " + _num_uses + "\n";
}
void init() {
   commercial::init();
   add_command("mail", "<string'to'>",
               (: do_mail($4[0]) :));
   add_command("mail", "[handle] [on] <direct:object> with <indirect:object>",
               (: do_mail(0) :));
}
mapping query_dynamic_auto_load() {
   mapping map;
   map = commercial::query_dynamic_auto_load();
   add_auto_load_value(map, BOARD_TAG, "uses", _num_uses);
   return map;
}
void init_dynamic_arg(mapping map, object player) {
   commercial::init_dynamic_arg(map, player);
   _num_uses = query_auto_load_value(map, BOARD_TAG, "uses");
}

==================================================
FILE: furnitures/commercial/small_shop.c
==================================================

inherit "/std/room/furniture/shop_base";
void setup() {
   set_name( "counter" );
   set_short( "small shop counter" );
   add_adjective( ({ "small", "shop" } ));
   set_long( "The smooth polished surface of the small counter shines and "
             "glows at you.\n");
   set_allowed_positions(({"sitting", "standing" }));
   set_allowed_room_verbs((["sitting" : "sits", "standing" : "stands" ]));
   set_weight(1000);
   set_value(480000);
   set_maximum_inventory_size(50);
   set_commercial_size(40);
}

==================================================
FILE: furnitures/artwork/mountain_painting.c
==================================================

inherit "/std/room/furniture/basic";
void setup() {
    set_name( "painting" );
    set_short( "painting of a misty mountain range" );
    add_adjective( ({ "of", "a", "misty", "mountain", "range" }) );
    set_long( "This is a watercolour painting of a range of "
        "mountains skirting a misty lake.  Fiery red trees "
        "border the indescript water's edge, snaking their "
        "branches out horizontally more than vertically.  "
        "The mountains have been painted complementing "
        "shades of steel grey and persian blue, while the "
        "water itself is a strangely creamy white.\n" );
    set_weight( 40 );
    set_value( 46775 );
    set_allowed_positions( ({"hanging"}) );
    set_allowed_room_verbs((["hanging" : "hangs",
                             "sitting" : "sits",
                             "dangling" : "dangles",
                             "standing" : "stands" ]));
}

==================================================
FILE: furnitures/fake_plants/silk_cabbage_plant.c
==================================================

inherit "/std/room/furniture/basic";
void setup () {
    set_name( "plant" );
    add_adjective( ({ "silk", "potted", "cabbage" }) );
    set_short( "potted silk cabbage plant" );
    add_alias( "cabbage" );
    set_main_plural ( "potted silk cabbage plants" );
    add_property( "determinate", "a " );
    set_long( "Rare and magnificent!  Strange and exotic!  Potted in a "
        "subtley plain pot, this fine silk-leafed brassica has been "
        "created in Sum Dim by none other than Brown Fingers Dibbler, "
        "purveyor of the finest silken forn plants.  Its leaves even look "
        "as though they have been nibbled slightly by a caterpillar, "
        "for the authentic touch.\n" );
    set_value( 35000 );
    set_weight( 150 );
    set_allowed_room_verbs(([ "sitting" : "sits",
                              "standing" : "stands",
                              "lying" : "lies" ]));
}

==================================================
FILE: furnitures/safes/small_safe.c
==================================================

inherit "/std/room/furniture/storage";
void setup() {
  set_name("safe");
  set_short("small iron safe");
  add_adjective(({"small", "iron"}));
  set_long("This is a small iron safe.  It bears the logo of "
           "Joseph Thighbiter a renowned safe maker.  It appears "
           "to feature one of his patented locks.\n");
  add_drawer("top", 50);
  add_drawer("middle", 25);
  add_drawer("bottom", 25);
  set_drawers_inside(1);
  set_weight(900);
  set_value(120000);
  set_allowed_room_verbs((["squatting" : "squats" ]));
  set_pick_skill("covert.lockpick.safes");
  set_difficulty(4);
  setup_trap(300, "pick",
             "Hidden inside the lock is a small ampule which, if touched by "
             "an unwary tool would trigger a puff of poisonous gas.",
             ({"A small cloud of gas puffs out of the safe.\n",
                 "A small cloud of gas puffs out of the safe.\n"}),
             ({"/std/effects/poisons/poison_gas", 600}));
}
void init() {
  string key_id;
  object key;
  if(!query_key()) {
    key_id = "safe"+random(10000);
    set_key(key_id);
    key = clone_object("/std/key");
    key->set_key("small iron", key_id);
    key->set_long("This small, yet sturdy, key looks like it is for a "
                  "safe.\n");
    key->move(this_object());
    set_closed();
  }
  ::init();
}

==================================================
FILE: furnitures/chests/pine_chest_of_drawers.c
==================================================

inherit "/std/room/furniture/storage";
void setup() {
    set_name("chest");
    set_short("Agatean pine chest of drawers");
    add_adjective(({"agatean", "pine", "chest", "of", "drawers"}));
    add_alias("chest of drawers");
    set_long("A simple chest of drawers formed of genuine Agatean pine, "
        "sturdy and functional.  The grain of the wood is a little "
        "mismatched testifying to the desire of the manufacturer to "
        "create something functional rather than beautiful.  Five drawers "
        "are set into the front each bearing two knobs of the same "
        "material. Very slight ornamentation has been added in the form "
        "of gentle curves deliniating the edges and unornamented top.\n");
    set_weight(900);
    set_max_weight(400);
    set_value(200000);
    set_allowed_room_verbs((["squatting" : "squats" ]));
    set_pick_skill("covert.lockpick.doors");
    set_difficulty(4);
}
void init() {
    string key_id;
    object key;
    if(!query_key()) {
        key_id = "furniture_lock_"+random(1000);
        set_key(key_id);
        key = clone_object("/std/key");
        key->set_key("small iron", key_id);
        key->set_long("This small, yet sturdy, key looks like it is for a "
                  "piece of furniture.\n");
        key->move(this_object());
        set_closed();
    }
  ::init();
}

==================================================
FILE: furnitures/chests/pumpkin_chest.c
==================================================

inherit "/std/room/furniture/storage";
void setup() {
  set_name("chest");
  set_short("pumpkin chest");
  add_adjective(({"pumpkin","fairytale"}));
  set_long(
    "Shaped and painted like a perfectly ripe pumpkin, this chest is "
    "held just off the ground by four sturdy wooden wheels.  "
    "Unfortunately, these appear to be merely decorative in nature, and "
    "don't actually turn.  A deep green stem has been attached to the "
    "top of the chest to act as a handle.\n");
  set_weight(1200);
  set_max_weight(200);
  set_value(590000);
  set_allowed_room_verbs((["squatting" : "squats",
                               "sitting" : "sits"
  ]));
}

==================================================
FILE: furnitures/outdoor/bird_bath.c
==================================================

inherit "/std/room/furniture/basic";
void setup() {
  set_name( "birdbath" );
  set_short( "stone bird bath" );
  add_adjective( ({ "stone", "bird", "bath" }) );
  add_alias( ({ "bath", "bird bath" }) );
  set_long( "This is a block of stone that has been chiseled and hacked into "
   "a vaguely bird bath shape.  It is really quite ugly.  Fortunately, birds "
   "don't seem to be art critics.  The base of the bird bath is made of some "
   "sort of porous stone that resembles Dwarf Bread in texture.\n" );
  set_allowed_positions(({"sitting","standing"}));
  set_allowed_room_verbs((["standing" : "stands" ]));
  set_weight(200);
  set_value(4000);
}

==================================================
FILE: furnitures/cushions/frog_cushion.c
==================================================

inherit "/std/room/furniture/basic";
void setup() {
  set_name( "cushion" );
  set_short( "frog cushion" );
  add_adjective( ({ "frog", "green" }) );
  add_alias( "pillow" );
  set_long( "This is a cushion that is the approximate shape of a "
    "frog that has been flattened by a cart.  It is covered in vivid "
    "green cordueroy.\n" );
  set_allowed_positions(({"sitting", "lying", "kneeling", "meditating",
                            "crouching", "standing"}));
  set_allowed_room_verbs((["lying" : "lays", "hanging" : "hangs"]));
  set_weight(2);
  set_value(8000);
}

==================================================
FILE: furnitures/shelves/pine_nightstand.c
==================================================

inherit "/std/room/furniture/storage";
void setup() {
  set_name( "nightstand" );
  set_short( "pine nightstand" );
  add_adjective( ({ "pine", "bedside" }) );
  add_alias("cabinet");
  set_long( "This is a small bedside cabinet, made of thick hublandish "
            "pine planks.  The wood is oiled, to bring out the characteristic "
            "colour, and the stripes and knots texture in it.  It's just the "
            "kind of thing that is thought to have a rustic look, by "
            "people who don't have much of a clue what rustic is.\n" );
  add_drawer( "top", 50 );
  set_weight(135);
  set_value(10000);
  set_allowed_positions(({"sitting"}));
  set_allowed_room_verbs((["sitting" : "sits" ]));
}
void init() {
    string key_id;
  object key;
  if(!query_key()) {
    key_id = "nightstand_"+random(100);
    set_key(key_id);
    set_difficulty(1);
    key = clone_object("/std/key");
    key->set_key("small", key_id);
    key->set_long("This small key looks like it is probably for a piece of "
                  "furniture.\n");
    key->move(this_object());
    set_closed();
  }
  ::init();
}

==================================================
FILE: furnitures/crockery/happiness_jar.c
==================================================

inherit "/std/room/furniture/storage";
void setup(){
    set_name( "happiness" );
    set_short( "jar of double happiness" );
    add_adjective( ({ "jar", "of", "double" }) );
    set_long("In Agatea, this elegant blue and white porcelain jar is "
        "often presented as a wedding gift.  The pictogram for happiness "
        "is drawn twice in parallel to make the Double Happiness sign, "
        "which is used in wedding decorations.  With a tight lid, this "
        "porcelain jar is excellent for storing anything you wish.\n");
    set_weight( 140 );
    set_max_weight(27);
    set_value( 25000 );
    set_allowed_room_verbs(([ "sitting" : "sits",
                              "standing" : "stands",
                              "leaning" : "leans",
                              "lying" : "lies",
                              "squatting" : "squats" ]));
}

==================================================
FILE: furnitures/mirrors/jasmine_mirror.c
==================================================

inherit "/std/room/furniture/mirror";
string reflect();
void setup(){
  set_name( "mirror" );
  set_short( "jasmine mirror" );
  add_adjective( ({ "jasmine", "flower", "oval" }) );
  set_long("Delicately carved jasmine flowers and bead trim surround this "
           "oval mirror.  The flowers are so detailed that they almost "
           "appear to be real.\n");
  set_allowed_room_verbs( (["hanging" : "hangs",
                            "gracing"  : "graces"   ]) );
  set_weight(60);
  set_value(50000);
}

==================================================
FILE: furnitures/cabinets/rose_display_cabinet.c
==================================================

inherit "/std/room/furniture/storage";
void setup() {
    set_name("cabinet");
    set_short("rosewood display cabinet");
    add_adjective( ({ "rosewood", "display" }) );
    set_long("This is a tall rosewood display cabinet that has a glass "
        "front to ensure that its contents are well protected.  Supported "
        "by various delicate geometric shelves on the inside, the outside "
        "is inlaid with mother of pearl that has been shaped into "
        "blossoming cherry trees.\n");
    set_transparent();
    set_weight(1200);
    set_max_weight(200);
    set_value(590000);
    set_allowed_room_verbs((["squatting" : "squats" ]));
}

==================================================
FILE: furnitures/tables/pedestal_table.c
==================================================

inherit "/std/room/furniture/surface";
void setup() {
    set_name( "table" );
    set_short( "pedestal table" );
    add_adjective( "pedestal" );
    set_long("Finished in warm antique hues, this pedestal table is a "
        "roughly triangular object which ends abruptly in a flat plateau "
        "which looks to be the ideal place for placing a few books or "
        "a reading lantern.  Rising along its height are a series of "
        "drawers with brass handles, which narrow in width with the table "
        "as it rises.\n");
    set_allowed_positions( ({ "on" }) );
    set_allowed_room_verbs( ([ "standing" : "stands" ]) );
    set_weight( 250 );
    set_max_weight( 50 );
    set_value( 88000 );
    set_allow_use_internals( 1 );
}

==================================================
FILE: furnitures/misc/antique_food_basket.c
==================================================

inherit "/std/room/furniture/storage";
void setup(){
    set_name( "basket" );
    set_short( "antique food basket" );
    add_adjective( ({ "antique", "food", "basket" }) );
    set_long("Used for carrying food in the older times, now refurbished, "
        "this antique food basket is now a curious ornament to a "
        "contemporary eye.  Still usable for storage, if not for food, the "
        "handle is made of bamboo that has been bent into shape.  "
        "Retrieved from the Sum Dim countryside, no two of these baskets "
        "are alike.\n");
    set_weight( 60 );
    set_max_weight(38);
    set_value( 62000 );
    set_allowed_room_verbs(([ "sitting" : "sits",
                              "standing" : "stands",
                              "leaning" : "leans",
                              "lying" : "lies",
                              "squatting" : "squats" ]));
}

==================================================
FILE: furnitures/misc/bamboo_screen.c
==================================================

inherit "/std/room/furniture/basic";
void setup() {
    set_name( "screen" );
    set_short( "bamboo matchstick screen" );
    add_adjective( ({ "bamboo", "matchstick" }) );
    set_long( "This double-sided screen has been constructed by "
        "lashing long bamboo poles together so that "
        "four distinct interconnected panels are hinged "
        "together when it is standing.  A lovely tan colour, "
        "the texture is rough and the knots in the wood give it "
        "a rustic minimalist look.\n");
    set_allowed_positions( ({ "standing", "sitting" }) );
    set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
    set_weight(20);
    set_value(400000);
}

==================================================
FILE: furnitures/misc/blackboard.c
==================================================

inherit "/std/room/furniture/basic";
int query_allowed (string);
string read_stuff();
string query_words();
string _owner = "";
string _words = "";
void setup() {
  set_name ("blackboard");
  set_short ("blackboard");
  add_alias (({"board", "sign"}));
  set_long ("The residue of faded chalk-dust and long forgotten "
      "doodles lies heavily on the blackboard.  The grain of the "
      "board is worn and slightly mottled with age, hinting at "
      "a long and dignified history of classrooms and university "
      "lecterns.  Or perhaps just hinting at cheap wood and "
      "bad upkeep.\n");
  set_read_mess ((: read_stuff :));
  set_allowed_room_verbs( (["standing" : "stands",
                          "hanging"  : "hangs"]) );
  set_value(0);
}
void init() {
  this_player()->add_command ("write", this_object(), "[on] <direct:object>");
  this_player()->add_command ("clean", this_object(), "<direct:object>");
}
void set_words (string bing) {
    _words = bing;
}
string query_words () {
    return _words;
}
string read_stuff() {
    string bing = "";
    if (sizeof (query_words())) {
        bing += query_words();
    }
    if (!sizeof (bing)) {
        bing = "A few random letters that escaped cleaning can be seen on "
            "the blackboard.";
    }
    return bing;
}
int do_clean() {
    if (!query_allowed (this_player()->query_name())) {
        this_player()->add_failed_mess (this_object(), "You cannot clean "
            "the blackboard!\n", ({ }));
        return 0;
    }
    set_words ("");
    return 1;
}
int do_write() {
    string bean;
    if (!query_allowed (this_player()->query_name())) {
        this_player()->add_failed_mess (this_object(), "You cannot write on "
            "the blackboard!\n", ({ }));
        return 0;
    }
    bean = query_words();
    this_player()->do_edit(bean, "blackboard_text", this_object());
    this_player()->add_succeeded_mess (this_object(), "$N find$s a handy "
        "piece of chalk and start$s to write on the blackboard.\n", ({ }));
    return 1;
}
void blackboard_text(string text) {
    if (!text) {
      tell_room (environment (this_object()), this_player()->one_short()
          + " steps back from the blackboard without making any "
          "changes.\n", this_player());
      tell_object (this_player(), "Okay, nothing has been changed.\n");
      return;
    }
    set_words (text);
    tell_room(environment (this_object()), this_player()->one_short()
      + " finishes writing on the blackboard.\n", this_player());
}
int query_allowed (string name) {
    if (function_exists ("query_owner", environment (this_object()))) {
      if (name == environment (this_object())->query_owner()) {
        return 1;
      }
    }
    if (function_exists ("query_allowed", environment (this_object()))) {
      if (member_array (name, environment(this_object())->query_allowed())
          != -1) {
        return 1;
      }
      else {
        return 0;
      }
    }
    return 1;
}
mapping query_dynamic_auto_load() {
   return ([
     "::" : ::query_dynamic_auto_load(),
      "words" : query_words(),
   ]);
}
void init_dynamic_arg( mapping map ) {
   ::init_dynamic_arg( map[ "::" ] );
   set_words (map["words"]);
   set_read_mess ((: read_stuff :));
}

==================================================
FILE: furnitures/misc/brass_gong.c
==================================================

inherit "/std/room/furniture/basic";
void setup() {
    set_name("gong");
    set_short("brass gong");
    add_adjective( "brass" );
    set_long("This is a medium-sized brass gong, hanging from a brass "
        "frame.  Lazy pandas roll around the surface of the gong, "
        "the occasional one actually doing something other than "
        "eating or chewing on a stalk of bamboo.  The gong can be hit "
        "to make a loud ringing sound and annoy everyone in the room.\n");
    set_weight( 60 );
    set_value( 10000 );
    set_material( "brass" );
    set_allowed_positions( ({"hanging"}) );
    set_allowed_room_verbs((["hanging" : "hangs",
                             "sitting" : "sits",
                             "dangling" : "dangles",
                             "standing" : "stands" ]));
}
void init() {
    this_player()->add_command( "hit", this_object(), "<direct:object:me>" );
}
int do_hit(){
    this_player()->add_succeeded_mess(this_object(), "$N $V $p "
        +this_object()->short()+" loudly, filling the room with a "
        "deafening ringing sound.\n", ({ }));
    return 1;
}

==================================================
FILE: furnitures/misc/burnt_bamboo_screen.c
==================================================

inherit "/std/room/furniture/basic";
void setup() {
    set_name( "screen" );
    set_short( "burnt bamboo screen" );
    add_adjective( ({ "burnt", "bamboo" }) );
    set_long( "This screen has been constructed by "
        "weaving hundreds of lashes of bamboo together to form a tight "
        "mesh that blocks out any chance of peeking through to see what's "
        "on the other side.  The bamboo, lovely in differing shades of "
        "tan through to chocolate brown, is supported by long poles which "
        "make up the frame and hinge the entire structure together.\n");
    set_allowed_positions( ({ "standing", "sitting" }) );
    set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
    set_weight(150);
    set_value(400000);
}

==================================================
FILE: furnitures/misc/calligraphy_fishbowl.c
==================================================

inherit "/std/room/furniture/basic";
void setup() {
    set_name( "fishbowl" );
    set_short( "calligraphised fishbowl" );
    add_adjective( ({ "calligraphised", "fish" }) );
    add_alias("bowl");
    add_plural( ({ "bowls", "fishbowls" }) );
    set_long("Calligraphy is the soul of Agatean culture.  On this 16-inch "
        "fishbowl a Zing Dynasty poem is strikingly carved in "
        "and then gold leafed against an equally striking black background.  "
        "The black lacquer is hand-painted over porcelain to create a matte "
        "effect.  A matching solid wood stand holds the bowl's weight, "
        "and several goldfish swim quietly beneath the water it holds.\n" );
    set_weight( 110 );
    set_value( 48000 );
    set_allowed_positions(({"sitting"}));
    set_allowed_room_verbs(([ "sitting" : "sits",
                              "standing" : "stands",
                              "leaning" : "leans",
                              "lying" : "lies",
                              "squatting" : "squats" ]));
}

==================================================
FILE: furnitures/misc/cherryblossom_screen.c
==================================================

inherit "/std/room/furniture/basic";
void setup() {
    set_name( "screen" );
    set_short( "cherry blossom shoji screen" );
    add_adjective( ({ "cherry", "blossom", "shoji" }) );
    set_long( "A stunning cherry blossom tree adorns the "
        "silk panelling of this double-sided shoji "
        "screen.  Four panels with black wooden trim fold "
        "out to make this screen stand tall, its blossoms "
        "painted on with the most precise hand, the thickness "
        "of the paint still showing on the silk panels.\n");
    set_allowed_positions( ({ "standing", "sitting" }) );
    set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
    set_weight(20);
    set_value(400000);
}

==================================================
FILE: furnitures/misc/crackled_fishbowl.c
==================================================

inherit "/std/room/furniture/basic";
void setup() {
    set_name( "fishbowl" );
    set_short( "fishbowl with crackled blue enamel" );
    add_adjective( ({ "with", "crackled", "blue", "enamel" }) );
    add_alias("bowl");
    add_plural( ({ "bowls", "fishbowls" }) );
    set_main_plural("fishbowls with cracked blue enamel");
    set_long("Peace and serenity, the foundation for a good life considered "
        "in Agatean philosophy, are reflected in this 16-inch blue and "
        "white porcelain fishbowl.  A special pottery heating technique is "
        "applied in this product.  Looking closely one can see the small "
        "crackles throughout the entire fishbowl, which is more interesting "
        "to the eye than just a plain surface.  The interior is an "
        "underwater scene of gold fish swimming in circular along the edge "
        "of the bowl.  Resting on a beautiful hand-polished cherry wood "
        "base, the shapes of several goldfish can be seen swishing back and "
        "forth beneath the water it holds.\n" );
    set_weight( 120 );
    set_value( 46000 );
    set_allowed_positions(({"sitting"}));
    set_allowed_room_verbs(([ "sitting" : "sits",
                              "standing" : "stands",
                              "leaning" : "leans",
                              "lying" : "lies",
                              "squatting" : "squats" ]));
}

==================================================
FILE: furnitures/misc/crane_umbrella_stand.c
==================================================

inherit "/std/room/furniture/storage";
void setup() {
    set_name("stand");
    set_short("lacquered umbrella stand");
    add_adjective( ({ "lacquered", "umbrella" }) );
    set_long("This is a conical umbrella stand that raises in an eight-sided "
        "cylinder.  Often placed by front doors to house the clothing "
        "accessories that are most-loathed, this particular stand is "
        "especially peculiar and eye-catching.  Lacquered with several "
        "shades of beige, green, and brown enamel, its faces boast an "
        "elegant crane taking off from a marshy landscape.\n");
    set_open();
    set_stuck(1);
    set_weight(90);
    set_max_weight(55);
    set_value(40000);
    set_allowed_room_verbs( ([ "squatting" : "squats",
                               "resting" : "rests",
                               "sitting" : "sits",
                               "standing" : "stands" ]) );
}

==================================================
FILE: furnitures/misc/dragon_umbrella_stand.c
==================================================

inherit "/std/room/furniture/storage";
void setup() {
    set_name("stand");
    set_short("enamelled umbrella stand");
    add_adjective( ({ "enamelled", "umbrella" }) );
    set_long("To keep the floors clean on rainy days, this hexagonal "
        "decorative umbrella stand suits that purpose perfectly.  A "
        "tin liner sits inside its base to catch inevitable drips and to "
        "protect its wood.  Handpainted with in blacks, golds and reds with "
        "a ferocious looking dragon design, it boasts a brass handle on "
        "each side for ease of lifting.\n");
    add_read_mess("\nMade in Sum Dim.", "tiny golden lettering around the "
        "base", "agatean");
    set_open();
    set_stuck(1);
    set_weight(90);
    set_max_weight(55);
    set_value(44000);
    set_allowed_room_verbs( ([ "squatting" : "squats",
                               "resting" : "rests",
                               "sitting" : "sits",
                               "standing" : "stands" ]) );
}

==================================================
FILE: furnitures/misc/fine_fireplace.c
==================================================

inherit "/std/room/furniture/fireplace";
void setup(){
  set_allowed_positions(({"sitting"}));
  set_allowed_room_verbs((["sitting" : "sits" ]));
  set_weight(700);
  set_max_weight(100);
  set_short("finely crafted fireplace");
  set_long("This fireplace is surrounded by an ornately carved mahogany "
     "framework and has a beautifully finished brass hearth.\n");
  set_value(900000);
}

==================================================
FILE: furnitures/misc/flint.c
==================================================

inherit "/std/object";
void setup(){
  set_name("flint");
  set_short("flint stone");
  set_long("This is a flint stone.  It looks slightly worn and chipped "
    "but it's still keen enough to serve its purpose.\n");
  add_property("no recycling", 1);
  add_alias("stone");
  set_value( 600 );
}

==================================================
FILE: furnitures/misc/garden_fishbowl.c
==================================================

inherit "/std/room/furniture/basic";
void setup(){
    set_name( "fishbowl" );
    set_short( "gold-leafed garden fishbowl" );
    add_adjective( ({ "gold", "leafed", "leaf", "gold-leaf", "gold-leafed",
        "garden" }) );
    add_alias("bowl");
    add_plural( ({ "bowls", "fishbowls" }) );
    set_long("Reading a story that is visualized on an art object is a "
        "particular kind of enjoyment.  A scene from the Agatean classic, "
        "'The Dream of Red Chamber' is hand-painted on this sixteen-inch "
        "fishbowl, in which the heroine expresses forbidden love in her "
        "poetry.  In this scene one also has a glimpse of traditional "
        "Agatean house garden.  The colorful scenery is painted over "
        "multi-layered gold leaf which has been carefully applied by hand.  "
        "Resting on a beautiful hand-polished rosewood base, "
        "the shapes of several goldfish can be seen swishing back and "
        "forth beneath the water it holds.\n" );
    set_weight( 110 );
    set_value( 52000 );
    set_allowed_positions(({"sitting"}));
    set_allowed_room_verbs(([ "sitting" : "sits",
                              "standing" : "stands",
                              "leaning" : "leans",
                              "lying" : "lies",
                              "squatting" : "squats" ]));
}

==================================================
FILE: furnitures/misc/geisha_screen.c
==================================================

inherit "/std/room/furniture/basic";
void setup() {
    set_name( "screen" );
    set_short( "rice paper geisha screen" );
    add_adjective( ({ "rice", "paper", "geisha" }) );
    set_long("This is a simple screen that would fit in most traditional "
        "homes.  Quiet geishas relax on "
        "its rice paper panelling, hand-drawn on a bamboo balcony, "
        "they sit and sip tea in peace and solitude or play mandolin-like "
        "instruments which sit silently in their laps.  The frame is made "
        "of a strange combination of walnut and spruce woods, their "
        "differing colours blending well with the shades of the panels.\n");
    set_allowed_positions( ({ "standing", "sitting" }) );
    set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
    set_weight(150);
    set_value(320000);
}

==================================================
FILE: furnitures/misc/hatstand.c
==================================================

inherit "/std/room/furniture/surface";
void setup(){
  set_name("stand");
  set_short("tall hat stand");
  add_adjective( ({"tall", "hat"}) );
  add_alias( "hatstand" );
  add_plural("tall hat stands");
  set_long("This is a tall, serious looking hatstand.  It is made of "
    "dark sturdy teak wood and stands proud on four lavishly decorated "
    "legs.  The top has been carved into the grand shape of A'Tuin, "
    "upon which the elephants and the Disc have been elaborately "
    "sculpted, capturing the true beauty of the scene.  The turtle's "
    "flippers extend outwards and are where the coats and hats "
    "are hung.\n");
  set_weight(150);
  set_max_weight(200);
  set_allowed_room_verbs((["standing" : "stands",
                           "looming"  : "looms"  ]));
	set_put_aliases(({"hang"}));
  set_value(75000);
}

==================================================
FILE: furnitures/misc/huge_gong.c
==================================================

inherit "/std/room/furniture/basic";
void setup() {
    set_name("gong");
    set_short("huge brass gong");
    add_adjective( ({ "huge", "brass" }) );
    set_long("This is a huge brass gong, which hangs from an equally "
        "huge frame.  Prancing peacocks strut around each other on the "
        "surface of the disc, ruffling their tails as they "
        "stretch.  The gong can be hit to make a loud ringing "
        "sound and annoy everyone in the room.\n");
    set_weight( 100 );
    set_value( 42000 );
    set_material( "brass" );
    set_allowed_positions( ({"hanging"}) );
    set_allowed_room_verbs((["hanging" : "hangs",
                             "sitting" : "sits",
                             "dangling" : "dangles",
                             "standing" : "stands" ]));
}
void init() {
    this_player()->add_command( "hit", this_object(), "<direct:object:me>" );
}
int do_hit(){
    this_player()->add_succeeded_mess(this_object(), "$N $V $p "
        +this_object()->short()+" loudly, filling the room with a "
        "deafening crashing ring which reverberates for a few "
        "moments before finally fading away.\n", ({ }));    return 1;
}

==================================================
FILE: furnitures/misc/hunghungese_screen.c
==================================================

inherit "/std/room/furniture/basic";
void setup() {
    set_name( "screen" );
    set_short( "HungHungese screen" );
    add_adjective( ({ "hunghungese", "HungHungese", "hunghung",
        "HungHung" }) );
    set_long( "This is a contemporary double-sided screen for the home.  "
        "Framed in a light spruce, the panels of the screen have been "
        "included in the main construction of the frame and form a "
        "checkerboard pattern across its length.  Inside the "
        "checkerboard are long panels of cotton that have depictions "
        "of life in a hectic HungHung market.  There are several "
        "ducks, a few sheep, some dried fish and a lot of people "
        "that look like they are shouting at one another.\n");
    set_allowed_positions( ({ "standing", "sitting" }) );
    set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
    set_weight(150);
    set_value(325000);
}

==================================================
FILE: furnitures/misc/iron_hatstand.c
==================================================

inherit "/std/room/furniture/surface";
void setup(){
  set_name( "stand" );
  set_short( "wrought iron hat stand" );
  add_adjective( ({ "wrought", "iron", "hat" }) );
  add_alias( ({ "hatstand", "rack", "hat rack", "hatrack" }) );
  add_plural( "wrought iron hat stands" );
  set_long("This is a solid hat stand made of gracefully designed "
    "wrought iron.  It rests on four clawed feet, while the base "
    "of the stand wraps around itself in a spiral.  There are "
    "plenty of hooks at the top.\n");
  set_weight(250);
  set_max_weight(200);
  set_allowed_room_verbs(([ "standing" : "stands" ]));
	set_put_aliases( ({ "hang" }) );
  set_value(9000);
}

==================================================
FILE: furnitures/misc/landscape_screen.c
==================================================

inherit "/std/room/furniture/basic";
void setup() {
    set_name( "screen" );
    set_short( "watercolour landscape screen" );
    add_adjective( ({ "watercolour", "landscape" }) );
    set_long( "This beautiful screen has a lovely honey rosewood frame that "
        "pales in comparison to the panelling it holds.  Three rice "
        "paper panels sit in the hinged frame, each one handpainted in "
        "watercolours and depicting "
        "one third of a Agatean mountain landscape.  The frame is "
        "double-hinged so it can bend both backwards and forward to suit "
        "its placement, and the rice paper panelling has been ribbed with "
        "matchstick-like strings of wood to give it more support. \n");
    set_allowed_positions( ({ "standing", "sitting" }) );
    set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
    set_weight(150);
    set_value(400000);
}

==================================================
FILE: furnitures/misc/large_gong.c
==================================================

inherit "/std/room/furniture/basic";
void setup() {
    set_name("gong");
    set_short("large brass gong");
    add_adjective( ({ "large", "brass" }) );
    set_long("This is a large brass gong, which hangs from an equally "
        "large frame.  Tiny dragons writhe around each other on the "
        "surface of the disc, nipping each others' tails as they "
        "stretch.  The gong can be hit to make a loud ringing "
        "sound and annoy everyone in the room.\n");
    set_weight( 80 );
    set_value( 38000 );
    set_material( "brass" );
    set_allowed_positions( ({"hanging"}) );
    set_allowed_room_verbs((["hanging" : "hangs",
                             "sitting" : "sits",
                             "dangling" : "dangles",
                             "standing" : "stands" ]));
}
void init() {
    this_player()->add_command( "hit", this_object(), "<direct:object:me>" );
}
int do_hit(){
    this_player()->add_succeeded_mess(this_object(), "$N $V $p "
        +this_object()->short()+" loudly, filling the room with a "
        "loud crashing ring.\n", ({ }));    return 1;
}

==================================================
FILE: furnitures/misc/latticed_screen.c
==================================================

inherit "/std/room/furniture/basic";
void setup() {
    set_name( "screen" );
    set_short( "latticed shoji screen" );
    add_adjective( ({ "latticed", "shoji" }) );
    set_long( "This double-sided shoji screen has a latticed "
        "wood pattern made of ramin hardwood.  A lovely honey "
        "oak colour, the panelling is broken up by rice paper "
        "dividers which checker the screen from the top all "
        "the way down to the solid kick panel which runs along "
        "the bottom.\n");
    set_allowed_positions( ({ "standing", "sitting" }) );
    set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
    set_weight(20);
    set_value(400000);
}

==================================================
FILE: furnitures/misc/lava_lamp.c
==================================================

#define CREATOR "Rue"
inherit "/std/room/furniture/basic";
#define MEDITATION "/std/effects/other/meditate_effect"
void setup() {
    set_name("lamp");
    set_short("lava lamp");
    set_light(25);
    add_adjective( ({ "lava", "red" }) );
    add_alias( ({ "lamp" }) );
    set_long( "This is an odd looking lamp, roughly the shape of an "
        "hourglass, with a brass base.  It is filled with murky pink "
        "liquid and large blobs of red goo that ooze this way and that.  "
        "The exact nature of the red goo is a mystery.  Some say it is "
        "a primitive type of troll that is still in its magma stage.  "
        "Others reckon it is something that got away from the Alchemists' "
        "Guild.  It gives off a faint light.\n" );
    item_chat( ({ 120, 360, ({
        "A rather disgusting wet popping noise comes from the lava lamp.",
        "A strange sucking noise seems to be coming from the lava lamp."
    }) }) );
    set_allowed_positions(({"sitting","standing"}));
    set_allowed_room_verbs((["sitting" : "sits", "standing" : "stands" ]));
    set_weight(82);
    set_value(20500);
}
void init() {
    ::init();
    add_command( "stare", "at <direct:object'lamp'>" );
}
int do_stare() {
    call_out( (: $(this_player())->add_effect( MEDITATION ) :), 1 );
    add_succeeded_mess( "$N $V dreamily at $D and zone$s out.\n");
    return 1;
}

==================================================
FILE: furnitures/misc/lectern.c
==================================================

inherit "/std/room/furniture/surface";
void setup() {
  set_name("lectern");
  set_short("oak lectern");
  add_adjective(({"oak", "ornate"}));
  set_long("The lectern has a heavy wooden base carved with"
					 " twining leaves and a flat top perfect for a book.\n");
  set_allowed_positions(({"sitting"}));
  set_allowed_room_verbs((["sitting" : "sits", "standing" : "stands" ]));
  set_weight(350);
  set_max_weight(50);
  set_value(1400);
}

==================================================
FILE: furnitures/misc/log.c
==================================================

#define WEIGHT 25
inherit "/std/room/furniture/fuel_inherit";
void setup(){
  set_name("log");
  set_shorts( ({ "small log",
                 "slightly burnt log",
                 "blackened log",
                 "black, charred log" }) );
  set_longs( ({
    "This is a small dumpy log.  It looks as though it would burn well.\n",
    "This is a small dumpy log.  It has been charred around the edges "
      "but would still burn for a while yet.\n",
    "This is a black lump of charred wood, which is just about holding "
      "its shape together as a log.\n" }) );
  set_weight( WEIGHT );
  set_value( 400 );
}

==================================================
FILE: furnitures/misc/mado_screen.c
==================================================

inherit "/std/room/furniture/basic";
void setup() {
    set_name( "screen" );
    set_short( "mado screen" );
    add_adjective( "mado" );
    set_long( "This traditional mado screen has a double-sided "
        "latticework frame made of lacquered red cedar.  Between "
        "the two sides of the frame lies a large sheet of smooth "
        "white rice paper that looks quite delicate and "
        "fragile.  \n");
    set_allowed_positions( ({ "standing", "sitting" }) );
    set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
    set_weight(150);
    set_value(350000);
}

==================================================
FILE: furnitures/misc/mandarin_fan_screen.c
==================================================

inherit "/std/room/furniture/basic";
void setup() {
    set_name( "screen" );
    set_short( "mandarin fan screen" );
    add_adjective( ({ "mandarin", "fan", "hana" }) );
    set_long( "This beautiful screen has a lovely walnut oak frame which "
        "pales in comparison to the panelling it holds.  Three smooth silk "
        "panels, each divided into eighteen square segments, sit "
        "in the hinged frame, each one handpainted in brilliant mandarin, "
        "lilac, cream and peridot watercolours with a mandarin orange "
        "hana fan design.  The frame is double-hinged so it can bend both "
        "backwards and forward to suit its placement.\n");
    set_allowed_positions( ({ "standing", "sitting" }) );
    set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
    set_weight(150);
    set_value(395000);
}

==================================================
FILE: furnitures/misc/muslin_screen.c
==================================================

inherit "/std/room/furniture/basic";
void setup() {
    set_name( "screen" );
    set_short( "muslin screen" );
    add_adjective( "muslin" );
    set_long( "This is a simple and traditional double-hinged "
        "screen, its panels filled in with a long sheet of roughly "
        "textured cream-coloured muslin fabric.  A lightly coloured "
        "construction, the material has been gathered at the top "
        "and bottom ends to produce a eye-pleasing loosely pleated "
        "effect which continues down its length.\n");
    set_allowed_positions( ({ "standing", "sitting" }) );
    set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
    set_weight(150);
    set_value(225000);
}

==================================================
FILE: furnitures/misc/newspaper_box.c
==================================================

inherit "/std/room/furniture/storage";
#include <room/newspaper.h>
#include <move_failures.h>
#include <housing.h>
#include <player_handler.h>
void check_for_new_papers();
void set_paper( string _paper );
void set_issues_left( int _issues );
void set_international( int value );
void set_last_issue( int _issue );
mapping query_dynamic_auto_load();
varargs void init_dynamic_arg( mapping map, object thing );
int query_last_issue();
int query_international();
int query_issues_left();
string query_paper();
private string _paper = "a given newspaper";
private int _last_issue = 0;
private int _issues_left = 1;
private int _international = 0;
void setup() {
   set_name( "box" );
   set_short( "newspaper box" );
   add_adjective( "newspaper" );
   set_long( "It's a large box impregnated with an oil designed to attract "
             "delivery-imps.\n" );
   set_allowed_positions( ({ "hanging", "standing" }) );
   set_allowed_room_verbs( ([ "standing": "stands", "hanging": "hangs" ]) );
   add_extra_look( this_object() );
   set_weight( 100 );
   set_max_weight( 300 );
   set_value( 10000 );
   set_open();
   set_stuck( 1 );
   call_out( "check_for_new_papers", 5 );
}
string extra_look() {
   if( !_paper || _paper == "a given newspaper" ) {
      return "The variables of this newspaper box are broken.  Please ask a "
             "creator to re-set them.\n";
   };
   return "This particular one works for " + _paper + ".\n";
}
void check_for_new_papers() {
   object newspaper;
   object room = environment( this_object() );
   int i, x, latest_issue;
   int* editions_bought;
   string name;
   if( !is_placed() && _issues_left > 0 ) {
      call_out( "check_for_new_papers", 3600 );
      return;
   };
   if( ( _international == 0 &&
         member_array( _paper, NEWSPAPER_HANDLER->query_papers_in_area(
           HOUSING->query_region( file_name( room ) ) ) ) != -1 ) ||
       ( _international == 1 &&
         member_array( _paper, NEWSPAPER_HANDLER->query_all_papers() ) != -1 ) ){
      latest_issue = NEWSPAPER_HANDLER->query_last_edition_num( _paper );
      name = environment( this_object() )->query_owner();
      if( latest_issue > _last_issue ) {
         tell_room( room,
                    "A " + ({"red", "green", "purple", "blue", "yellow",
                             "drunk", "smelly", "large", "tiny"})[random(9)] +
                    " imp rushes in with some newpapers in its hands and "
                      "disappears in the box.\n" );
         x = latest_issue - _last_issue;
         for( i = 0; i < x; i++ ) {
            newspaper = clone_object( NEWSPAPER_OB );
            newspaper->set_paper( _paper );
            newspaper->set_edition( _last_issue + 1 );
            if( !newspaper->move( this_object() ) == MOVE_OK ) {
               tell_room( room,
                          "Something in the box curses and a newspaper is "
                          "thrown to the floor from inside it.\n" );
               newspaper->move( room );
            };
            _last_issue++;
            _issues_left--;
            editions_bought = PLAYER_HANDLER->test_property( name, "Paper " +
                                                              _paper );
            if( !editions_bought ) {
               editions_bought = ({ });
            };
            if( member_array( _last_issue + 1, editions_bought ) == -1 ) {
               editions_bought += ({ _last_issue });
               PLAYER_HANDLER->special_add_property( name,
                 "Paper " + _paper, editions_bought );
               NEWSPAPER_HANDLER->add_edition_paper_sold( _paper,
                  _last_issue + 1,
                  NEWSPAPER_HANDLER->query_paper_cost( _paper ) );
            } else {
               NEWSPAPER_HANDLER->add_edition_revenue( _paper, _last_issue + 1,
                  NEWSPAPER_HANDLER->query_paper_cost( _paper ) );
            };
            tell_room( room,
                       "You hear some " + ({"giggling", "ranting", "quacking",
                                            "thumping", "cursing", "swearing",
                                            "snickering"})[random(7)] +
                       " emerging, the imp jumps out and runs off again.\n" );
         };
      };
   };
   if( _issues_left == 0 ) {
      set_long( query_long() +
                "It appears the imp-bait is no longer working.\n" );
   } else {
      call_out( "check_for_new_papers", 3600 );
   };
}
void set_paper( string new_paper ) {
   _paper = new_paper;
}
void set_issues_left( int _issues ) {
   _issues_left = _issues;
}
void set_last_issue( int _issue ) {
   _last_issue = _issue;
}
mapping query_dynamic_auto_load() {
   return ([
            "::": ::query_dynamic_auto_load(),
            "_paper": _paper,
            "_issues_left": _issues_left,
            "_last_issue": _last_issue,
            "_international": _international
        ]);
}
varargs void init_dynamic_arg( mapping map, object thing ) {
   if( map[ "::" ] && thing ) {
      ::init_dynamic_arg( map[ "::" ], thing );
   } else if( map[ "::" ] ) {
      ::init_dynamic_arg( map[ "::" ] );
   };
   if( map[ "_paper" ] ) {
      set_paper( map[ "_paper" ] );
   };
   if( map[ "_issues_left" ] ) {
      set_issues_left( map[ "_issues_left" ] );
   };
      if( map[ "_last_issue" ] ) {
      set_last_issue( map[ "_last_issue" ] );
   };
      if( map[ "_international" ] ) {
      set_international( map[ "_international" ] );
   };
}
int query_last_issue() {
   return _last_issue;
}
int query_issues_left() {
   return _issues_left;
}
int query_international() {
   return _international;
}
string query_paper() {
   return _paper;
}
void set_international( int i ) {
   _international = i;
}

==================================================
FILE: furnitures/misc/peony_fishbowl.c
==================================================

inherit "/std/room/furniture/basic";
void setup() {
    set_name( "fishbowl" );
    set_short( "gold-leafed peony fishbowl" );
    add_adjective( ({ "gold", "leafed", "leaf", "gold-leaf", "gold-leafed",
        "peony" }) );
    add_plural( ({ "bowls", "fishbowls" }) );
    add_alias("bowl");
    set_long( "Richly designed with blooming peonies, the flower that "
        "symbolizes peace and prosperity in Agatean culture, this grand "
        "16-inch fishbowl is carefully hand-layered with gold leaf over "
        "porcelain and hand-painted in exuberant colors.  This fishbowl "
        "matches any kind of foliage or simply stands alone as an art "
        "object.  Resting on a beautiful hand-polished rosewood base, "
        "the shapes of several goldfish can be seen swishing back and "
        "forth beneath the water it holds.\n" );
  set_weight( 110 );
  set_value( 51000 );
  set_allowed_positions(({"sitting"}));
  set_allowed_room_verbs((["sitting" : "sits",
                           "standing" : "stands",
                           "leaning" : "leans",
                           "lying" : "lies",
                           "squatting" : "squats" ]));
}

==================================================
FILE: furnitures/misc/platinum_gong.c
==================================================

inherit "/std/room/furniture/basic";
void setup() {
    set_name("gong");
    set_short("platinum gong");
    add_adjective( "platinum" );
    set_long("This is a smallish platinum gong, hanging from a platinum "
        "frame.  Leaping lions writhe around each other on the "
        "surface of the disc, showing their teeth as they "
        "run across the etchings.  The gong can be hit to make a "
        "loud ringing sound and annoy everyone in the room.\n");
    set_weight( 30 );
    set_value( 28000 );
    set_material( "platinum" );
    set_allowed_positions( ({"hanging"}) );
    set_allowed_room_verbs((["hanging" : "hangs",
                             "sitting" : "sits",
                             "dangling" : "dangles",
                             "standing" : "stands" ]));
}
void init() {
    this_player()->add_command( "hit", this_object(), "<direct:object:me>" );
}
int do_hit(){
    this_player()->add_succeeded_mess(this_object(), "$N $V $p "
        +this_object()->short()+" loudly, filling the room with a "
        "deafening ringing sound.\n", ({ }));
    return 1;
}

==================================================
FILE: furnitures/misc/samurai_screen.c
==================================================

inherit "/std/room/furniture/basic";
void setup() {
    set_name( "screen" );
    set_short( "rice paper samurai screen" );
    add_adjective( ({ "rice", "paper", "samurai" }) );
    set_long("This is a simple screen that would fit in most traditional "
        "homes.  A stoic samurai in full traditional Agatean armour and "
        "dress storms across the panelling, hand-drawn in shades of orange, "
        "blue, brown, cream and black.  The frame is made "
        "of a strange combination of walnut and spruce woods, their "
        "differing colours blending well with the shades of the panels.\n");
    set_allowed_positions( ({ "standing", "sitting" }) );
    set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
    set_weight(150);
    set_value(329000);
}

==================================================
FILE: furnitures/misc/satsuma_fishbowl.c
==================================================

inherit "/std/room/furniture/basic";
void setup() {
    set_name( "fishbowl" );
    set_short( "satsuma fishbowl" );
    add_adjective( ({ "satsuma" }) );
    add_alias("bowl");
    add_plural( ({ "bowls", "fishbowls" }) );
    set_long("Learning is regarded the highest virtue in Agatean "
        "culture.  The picture on this "
        "fishbowl depicts a group of scholars in a session of discussion.  "
        "This fishbowl is made of porcelain and hand-painted with dark-green "
        "lacquer.  On top of the lacquer gold threads are woven in "
        "decorative design.  One intriguing detail about this particular  "
        "fishbowl is that thousands of tiny dots are meticulously painted "
        "one by one over the entire 16-inch fishbowl.  The interior is an "
        "underwater scene of gold fish swimming in circular along the edge "
        "of the bowl.  Resting on a beautiful hand-polished mahogany base, "
        "the shapes of several goldfish can be seen swishing back and "
        "forth beneath the water it holds.\n" );
    set_weight( 110 );
    set_value( 56000 );
    set_allowed_positions(({"sitting"}));
    set_allowed_room_verbs(([ "sitting" : "sits",
                              "standing" : "stands",
                              "leaning" : "leans",
                              "lying" : "lies",
                              "squatting" : "squats" ]));
}

==================================================
FILE: furnitures/misc/silver_gong.c
==================================================

inherit "/std/room/furniture/basic";
void setup() {
    set_name("gong");
    set_short("silver gong");
    add_adjective( "silver" );
    set_long("This is a smallish silver gong, hanging from a silver "
        "frame.  Tiny goldfish swim around each other on the "
        "surface of the disc, nipping each others' tails as they "
        "go.  The gong can be hit to make a loud ringing "
        "sound and annoy everyone in the room.\n");
    set_weight( 40 );
    set_value( 22000 );
    set_material( "silver" );
    set_allowed_positions( ({"hanging"}) );
    set_allowed_room_verbs((["hanging" : "hangs",
                             "sitting" : "sits",
                             "dangling" : "dangles",
                             "standing" : "stands" ]));
}
void init() {
    this_player()->add_command( "hit", this_object(), "<direct:object:me>" );
}
int do_hit(){
    this_player()->add_succeeded_mess(this_object(), "$N $V $p "
        +this_object()->short()+" loudly, filling the room with a "
        "deafening ringing sound.\n", ({ }));
    return 1;
}

==================================================
FILE: furnitures/misc/small_stove.c
==================================================

inherit "/std/room/furniture/surface";
void setup() {
  set_name("stove");
  set_short("small stove");
  add_adjective("small");
  set_long("This is a small stove.\n");
  set_allowed_room_verbs(([
    "sitting" : "sits",
    "squatting" : "squats",
  ]));
  set_weight(495);
  set_max_weight(45);
  set_value(8000);
}

==================================================
FILE: furnitures/misc/spruce_screen.c
==================================================

inherit "/std/room/furniture/basic";
void setup() {
    set_name( "screen" );
    set_short( "double cross spruce screen" );
    add_adjective( ({ "double", "cross", "spruce" }) );
    set_long( "This double-sided screen has been constructed by "
        "lashing pairs of long spruce strips together so that "
        "three distinct interconnected panels are hinged "
        "together when it is standing.  The frame, decorated with "
        "criss-crossed pairs of spruce poles, is covered by a "
        "thin layer of rice paper that breaks up light and "
        "sheds a warm glow on a room when a lamp is placed behind it.\n");
    set_allowed_positions( ({ "standing", "sitting" }) );
    set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
    set_weight(150);
    set_value(400000);
}

==================================================
FILE: furnitures/misc/sung_umbrella_stand.c
==================================================

inherit "/std/room/furniture/storage";
void setup() {
    set_name("stand");
    set_short("Sung umbrella stand");
    add_adjective( ({ "Sung", "umbrella" }) );
    set_long("This is a conical umbrella stand that raises itself up in an "
        "smooth-sided cylinder.  Often placed by front doors to house the "
        "clothing accessories that are most-loathed, this particular "
        "stand has been lacquered with several shades of gold, red, blue, "
        "green and cream and depicts the Sung Estate as it is seen from the "
        "banks of the Pearl River in the Sum Bing district of Bes Pelargic.  "
        "Several white ceramic lions border the estate, guarding it and "
        "bestowing several thousand years of good luck upon its "
        "inhabitants.\n");
    set_open();
    set_stuck(1);
    set_weight(90);
    set_max_weight(55);
    set_value(51000);
    set_allowed_room_verbs( ([ "squatting" : "squats",
                               "resting" : "rests",
                               "sitting" : "sits",
                               "standing" : "stands" ]) );
}

==================================================
FILE: furnitures/misc/textured_leaf_screen.c
==================================================

inherit "/std/room/furniture/basic";
void setup() {
    set_name( "screen" );
    set_short( "textured leaf screen" );
    add_adjective( ({ "textured", "leaf" }) );
    set_long( "This beautiful screen has a lovely honey oak frame which "
        "pales in comparison to the panelling it holds.  Three textured rice "
        "paper panels, each divided into six vertical segments, sit "
        "in the hinged frame, each one handpainted in "
        "watercolours with a tan leaf design.  The frame is "
        "double-hinged so it can bend both backwards and forward to suit "
        "its placement, and the rice paper panelling has been ribbed with "
        "matchstick-like strings of wood to give it more support. \n");
    set_allowed_positions( ({ "standing", "sitting" }) );
    set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
    set_weight(150);
    set_value(290000);
}

==================================================
FILE: furnitures/misc/tiny_gong.c
==================================================

inherit "/std/room/furniture/basic";
void setup() {
    set_name("gong");
    set_short("tiny brass gong");
    add_adjective( ({ "tiny", "brass" }) );
    set_long("This is a tiny brass gong, which hangs from an equally "
        "tiny frame.  Fluttering butterflies flit around each other on the "
        "disc, flying aimlessly across its smooth "
        "surface.  The gong can be hit to make a loud ringing "
        "sound and annoy everyone in the room.\n");
    set_weight( 20 );
    set_value( 15000 );
    set_material( "brass" );
    set_allowed_positions( ({"hanging"}) );
    set_allowed_room_verbs((["hanging" : "hangs",
                             "sitting" : "sits",
                             "dangling" : "dangles",
                             "standing" : "stands" ]));
}
void init() {
    this_player()->add_command( "hit", this_object(), "<direct:object:me>" );
}
int do_hit(){
    this_player()->add_succeeded_mess(this_object(), "$N $V $p "
        +this_object()->short()+" loudly, filling the room with a"
        " tiny tinkling chime.\n", ({ }));
    return 1;
}

==================================================
FILE: furnitures/misc/waterbuffalo_dung.c
==================================================

inherit "/std/room/furniture/fuel_inherit";
void setup() {
  set_name("dung");
  set_shorts( ({ "small lump of dried waterbuffalo dung",
                 "slightly burnt lump of waterbuffalo dung",
                 "blackened lump of waterbuffalo dung",
                 "black, charred lump of dung" }) );
  set_longs( ({
    "This is a small lump of dried waterbuffalo dung.  It looks as "
        "though it would burn well.\n",
    "This is a small lump of dried waterbuffalo dung.  It has been "
        "charred around the edges but would still burn for a while yet.\n",
    "This is a black lump of charred dung, which is barely able to still "
        "hold itself together.\n" }) );
  set_weight( 9 );
  set_value( 200 );
}

==================================================
FILE: furnitures/lamps/teahouse_stone_lamp.c
==================================================

inherit "/std/room/furniture/basic";
#define BRIGHTNESS      60
#define FUEL_PER_TICK  FUEL_TIME
int     fuel_left;
int     is_lit;
int     has_tealight;
mapping vars = (["is lit": 0, "fuel left": 20, "has tealight" : 1 ]);
void    dest_me();
int     do_dowse();
int     do_extinguish();
int     do_light();
void    init();
void    init_arg( mixed arg );
void    out_of_fuel();
string  pretty_plural(string str);
mixed   query_auto_load();
void    setup();
string  short( int i );
int     do_replace();
void setup() {
    fuel_left = 3600;
    is_lit    = 0;
    has_tealight = 0;
    set_name("lamp");
    set_short("stone teahouse lamp");
    set_weight( 40 );
    set_value( 50000 );
    add_adjective( ({ "stone", "teahouse" }) );
    add_alias( ({ "teahouse lamp", "stone lamp" }) );
    set_long( function() {
    string str;
    str = "Shaped like an Agatean teahouse, this lantern creates "
        "a peaceful ambiance of Auriental tradition in your home as "
        "it casts a beautiful soft glow through its calligraphed rice "
        "paper windows.  Exquisitely handcrafted in the shape of an "
        "Agatean teahouse, the front door of the lantern swings open "
        "to reveal the tealight inside.  ";
        if(has_tealight && is_lit) {
            fuel_left = find_call_out("out_of_fuel");
            return str + "The tealight is burning with a steady yellow "
                "light.";
        }
        if(has_tealight) {
            return str + "An unlit tealight is sitting in the base.";
        }
        if(!fuel_left) {
            return str + "The tealight has burned itself out.";
        }
        else {
            return str + "There is no tealight in the lamp.";
        }
    } );
    set_allowed_positions(({"sitting","standing"}));
    set_allowed_room_verbs((["sitting" : "sits", "standing" : "stands" ]));
    set_weight(9);
    set_value(20500);
    init_dynamic_arg( query_dynamic_auto_load() );
}
void init() {
    add_command("replace", "tealight in <direct:object:me>");
    this_player()->add_command("light", this_object());
    this_player()->add_command("extinguish", this_object());
}
void dest_me() {
    set_light( 0 );
    ::dest_me();
}
int do_extinguish() {
    if ( !has_tealight ) {
        this_player()->add_failed_mess( this_object(), "There is no "
            "tealight in $D\n", ({ }) );
        return 0;
    }
    if ( !is_lit ) {
        this_player()->add_failed_mess( this_object(), "$D is not "
        "lit.\n", ({ }));
        return 0;
    }
    this_player()->add_succeeded_mess( this_object(), "$N $V the "
        "remnants of the tealight in the $De.\n");
    fuel_left = remove_call_out( "out_of_fuel" );
    is_lit = 0;
    has_tealight = 1;
    set_light( 0 );
    return 1;
}
int do_light() {
    if ( is_lit ) {
        this_player()->add_failed_mess( this_object(), "$D is already "
            "lit.\n", ({ }) );
        return 0;
    }
    if( !has_tealight && fuel_left <= 0 ) {
        return this_player()->add_failed_mess( this_object(), "The "
            "tealight has burned itself out and needs to be replaced.\n",
            ({ }) );
        return 0;
    }
    if( !has_tealight ) {
        this_player()->add_failed_mess( this_object(), "There is no tealight "
            "in $D.\n", ({ }) );
        return 0;
    }
    call_out( "out_of_fuel" , fuel_left );
    is_lit = 1;
    has_tealight = 1;
    set_light( BRIGHTNESS );
    return 1;
}
int do_replace() {
    int i;
    object *things;
    things = all_inventory( this_player() );
    for( i = 0; i < sizeof( things ); i++ ){
        if( !has_tealight && things[ i ]->query_name() == "tealight" ) {
            fuel_left = 3600;
            is_lit = 0;
            has_tealight = 1;
            destruct( things[ i ] );
            this_player()->add_succeeded_mess( this_object(), "$N $V the "
                "tealight in the $D.\n", ({ }) );
            return 1;
        }
        if( has_tealight && things [ i ]->query_name() == "tealight" ) {
            return this_player()->add_failed_mess( this_object(), "There is "
                "already a tealight in $D.\n", ({ }) );
            return 1;
        }
    }
    return notify_fail( "You do not have a tealight to put in the lamp.\n" );
}
mapping query_dynamic_auto_load() {
    return ([ "::" : ::query_dynamic_auto_load(),
            "fuel left" : fuel_left,
            "is lit" : is_lit,
            "has tealight" : has_tealight
        ]);
}
void init_dynamic_arg(mapping arg) {
    if (arg["::"]) ::init_dynamic_arg(arg["::"]);
    if (arg["fuel left"]) {
        fuel_left = arg["fuel left"];
    }
    else {
        fuel_left = 0;
    }
    if (arg["is lit"]) {
        call_out("out_of_fuel", fuel_left);
        is_lit = 1;
        set_light(BRIGHTNESS);
    }
    if (arg["has tealight"]) {
        has_tealight = 1;
        set_light(0);
    }
    else {
        has_tealight = 0;
        is_lit = 0;
    }
}
void out_of_fuel() {
    object env;
    env = environment(this_object());
    is_lit = 0;
    has_tealight = 0;
    fuel_left = 0;
    set_light( 45 );
    tell_room(env, "The tealight in the lamp burns out.\n" );
}
string pretty_plural(object str) {
    if ( is_lit )
        return ::pretty_plural( str) + " (lit)";
    return ::pretty_plural( str);
}
string short( int i ) {
    if ( is_lit )
        return ::short( 0 ) + " (lit)";
    return ::short( 0 );
}

==================================================
FILE: furnitures/clocks/owl_clock.c
==================================================

inherit "/std/room/furniture/clock";
void setup() {
  set_name("clock");
  set_short("owl clock");
  add_adjective("owl");
  set_long("This is a wooden clock carved roughly into the shape of an owl.  "
    "The tail twitches back and forth, somewhat like a pendulum, and the owl's "
    "eyes roll cheerfully left and right with each tick of the clock.  A small "
    "set of tiles, strung on a metal rod and affixed to the owl's feet, tells "
    "the date.\n"+
    "According to the clock it is ");
  set_allowed_positions(({}));
  set_allowed_room_verbs((["hanging" : "hangs" ]));
  set_weight(50);
  set_value(42000);
  add_property("no recycling", 1);
  set_chimes(2, "The owl clock opens its beak and hoots twice.\n");
  set_chimes(1, "The owl clock opens its beak and hoots once.\n");
  set_show_date();
}
void chime(string mess) {
  int *co_ords;
  if(environment(this_object())) {
    co_ords = (int *)environment(this_object())->query_co_ord();
    "/obj/handlers/broadcaster"->broadcast_event(users(), co_ords,
                                                 mess, 20, 1, 0 );
    tell_room(environment(this_object()), mess);
  }
}

==================================================
FILE: furnitures/bathroom/bath.c
==================================================

inherit "/std/room/furniture/bath";
void setup() {
  set_name("bathtub");
  set_short("cast iron bathtub");
  add_adjective(({"cast", "iron"}));
  add_alias( ({ "tub", "bath" }) );
  set_long("The white porcelain sparkles on this cast iron bathtub, it looks "
           "heavy but large enough for a couple of people to have a nice "
           "bath in.\n");
  set_allowed_positions( ({"sitting", "standing", "lying" }) );
  set_allowed_room_verbs((["sitting" : "sits", "standing" : "stands" ]));
  set_weight(350);
  set_value(14000);
}

==================================================
FILE: furnitures/sofas/red_futon.c
==================================================

inherit "/std/room/furniture/basic";
int folded;
int do_unfold(object ob);
int do_fold(object ob);
void setup() {
    folded = 0;
    set_name( "futon" );
    set_short( "traditional red futon" );
    add_adjective( ({ "traditional", "red" } ));
    add_alias( "couch" );
    add_alias( "sofa" );
    set_long( "This red mattressed futon is made of a pad of tufted "
        "cotton batting covered with red cotton cloth, set in a "
        "lacquered oaken frame.  The frame allows the futon to rest "
        "comfortably a few inches above the ground, its hard mattress "
        "a must for those craving a little punishment combined with "
        "a good night's sleep.  It looks comfortable and is the perfect "
        "thing to have if you are into the whole minimalistic trend "
        "for your home.\n");
    set_allowed_positions(({"sitting", "lying", "kneeling", "meditating"}));
    set_allowed_room_verbs((["sitting" : "sits" ]));
    set_weight(150);
    set_value(650000);
    add_extra_look( this_object() );
}
void init() {
    add_command("unfold", "<indirect:object'futon'>" );
    add_command("fold", "<indirect:object'futon'>" );
    ::init();
}
int do_unfold(object ob) {
    if(folded ) {
        add_failed_mess("$D is already folded.\n", ({ }) );
        return 0;
    }
    add_succeeded_mess("$N $V $D back into a sofa.\n", ({ }) );
    folded = 1;
    return 1;
}
int do_fold(object ob) {
    if(!folded) {
        add_failed_mess("$D is already folded.\n", ({ }) );
	    return 0;
    }
    add_succeeded_mess("$N $V $D out into a bed.\n", ({ }) );
    folded = 0;
    return 1;
}
string extra_look() {
    if(!folded) {
        return "The futon has been folded out into a bed.\n";
    }
    return "The futon is folded into a sofa.\n";
}

==================================================
FILE: furnitures/beds/foot_bed.c
==================================================

#include <forn.h>
inherit "/std/room/furniture/basic";
void setup(){
  set_name("bed");
  set_short ("duck-footed bed");
  add_alias ("duck-footed");
  set_long(
    "A fairly solid timber bed, with intricate scrollwork around the "
    "headboard.  It is supported by four duck's feet, presumably made from "
    "painted wood.  The dark wood that form its sides is inset with short "
    "strips made from a lighter wood, creating an interestingly random "
    "pattern.\n");
  set_weight( 800 );
  set_value( 100000 );
  set_allowed_positions(({"sitting", "meditating", "lying", "standing",
                          "kneeling", "crouching"}));
  set_allowed_room_verbs((["sitting" : "sits" ]));
}

==================================================
FILE: furnitures/stoves/large_wood_stove.c
==================================================

inherit "/std/room/furniture/fireplace";
void setup() {
    set_name("oven");
    set_short("large wood oven");
    add_adjective( ({ "large", "wood" }) );
    set_long("A tastefully decorated door bears the name 'Wun Chi Puffin' "
        "and a temperature gauge monitors the large wood oven.  "
        "Resting on a smooth base, this range has a thirty-two inch cook "
        "surface and carries six burners and a water reservoir.  A top "
        "mounted nickel trimmed shelf on the back of the stove is "
        "complemented by dual warming shelves.  Subtle and sophisticated, "
        "this stovetop would compliment most tasteful homes.\n");
    set_allowed_room_verbs(([
                            "sitting" : "sits",
                            "squatting" : "squats",
                            "crouching" : "crouches",
                            "resting" : "rests",
                            "lying" : "lies"
                          ]));
    set_weight(495);
    set_max_weight(100);
    set_value(120000);
}

==================================================
FILE: furnitures/wardrobes/golden_ebony_wardrobe.c
==================================================

inherit "/std/room/furniture/storage";
void setup() {
    set_name("wardrobe");
    set_short("golden ebony wood wardrobe");
    add_adjective(({"golden", "ebony", "wood"}));
    set_long("Tall and imposing this wardrobe looms towards the ceiling.  "
        "The crafter obviously gave a great deal of thought to its "
        "construction in selecting different woods to present constrasts "
        "and blends.  The darkest of ebony seems to swallow the light "
        "highlighting minature scrollwork picked out in gold across its "
        "surface, giving way to dusky madrona the spirals and knots give "
        "the impression of smoke curling slowly around the borders of "
        "the doors and around the brass handles.\n");
    set_weight(900);
    set_max_weight(500);
    set_value(740000);
    set_allowed_room_verbs((["squatting" : "squats" ]));
    set_pick_skill("covert.lockpick.doors");
    set_difficulty(4);
}
void init() {
    string key_id;
    object key;
    if(!query_key()) {
        key_id = "furniture_lock_"+random(1000);
        set_key(key_id);
        key = clone_object("/std/key");
        key->set_key("small iron", key_id);
        key->set_long("This small, yet sturdy, key looks like it is for a "
                  "piece of furniture.\n");
        key->move(this_object());
        set_closed();
    }
    ::init();
}

==================================================
FILE: weapons/knives/.black_handled_ceremonial_bronze_knife.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/black_handled_ceremonial_bronze_knife.wep#1" );
  call_other( clone, "set_name", "knife"  );
  call_other( clone, "set_short", "black handled ceremonial bronze knife"  );
  call_other( clone, "add_adjective", ({ "black", "handled", "ceremonial", "bronze" })  );
  call_other( clone, "set_main_plural", "black handled ceremonial bronze knives"  );
  call_other( clone, "add_plural", "knives"  );
  call_other( clone, "set_long", "This is a ceremonial knife, for use in magic rituals.  Its ornate handle is made of ebony and its long bronze blade has been carved with mystic runes.\n"  );
  call_other( clone, "set_weight", 11  );
  call_other( clone, "set_length", 13  );
  call_other( clone, "set_width", 4  );
  call_other( clone, "set_material", "copper"  );
  call_other( clone, "set_value", 1000  );
  call_other( clone, "new_weapon", 2000  );
  call_other( clone, "add_attack", "slash", 70, ({ 10, 2, 20 }), "sharp", "sharp", 0  );
  call_other( clone, "add_attack", "stab", 40, ({ 20, 2, 60 }), "pierce", "pierce", 0 );
   return clone;
}

==================================================
FILE: weapons/knives/.carving_knife.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/carving_knife.wep#1" );
  call_other( clone, "set_name", "knife"  );
  call_other( clone, "set_short", "carving knife"  );
  call_other( clone, "add_adjective", ({ "carving" })  );
  call_other( clone, "add_alias", "utensil"  );
  call_other( clone, "add_plural", "utensils"  );
  call_other( clone, "set_long", "This is a knife such as you might use to carve up your Octeday roast, and then use to substantiate your arguments with your spouse as to who should do the washing up.\n"  );
  call_other( clone, "set_weight", 9  );
  call_other( clone, "set_length", 12  );
  call_other( clone, "set_width", 2  );
  call_other( clone, "set_material", "steel"  );
  call_other( clone, "set_value", 500  );
  call_other( clone, "new_weapon", 2000  );
  call_other( clone, "add_attack", "slash", 70, ({ 10, 2, 20 }), "sharp", "sharp", 0  );
  call_other( clone, "add_attack", "stab", 40, ({ 20, 2, 60 }), "pierce", "pierce", 0 );
   return clone;
}

==================================================
FILE: weapons/knives/.chisel.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/chisel.wep#1" );
  call_other( clone, "set_name", "chisel"  );
  call_other( clone, "set_short", "chisel"  );
  call_other( clone, "set_long", "This is a tool with a sharp edge which is used to shape and cut metal, wood, or stone.\n"  );
  call_other( clone, "set_weight", 11  );
  call_other( clone, "set_length", 6  );
  call_other( clone, "set_width", 3  );
  call_other( clone, "set_material",  "steel"  );
  call_other( clone, "set_value", 300  );
  call_other( clone, "new_weapon", 19200  );
  call_other( clone, "set_damage_chance", 5  );
  call_other( clone, "add_attack", "slash", 30, ({ 10, 3, 10 }), "sharp", "sharp", 0  );
  call_other( clone, "add_attack", "stab", 30, ({ 10, 3, 10 }), "pierce", "pierce", 0 );
   return clone;
}

==================================================
FILE: weapons/knives/.copper_fighting_knife.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/copper_fighting_knife.wep#1" );
  call_other( clone, "set_name", "knife"  );
  call_other( clone, "set_short", "copper fighting knife"  );
  call_other( clone, "set_main_plural", "copper fighting knives"  );
  call_other( clone, "add_adjective", ({ "copper", "fighting" })  );
  call_other( clone, "set_long", "This Djelian copper knife is designed for fighting.  Its straight blade and hilt are undecorated, clean and functional.\n"  );
  call_other( clone, "set_weight", 9  );
  call_other( clone, "set_length", 10  );
  call_other( clone, "set_width", 2  );
  call_other( clone, "set_material", "copper"  );
  call_other( clone, "set_value", 180  );
  call_other( clone, "new_weapon", 32000  );
  call_other( clone, "add_attack", "slash", 100, ({ 10, 5, 15 }), "sharp", "sharp"  );
  call_other( clone, "add_attack", "stab", 50, ({ 10, 2, 20 }), "pierce", "pierce" );
   return clone;
}

==================================================
FILE: weapons/knives/.dagger.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/dagger.wep#1" );
  call_other( clone, "set_name", "dagger"  );
  call_other( clone, "set_short", "dagger"  );
  call_other( clone, "add_adjective", ({ })  );
  call_other( clone, "add_alias", ({ })  );
  call_other( clone, "add_plural", ({ "daggers" })  );
  call_other( clone, "set_long",  "This is a largish looking knife.\n"  );
  call_other( clone, "set_material", "steel"  );
  call_other( clone, "set_weight", 10  );
  call_other( clone, "set_length", 11  );
  call_other( clone, "set_width", 2  );
  call_other( clone, "set_value",  200  );
  call_other( clone, "new_weapon", 12800  );
  call_other( clone, "set_damage_chance", 5  );
  call_other( clone, "add_attack", "slash", 75, ({ 10, 5, 15 }), "sharp", "sharp"  );
  call_other( clone, "add_attack", "stab", 50, ({ 10, 2, 25 }), "pierce", "pierce" );
   return clone;
}

==================================================
FILE: weapons/knives/.howondalandish_throwing_knife.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/howondalandish_throwing_knife.wep#1" );
  call_other( clone, "set_name", "knife"  );
  call_other( clone, "add_adjective", ({ "howondalandish", "throwing" })  );
  call_other( clone, "set_short", "howondalandish throwing knife"  );
  call_other( clone, "set_main_plural", "howondalandish throwing knives"  );
  call_other( clone, "set_long", "From one of the more remote Howondalandish tribes, this knife "   "doesn't look throwable, much less a knife.  From a short handle, "   "spiky steel blades jut out at all angles, sure to deliver a nasty "   "shock to whoever gets hit with it.\n"  );
  call_other( clone, "set_weight", 9  );
  call_other( clone, "set_length", 9  );
  call_other( clone, "set_width", 3  );
  call_other( clone, "set_material", "steel"  );
  call_other( clone, "new_weapon", 200  );
  call_other( clone, "set_damage_chance", 10  );
  call_other( clone, "add_attack", "stab", 60, ({ 40, 3, 30 }), "pierce", "pierce", 0  );
  call_other( clone, "add_attack", "slash", 60, ({ 25, 5, 30 }), "sharp", "sharp", 0  );
  call_other( clone, "set_value", 7000 );
   return clone;
}

==================================================
FILE: weapons/knives/.klatchian_steel_dirk.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/klatchian_steel_dirk.wep#1" );
  call_other( clone, "set_name", "dirk"  );
  call_other( clone, "set_short", "Klatchian steel dirk"  );
  call_other( clone, "add_adjective", ({ "klatchian", "steel" })  );
  call_other( clone, "add_alias", "dagger"  );
  call_other( clone, "add_plural", "daggers"  );
  call_other( clone, "set_long", "This is a very long, curving knife with a wickedly sharp point.  It is made of Klatchian steel.\n"  );
  call_other( clone, "set_weight", 12  );
  call_other( clone, "set_length", 18  );
  call_other( clone, "set_width", 3  );
  call_other( clone, "set_material", "steel"  );
  call_other( clone, "set_value", 400  );
  call_other( clone, "new_weapon", 32000  );
  call_other( clone, "set_damage_chance", 5  );
  call_other( clone, "add_attack", "slash", 75, ({ 10, 5, 20 }), "sharp", "sharp"  );
  call_other( clone, "add_attack", "stab", 50, ({ 10, 2, 27 }), "pierce", "pierce" );
   return clone;
}

==================================================
FILE: weapons/knives/.knife.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/knife.wep#1" );
  call_other( clone, "set_name", "knife"  );
  call_other( clone, "set_short", "knife"  );
  call_other( clone, "add_adjective", ({ "medium-sized", "medium" })  );
  call_other( clone, "set_main_plural", "knives"  );
  call_other( clone, "set_long", "This is a medium-sized knife, the sort of thing someone might keep in a boot to ward off a would-be attacker.  You just have to hope that it's not then used to prepare your dinner.\n"  );
  call_other( clone, "set_weight", 8  );
  call_other( clone, "set_length", 7  );
  call_other( clone, "set_width", 2  );
  call_other( clone, "set_material",  "steel"  );
  call_other( clone, "set_value", 100  );
  call_other( clone, "new_weapon", 9000  );
  call_other( clone, "add_attack",  "slash", 70, ({ 10, 3, 20 }), "sharp", "sharp", 0  );
  call_other( clone, "add_attack",  "stab", 40, ({ 15, 3, 30 }), "pierce", "pierce", 0 );
   return clone;
}

==================================================
FILE: weapons/knives/.letter_opener.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/letter_opener.wep#1" );
  call_other( clone, "set_name", "opener"  );
  call_other( clone, "set_short", "pearl-handled letter opener"  );
  call_other( clone, "add_adjective", ({ "pearl-handled", "pearl", "handled", "letter" })  );
  call_other( clone, "set_main_plural", "pearl-handled letter openers"  );
  call_other( clone, "set_long", "This letter opener has a lovely pearl handle.  It has a pointy blade that could come in handy in a crunch.\n"  );
  call_other( clone, "set_weight", 4  );
  call_other( clone, "set_length", 8  );
  call_other( clone, "set_width", 1  );
  call_other( clone, "set_material", "steel"  );
  call_other( clone, "set_value", 5000  );
  call_other( clone, "new_weapon", 1600  );
  call_other( clone, "set_damage_chance", 8  );
  call_other( clone, "add_attack", "stab", 40, ({ 30, 3, 10 }), "pierce", "pierce", 0 );
   return clone;
}

==================================================
FILE: weapons/knives/.meat_cleaver.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/meat_cleaver.wep#1" );
  call_other( clone, "set_name", "cleaver"  );
  call_other( clone, "set_short", "meat cleaver"  );
  call_other( clone, "add_alias", ({ "utensil", "knife" })  );
  call_other( clone, "add_adjective", "meat"  );
  call_other( clone, "set_main_plural", "meat cleavers"  );
  call_other( clone, "add_plural", ({ "utensils", "knives" })  );
  call_other( clone, "set_long", "This is a butcher's implement for cutting animal carcasses into joints or pieces.  It is a large, rectangular knife and is quite heavy.\n"  );
  call_other( clone, "set_weight", 16  );
  call_other( clone, "set_length",  11  );
  call_other( clone, "set_width", 5  );
  call_other( clone, "set_material",  "steel"  );
  call_other( clone, "set_value", 400  );
  call_other( clone, "new_weapon", 750  );
  call_other( clone, "set_damage_chance", 5  );
  call_other( clone, "add_attack", "slash", 50, ({ 10, 4, 10 }), "sharp", "sharp", 0  );
  call_other( clone, "add_attack", "hack", 90, ({ 20, 3, 20 }), "sharp", "sharp", 0 );
   return clone;
}

==================================================
FILE: weapons/knives/.sharp_butter_knife.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/sharp_butter_knife.wep#1" );
  call_other( clone, "set_name", "knife"  );
  call_other( clone, "set_short", "sharp butter knife"  );
  call_other( clone, "set_main_plural", "sharp butter knives"  );
  call_other( clone, "add_adjective", ({ "sharp", "butter" })  );
  call_other( clone, "add_alias", ({ "utensil" })  );
  call_other( clone, "add_plural", "knives"  );
  call_other( clone, "set_long",  "This is a butter knife that has been sharpened a bit.\n"  );
  call_other( clone, "set_weight",  3  );
  call_other( clone, "set_length",  6  );
  call_other( clone, "set_width",  1  );
  call_other( clone, "set_material",  "steel"  );
  call_other( clone, "set_value",  75  );
  call_other( clone, "new_weapon",  500  );
  call_other( clone, "add_attack",  "slash", 70, ({ 15, 2, 20 }), "sharp", "sharp", 0  );
  call_other( clone, "add_attack",  "stab", 40, ({ 20, 2, 30 }), "pierce", "pierce", 0 );
   return clone;
}

==================================================
FILE: weapons/knives/.silver_sickle.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/silver_sickle.wep#1" );
  call_other( clone, "set_name", "sickle"  );
  call_other( clone, "set_short", "silver sickle"  );
  call_other( clone, "add_adjective", "silver"  );
  call_other( clone, "set_long", "This is a dagger with a crescent shaped blade cast from silver.\n"  );
  call_other( clone, "set_weight", 9  );
  call_other( clone, "set_length", 12  );
  call_other( clone, "set_width", 8  );
  call_other( clone, "set_material",  "silver"  );
  call_other( clone, "set_value",  2000  );
  call_other( clone, "new_weapon", 12800  );
  call_other( clone, "set_damage_chance", 5  );
  call_other( clone, "add_attack",  "slash", 75, ({ 10, 5, 15 }), "sharp", "sharp"  );
  call_other( clone, "add_attack",  "stab", 50, ({ 10, 2, 25 }), "pierce", "pierce" );
   return clone;
}

==================================================
FILE: weapons/knives/.small_copper_knife.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/small_copper_knife.wep#1" );
  call_other( clone, "set_name", "knife"  );
  call_other( clone, "set_short", "small copper knife"  );
  call_other( clone, "set_main_plural", "small copper knives"  );
  call_other( clone, "add_adjective", ({ "small", "copper" })  );
  call_other( clone, "set_long", "This is a small, Djelian, copper knife.  Its straight blade and hilt are undecorated, clean and functional.\n"  );
  call_other( clone, "set_weight", 5  );
  call_other( clone, "set_length", 8  );
  call_other( clone, "set_width", 3  );
  call_other( clone, "set_material",  "copper"  );
  call_other( clone, "set_value", 100  );
  call_other( clone, "new_weapon", 16000  );
  call_other( clone, "add_attack", "slash", 100, ({ 10, 5, 10 }), "sharp", "sharp"  );
  call_other( clone, "add_attack", "stab", 50, ({ 10, 2, 15 }), "pierce", "pierce" );
   return clone;
}

==================================================
FILE: weapons/knives/.small_knife.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/small_knife.wep#1" );
  call_other( clone, "set_name", "knife"  );
  call_other( clone, "set_short", "small knife"  );
  call_other( clone, "add_adjective", ({ "small" })  );
  call_other( clone, "add_alias", "utensil"  );
  call_other( clone, "add_plural", "utensils"  );
  call_other( clone, "set_long", "This small knife might be the sort of thing " "you'd use to peel an apple, slice carrots or " "stab in someone's kidney.  You could say " "that it's a multi-purpose utensil.\n"  );
  call_other( clone, "set_weight", 6  );
  call_other( clone, "set_length", 7  );
  call_other( clone, "set_width", 1  );
  call_other( clone, "set_material",  "steel"  );
  call_other( clone, "set_value", 50  );
  call_other( clone, "new_weapon", 500  );
  call_other( clone, "add_attack", "slash", 70, ({ 5, 2, 20 }), "sharp", "sharp", 0  );
  call_other( clone, "add_attack", "stab", 40, ({ 10, 2, 30 }), "pierce", "pierce", 0 );
   return clone;
}

==================================================
FILE: weapons/knives/.stiletto.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/stiletto.wep#1" );
  call_other( clone, "set_name", "stiletto"  );
  call_other( clone, "set_short", "stiletto"  );
  call_other( clone, "add_alias", "knife"  );
  call_other( clone, "add_adjective", "slender"  );
  call_other( clone, "set_main_plural", "stilettoes"  );
  call_other( clone, "add_plural", "knives"  );
  call_other( clone, "set_long", "This is a slender knife with a dark steel blade, and sharp tip.  "         "It's perfect for slipping between someone's ribs.\n"  );
  call_other( clone, "set_weight", 7  );
  call_other( clone, "set_length", 10  );
  call_other( clone, "set_width", 1  );
  call_other( clone, "set_material",  "steel"  );
  call_other( clone, "set_value", 2000  );
  call_other( clone, "new_weapon",  5000  );
  call_other( clone, "set_damage_chance",  5  );
  call_other( clone, "add_attack",  "stab", 70, ({ 40, 4, 20 }), "pierce", "pierce"  );
  call_other( clone, "add_attack",  "stabstab", 70, ({ 40, 4, 20 }), "pierce", "pierce"  );
  call_other( clone, "set_no_limbs", 1 );
   return clone;
}

==================================================
FILE: weapons/knives/.tanto.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/tanto.wep#1" );
  call_other( clone, "set_name", "tanto"  );
  call_other( clone, "set_short", "tanto"  );
  call_other( clone, "add_alias", "dagger"  );
  call_other( clone, "add_plural", ({"daggers","tantos"})  );
  call_other( clone, "set_main_plural", "tantos"  );
  call_other( clone, "set_long", "This large auriental dagger is an excellent weapon for close-in fighting.  It is short, well crafted and looks pretty durable.\n"  );
  call_other( clone, "set_weight", 9  );
  call_other( clone, "set_length", 10  );
  call_other( clone, "set_width", 3  );
  call_other( clone, "set_material", "steel"  );
  call_other( clone, "set_value", 4000  );
  call_other( clone, "new_weapon", 50000  );
  call_other( clone, "set_damage_chance", 2  );
  call_other( clone, "add_attack", "slash", 75, ({ 0, 2, 40 }), "sharp", "sharp", 0  );
  call_other( clone, "add_attack", "stab", 50, ({ 9, 4, 30 }), "pierce", "pierce", 0 );
   return clone;
}

==================================================
FILE: weapons/knives/.white_handled_ceremonial_bronze_knife.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/white_handled_ceremonial_bronze_knife.wep#1" );
  call_other( clone, "set_name", "knife"  );
  call_other( clone, "set_short", "white handled ceremonial bronze knife"  );
  call_other( clone, "add_adjective", ({ "white", "handled", "ceremonial", "bronze" })  );
  call_other( clone, "set_main_plural", "white handled ceremonial bronze knives"  );
  call_other( clone, "add_plural", "knives"  );
  call_other( clone, "set_long", "This is a ceremonial knife, for use in magic rituals.  Its ornate handle is made of ivory and its long bronze blade has been carved with mystic runes.\n"  );
  call_other( clone, "set_weight", 11  );
  call_other( clone, "set_length", 18  );
  call_other( clone, "set_width", 3  );
  call_other( clone, "set_material",  "bronze"  );
  call_other( clone, "set_value", 1000  );
  call_other( clone, "new_weapon", 2000  );
  call_other( clone, "add_attack", "slash", 70, ({ 10, 2, 20 }), "sharp", "sharp", 0  );
  call_other( clone, "add_attack", "stab", 40, ({ 20, 2, 60 }), "pierce", "pierce", 0 );
   return clone;
}

==================================================
FILE: state_change/base.hdr_dc.c
==================================================

#include <state_change.h>
void dest_me() { destruct( this_object() ); }
class state_change item;
mapping data = ([ ]);
mixed data_return_0() {
  item = new( class state_change );
  item->result = "/obj/reagents/water.ob";
  item->factor = 0.0;
  item->func = ({});
  data["witchesbrew:Water"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/water.ob";
  item->factor = 0.0;
  item->func = ({});
  data["ruinedbrew:Water"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/brewed_healing_tea.ob";
  item->factor = 1.0;
  item->func = ({
    (: $2->add_eat_effect( "/std/effects/ingested/basic_healing",
       to_int( $1->query_eat_effects()[
              "/std/effects/ingested/basic_healing" ] *
           ( 4 + $1->query_property( "brew bonus" ) ) ) ) :),
  });
  data["witchesbrew:UnbrewedComfreyYarrowTea"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/burnt_tea.ob";
  item->factor = 1.0;
  item->func = ({});
  data["ruinedbrew:UnbrewedComfreyYarrowTea"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/brewed_antidote_elixir";
  item->factor = 1.0;
  item->func = ({
    (: $2->add_eat_effect( "/std/effects/ingested/poison_antidote",
       to_int( $1->query_eat_effects()[
           "/std/effects/ingested/poison_antidote"] *
       ( 4 + $1->query_property( "brew bonus" ) ) ) ) :)
  });
  data["witchesbrew:UnbrewedBasilFennelSpiderTea"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/burnt_tea.ob";
  item->factor = 1.0;
  item->func = ({});
  data["ruinedbrew:BasilFennelSpiderTea"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/brewed_intelligence_tea.ob";
  item->factor = 1.0;
  item->func = ({
    (: $2->add_eat_effect( "/std/effects/ingested/int_bonus",
       to_int( this_player()->query_skill_bonus(
             "magic.methods.physical.brewing" ) /
       ( 10 - $1->query_property( "brew bonus" ) ) ) ) :),
    });
  data["witchesbrew:UnbrewedSageIntPotion"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/burnt_tea.ob";
  item->factor = 1.0;
  item->func = ({});
  data["ruinedbrew:UnbrewedSageIntPotion"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_liquid.ob";
  item->factor = 1.0;
  item->func = ({
        (: $2->set_name("liquid") :),
        (: $2->set_short("milky white liquid") :),
        (: $2->add_adjective( "milky", "white"  ) :),
        (: $2->set_long("This is a milky white liquid, $pile_size$.") :),
        (: $2->set_medium_alias("BrewedEyebrightCarrotBunnyEyeballTea") :),
        (: $2->add_eat_effect("/std/effects/ingested/blind_protect",
               to_int( this_player()->query_skill_bonus(
               "magic.methods.physical.brewing" ) /
               ( 10 - $1->query_property( "brew bonus" ) ) ) ) :),
    });
  data["witchesbrew:EyebrightCarrotBunnyEyeballTea"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/burnt_tea.ob";
  item->factor = 1.0;
  item->func = ({});
  data["ruinedbrew:EyebrightCarrotBunnyEyeballTea"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/brewed_cold_cure.ob";
  item->factor = 1.0;
  item->func = ({
     (: $2->add_eat_effect("/std/effects/ingested/cold_cure",
        to_int( $1->query_eat_effects()["/std/effects/ingested/cold_cure"] *
               ( 4 + $1->query_property( "brew bonus" ) ) ) ) :),
     (: $2->add_eat_effect("/std/effects/ingested/garlic_breath",
        $1->query_eat_effects()["/std/effects/ingested/garlic_breath"] ) :),
   });
  data["witchesbrew:ColdCureSyrup"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/burnt_cold_cure.ob";
  item->factor = 0.25;
  item->func = ({});
  data["ruinedbrew:ColdCureSyrup"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/black_tea.ob";
  item->factor = 1.0;
  item->func = ({ });
  data["witchesbrew:UnbrewedBlackTea"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/burnt_tea.ob";
  item->factor = 1.0;
  item->func = ({});
  data["ruinedbrew:UnbrewedBlackTea"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/burnt_tea.ob";
  item->factor = 1.0;
  item->func = ({ });
  data["witchesbrew:BlackTea"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/burnt_tea.ob";
  item->factor = 1.0;
  item->func = ({});
  data["ruinedbrew:BlackTea"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/water.ob";
  item->factor = 1.0;
  item->func = ({});
  data["burn:Water"] = item;
  item = new( class state_change );
  item->factor = 1.0;
  item->result = "/obj/reagents/blackened_mess.ob";
  item->func = ({ (: $2->add_eat_effect( "/std/effects/ingested/poison", 400 ) :) });
  data["burn:UnheatedAchorionPurple"] = item;
  item = new( class state_change );
  item->factor = 1.0;
  item->result = "/obj/reagents/blackened_mess.ob";
  item->func = ({ (: $2->add_eat_effect( "/std/effects/ingested/poison", 400 ) :) });
  data["burn:UndistilledAchorionPurple"] = item;
  item = new( class state_change );
  item->factor = 1.0;
  item->result = "/obj/reagents/blackened_mess.ob";
  item->func = ({ (: $2->add_eat_effect( "/std/effects/ingested/poison", 400 ) :) });
  data["burn:UndistilledFightClubPoison"] = item;
  item = new( class state_change );
  item->factor = 1.0;
  item->result = "/obj/reagents/blackened_mess.ob";
  item->func = ({ (: $2->add_eat_effect( "/std/effects/ingested/poison", 400 ) :) });
  data["burn:UndistilledHallucinogenPoison"] = item;
  item = new( class state_change );
  item->factor = 1.0;
  item->result = "/obj/reagents/blackened_mess.ob";
  item->func = ({ (: $2->add_eat_effect( "/std/effects/ingested/poison", 400 ) :) });
  data["burn:UndistilledSpiderPoison"] = item;
  item = new( class state_change );
  item->factor = 1.0;
  item->result = "/obj/reagents/blackened_mess.ob";
  item->func = ({ (: $2->add_eat_effect( "/std/effects/ingested/poison", 400 ) :) });
  data["burn:UndistilledBlowfishPoison"] = item;
  item = new( class state_change );
  item->factor = 1.0;
  item->result = "/obj/reagents/blackened_mess.ob";
  item->func = ({ (: $2->add_eat_effect( "/std/effects/ingested/poison", 400 ) :) });
  data["burn:UnheatedWeakConPoison"] = item;
  item = new( class state_change );
  item->factor = 1.0;
  item->result = "/obj/reagents/blackened_mess.ob";
  item->func = ({ (: $2->add_eat_effect( "/std/effects/ingested/poison", 400 ) :) });
  data["burn:UnheatedConPoison"] = item;
  item = new( class state_change );
  item->factor = 1.0;
  item->result = "/obj/reagents/blackened_mess.ob";
  item->func = ({ (: $2->add_eat_effect( "/std/effects/ingested/poison", 400 ) :) });
  data["burn:UnheatedConfusePoison"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/water.ob";
  item->factor = 1.0;
  item->func = ({});
  data["distill:Water"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/achorion_purple.ob";
  item->factor = 0.01;
  item->func = ({ (: $2->add_eat_effect( "/std/effects/poisons/hp_new",
    to_int( $3->query_skill_bonus( "covert.items.poisons" ) ) ) :) });
  data["distill:UndistilledAchorionPurple"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/achorion_purple.ob";
  item->factor = 0.01;
  item->func = ({ (: $2->add_eat_effect( "/std/effects/poisons/hp_new",
    to_int( $3->query_skill_bonus( "covert.items.poisons" ) / 5 ) ) :) });
  data["distill:UnheatedAchorionPurple"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/angry_poison.ob";
  item->factor = 0.01;
  item->func = ({ (: $2->add_eat_effect( "/std/effects/poisons/angry",
    to_int( $3->query_skill_bonus( "covert.items.poisons" ) ) ) :) });
  data["distill:UndistilledFightClubPoison"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/hallucinogen_poison.ob";
  item->factor = 0.01;
  item->func = ({ (: $2->add_eat_effect( "/std/effects/ingested/hallucination",
    to_int( $3->query_skill_bonus( "covert.items.poisons" ) * 10 ) ) :) });
  data["distill:UndistilledHallucinogenPoison"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/spider_poison.ob";
  item->factor = 0.5;
  item->func = ({ (: $2->add_eat_effect( "/std/effects/poisons/spider_venom",
    to_int( $3->query_skill_bonus( "covert.items.poisons" ) * 10 ) ) :) });
  data["distill:UndistilledSpiderPoison"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/bloat.ob";
  item->factor = 0.5;
  item->func = ({ (: $2->add_eat_effect( "/std/effects/poisons/bloat",
    to_int( $3->query_skill_bonus( "covert.items.poisons" ) * 1.5 ) ) :) });
  data["distill:UndistilledBlowfishPoison"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_liquid.ob";
  item->factor = 1.0;
  item->func = ({
      (: $2->set_name( "snake_poison" ) :),
      (: $2->set_short( "thick white liquid" ) :),
      (: $2->add_adjective( ({ "thick", "white", "liquid" }) ) :),
      (: $2->set_long( "This is $amount_size$ of some thick white liquid.\n" ) :),
      (: $2->set_medium_alias( "DistilledSnakePoison" ) :),
    });
  data["distill:UndistilledSnakePoison"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 15.0;
  item->func = ({
      (: $2->set_name( "mess" ) :),
      (: $2->set_short( "nasty fibrous mess" ) :),
      (: $2->add_alias( "wheat" ) :),
      (: $2->add_adjective( ({ "nasty", "fibrous" }) ) :),
      (: $2->set_long("This is $pile_size$ of a nasty, "
                      "fibrous mess.  Some of it looks "
                      "a bit like flour.\n") :),
      (: $2->set_medium_alias( "WheatMess" ) :),
      (: $2->set_decay_speed( 0 ) :)
   });
  data["grind:Wheat"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 10.0;
  item->func = ({
      (: $2->set_name( "wheat" ) :),
      (: $2->set_short( "wheat flour" ) :),
      (: $2->add_alias( "flour" ) :),
      (: $2->add_adjective( "ground" ) :),
      (: $2->set_long("This is $pile_size$ of soft, brown "
                      "flour, $amount_size$.  Perhaps you "
                      "could make bread with it?\n") :),
      (: $2->set_medium_alias( "WheatFlour" ) :),
      (: $2->set_decay_speed( 0 ) :)
   });
  data["grind:WheatBerries"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 50.0;
  item->func = ({
      (: $2->set_name( "clover" ) :),
      (: $2->set_short( "ground clover" ) :),
      (: $2->add_alias( "plant" ) :),
      (: $2->add_plural( "plants" ) :),
      (: $2->add_adjective( "ground" ) :),
      (: $2->set_long( "This is $pile_size$ of ground plant, "
            "$amount_size$.  It looks "
            "like it might have been clover.\n" ) :),
      (: $2->set_medium_alias( "GroundClover" ) :),
      (: $2->set_decay_speed( 0 ) :)
   });
  data["grind:Clover"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/coffee.ob";
  item->factor = 5.0;
  item->func = ({ });
  data["grind:CoffeeBean"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 50.0;
  item->func = ({
        (: $2->set_name("yarrow") :),
        (: $2->set_short("ground yarrow") :),
        (: $2->add_alias("plant") :),
        (: $2->add_plural( "plants" ) :),
        (: $2->add_adjective("ground") :),
        (: $2->set_long( "This is $pile_size$ of ground plant, "
            "$amount_size$.  It looks "
                    "like it might've been yarrow.\n") :),
        (: $2->set_medium_alias("GroundYarrow") :),
        (: $2->add_eat_effect("/std/effects/ingested/cum_poison", 12) :),
        (: $2->add_eat_effect("/std/effects/ingested/basic_healing", 2) :),
        (: $2->set_decay_speed(0) :)
    });
  data["grind:Yarrow"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 50.0;
  item->func = ({
        (: $2->set_name("comfrey") :),
        (: $2->set_short("ground comfrey") :),
        (: $2->add_alias("plant") :),
        (: $2->add_plural( "plants" ) :),
        (: $2->add_adjective("ground") :),
        (: $2->set_long( "This is $pile_size$ of ground plant, "
                    "$amount_size$.  It looks "
                    "like it might've been comfrey.\n") :),
        (: $2->set_medium_alias("GroundComfrey") :),
        (: $2->add_eat_effect("/std/effects/ingested/cum_poison", 16) :),
        (: $2->add_eat_effect("/std/effects/ingested/basic_healing", 4) :),
        (: $2->set_decay_speed(0) :)
    });
  data["grind:Comfrey"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 1.0;
  item->func = ({
   (: $2->set_name( "mushroom" ) :),
   (: $2->set_short( "ground mushroom" ) :),
   (: $2->add_alias( "madman" ) :),
   (: $2->add_adjective( "ground" ) :),
        (: $2->set_long( "This is $pile_size$ of ground plant, "
                    "$amount_size$.  Judging from the "
          "green tint, it looks like it might've been Floppy Madman.\n" ) :),
   (: $2->set_medium_alias( "GroundFloppyMadman" ) :)
   });
  data["grind:FloppyMadman"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 50.0;
  item->func = ({
        (: $2->set_name("fleabane") :),
        (: $2->set_short("ground fleabane") :),
        (: $2->add_alias("plant") :),
        (: $2->add_plural( "plants" ) :),
        (: $2->add_adjective("ground") :),
        (: $2->set_long( "This is $pile_size$ of ground plant, "
                    "$amount_size$.  It looks "
                    "like it might've been Klatchian fleabane.\n") :),
        (: $2->set_medium_alias("GroundKlatchianFleabane") :),
        (: $2->set_decay_speed(0) :)
    });
  data["grind:KlatchianFleabane"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 1.2;
  item->func = ({
        (: $2->set_name("fleabane") :),
        (: $2->set_short("powdered fleabane") :),
        (: $2->add_alias("plant") :),
        (: $2->add_plural( "plants" ) :),
        (: $2->add_adjective(({"powdered"})) :),
        (: $2->set_long( "This is $pile_size$ of ground plant, "
                    "$amount_size$.  It looks "
                    "a slight lavender hue with specs of orange.\n") :),
        (: $2->set_medium_alias("PowderedKlatchianFleabane") :),
        (: $2->set_decay_speed(0) :)
    });
  data["grind:GroundKlatchianFleabane"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 50.0;
  item->func = ({
        (: $2->set_name("mayweed") :),
        (: $2->set_short("ground mayweed") :),
        (: $2->add_alias("plant") :),
        (: $2->add_adjective("ground") :),
        (: $2->set_long( "This is $pile_size$ of ground plant, "
                    "$amount_size$.  It looks "
                    "like it might've been stinking mayweed.\n") :),
        (: $2->set_medium_alias("GroundStinkingMayweed") :),
        (: $2->set_decay_speed(0) :)
    });
  data["grind:StinkingMayweed"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 1.2;
  item->func = ({
        (: $2->set_name("mayweed") :),
        (: $2->set_short("powdered mayweed") :),
        (: $2->add_alias("plant") :),
        (: $2->add_plural( "plants" ) :),
        (: $2->add_adjective(({"powdered"})) :),
        (: $2->set_long( "This is $pile_size$ of ground plant, "
                    "$amount_size$.  It looks "
                    "a brownish green color, as well as a very strong "
                    "odor.\n") :),
        (: $2->set_medium_alias("PowderedStinkingMayweed") :),
        (: $2->set_decay_speed(0) :)
    });
  data["grind:GroundStinkingMayweed"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 50.0;
  item->func = ({
      (: $2->set_name( "walnut" ) :),
      (: $2->set_short( "ground walnut" ) :),
      (: $2->add_adjective( "ground" ) :),
      (: $2->add_plural( "walnuts" ) :),
      (: $2->set_long( "This is a pile of ground walnut.\n" ) :),
      (: $2->set_medium_alias( "GroundWalnut" ) :),
   });
  data["grind:Walnut"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 0.04;
  item->func = ({
      (: $2->set_name( "garlic" ) :),
      (: $2->set_short( "ground garlic" ) :),
      (: $2->add_alias( "garlic" ) :),
      (: $2->add_adjective( ({ "wild", "ground" }) ) :),
      (: $2->set_long( "This is $pile_size$ of ground plant, "
                    "$amount_size$.  Judging from the "
         "smell, it must have been garlic.\n" ) :),
       (: $2->set_medium_alias( "GroundGarlic" ) :),
      (: $2->add_eat_effect("/std/effects/ingested/garlic_breath", 200) :),
      (: $2->set_decay_speed(0) :)
   });
  data["grind:WildGarlic"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 0.04;
  item->func = ({
      (: $2->set_name( "garlic" ) :),
      (: $2->set_short( "ground garlic" ) :),
      (: $2->add_alias( "garlic" ) :),
      (: $2->add_adjective( "ground" ) :),
      (: $2->set_long( "This is $pile_size$ of ground plant, "
                    "$amount_size$.  Judging from the "
         "smell, it must have been garlic.\n" ) :),
       (: $2->set_medium_alias( "GroundGarlic" ) :),
      (: $2->add_eat_effect("/std/effects/ingested/garlic_breath", 200) :),
      (: $2->set_decay_speed(0) :)
    });
  data["grind:GarLic"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 50.0;
  item->func = ({
        (: $2->set_name("parsley") :),
        (: $2->set_short("ground parsley") :),
        (: $2->add_alias("plant") :),
        (: $2->add_plural( "plants" ) :),
        (: $2->add_adjective("ground") :),
        (: $2->set_long( "This is $pile_size$ of ground plant, "
                    "$amount_size$.  It smells "
                    "like it might've been parsley.\n") :),
        (: $2->set_medium_alias("GroundParsley") :),
        (: $2->add_eat_effect("/std/effects/ingested/breath_fresh", 2) :),
        (: $2->set_decay_speed(0) :)
    });
  data["grind:Parsley"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 50.0;
  item->func = ({
        (: $2->set_name("sage") :),
        (: $2->set_short("ground sage") :),
        (: $2->add_alias("plant") :),
        (: $2->add_plural( "plants" ) :),
        (: $2->add_adjective("ground") :),
        (: $2->set_long( "This is $pile_size$ of ground plant, "
                    "$amount_size$.  It smells "
                    "like it might've been sage.\n") :),
        (: $2->set_medium_alias("GroundSage") :),
        (: $2->set_decay_speed(0) :)
    });
  data["grind:Sage"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 50.0;
  item->func = ({
        (: $2->set_name("rosemary") :),
        (: $2->set_short("ground rosemary") :),
        (: $2->add_alias("plant") :),
        (: $2->add_plural( "plants" ) :),
        (: $2->add_adjective("ground") :),
        (: $2->set_long( "This is $pile_size$ of ground plant, "
                    "$amount_size$.  It smells "
                    "like it might've been rosemary.\n") :),
        (: $2->set_medium_alias("GroundRosemary") :),
        (: $2->set_decay_speed(0) :)
    });
  data["grind:Rosemary"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 50.0;
  item->func = ({
        (: $2->set_name("thyme") :),
        (: $2->set_short("ground thyme") :),
        (: $2->add_alias("plant") :),
        (: $2->add_plural( "plants" ) :),
        (: $2->add_adjective("ground") :),
        (: $2->set_long( "This is $pile_size$ of ground plant, "
                    "$amount_size$.  It smells "
                    "like it might've been thyme.\n") :),
        (: $2->set_medium_alias("GroundThyme") :),
        (: $2->set_decay_speed(0) :)
    });
  data["grind:Thyme"] = item;
}
mixed data_return_1() {
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 50.0;
  item->func = ({
        (: $2->set_name("basil") :),
        (: $2->set_short("ground basil") :),
        (: $2->add_alias("plant") :),
        (: $2->add_plural( "plants" ) :),
        (: $2->add_adjective("ground") :),
        (: $2->set_long( "This is $pile_size$ of ground plant, "
                    "$amount_size$.  It smells "
                    "like it might've been basil.\n") :),
        (: $2->set_medium_alias("GroundBasil") :),
        (: $2->set_decay_speed(0) :)
    });
  data["grind:Basil"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 50.0;
  item->func = ({
        (: $2->set_name("eyebright") :),
        (: $2->set_short("ground eyebright") :),
        (: $2->add_alias("plant") :),
        (: $2->add_plural( "plants" ) :),
        (: $2->add_adjective("ground") :),
        (: $2->set_long( "This is $pile_size$ of ground plant, "
                    "$amount_size$.  It smells "
                    "like it might've been eyebright.\n") :),
        (: $2->set_medium_alias("GroundEyebright") :),
        (: $2->set_decay_speed(0) :)
    });
  data["grind:Eyebright"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 0.05;
  item->func = ({
        (: $2->set_name("spider") :),
        (: $2->set_short("ground arachnid") :),
        (: $2->add_alias("arachnid") :),
        (: $2->add_adjective("ground") :),
        (: $2->set_long( "This is $pile_size$ of ground arachnid, "
                    "$amount_size$.  It looks "
                    "very chitinous.\n") :),
        (: $2->set_medium_alias("GroundSpider") :),
        (: $2->set_decay_speed(0) :)
    });
  data["grind:Spider"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 50.0;
  item->func = ({
        (: $2->set_name("fennel") :),
        (: $2->set_short("ground fennel") :),
        (: $2->add_alias(({"seed", "seeds"})) :),
        (: $2->add_adjective("ground") :),
        (: $2->set_long( "This is $pile_size$ of ground plant, "
                    "$amount_size$.  It looks "
                    "like it might've been fennel.\n") :),
        (: $2->set_medium_alias("GroundFennel") :),
        (: $2->set_decay_speed(0) :)
    });
  data["grind:Fennel"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 50.0;
  item->func = ({
        (: $2->set_name("carrot") :),
        (: $2->set_short("ground carrot") :),
        (: $2->add_adjective("ground") :),
        (: $2->set_long( "This is $pile_size$ of ground plant, "
                    "$amount_size$.  It looks "
                    "very orange.\n") :),
        (: $2->set_medium_alias("GroundCarrot") :),
        (: $2->set_decay_speed(0) :)
    });
  data["grind:CarRot"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 10.0;
  item->func = ({
        (: $2->set_name("eye") :),
          (: $2->add_alias("eyes") :),
        (: $2->set_short("ground eyes") :),
        (: $2->add_adjective("ground") :),
        (: $2->set_long( "This is $pile_size$ of ground plant, "
                    "$amount_size$.  It looks "
                    "very bloody.\n") :),
        (: $2->set_medium_alias("GroundBunnyEyeball") :),
        (: $2->set_decay_speed(0) :)
    });
  data["grind:BunnyEyeball"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 20.0;
  item->func = ({
        (: $2->set_name("crumbs") :),
        (: $2->set_short("molasses cookie crumbs") :),
        (: $2->add_adjective(({"molasses", "cookie"})) :),
        (: $2->set_long("This is some cookie crumbs.  Yum.\n") :),
        (: $2->set_medium_alias("GroundMolassesCookie") :),
        (: $2->set_decay_speed(0) :)
    });
  data["grind:MolassesCookie"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 10.0;
  item->func = ({
        (: $2->set_name("radish") :),
        (: $2->set_short("ground radish") :),
        (: $2->add_adjective("ground") :),
        (: $2->set_long( "This is $pile_size$ of ground plant, "
                    "$amount_size$.  It looks "
                    "very orange.\n") :),
        (: $2->set_medium_alias("GroundRadish") :),
        (: $2->set_decay_speed(0) :)
    });
  data["grind:Radish"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 10.0;
  item->func = ({
        (: $2->set_name("parsnip") :),
        (: $2->set_short("ground parsnip") :),
        (: $2->add_adjective("ground") :),
        (: $2->set_long( "This is $pile_size$ of ground plant, "
                    "$amount_size$.  It looks "
                    "a bit like a pile of pine sawdust.\n") :),
        (: $2->set_medium_alias("GroundParsnip") :),
        (: $2->set_decay_speed(0) :)
    });
  data["grind:Parsnip"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 50.0;
  item->func = ({
        (: $2->set_name("oregano") :),
        (: $2->set_short("ground oregano") :),
        (: $2->add_adjective("ground") :),
        (: $2->set_long( "This is $pile_size$ of ground plant, "
                    "$amount_size$.  It looks "
                    "very Genuan.\n") :),
        (: $2->set_medium_alias("GroundOregano") :),
        (: $2->set_decay_speed(0) :)
    });
  data["grind:Oregano"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 10.0;
  item->func = ({
        (: $2->set_name("foxglove") :),
        (: $2->set_short("ground foxglove") :),
        (: $2->add_adjective("ground") :),
        (: $2->add_alias( "plant" ) :),
        (: $2->add_plural( "plants" ) :),
        (: $2->set_long( "This is $pile_size$ of ground plant, "
          "$amount_size$.  You can tell it used to be foxglove by the "
          "little purple flowers scattered in with the green stuff.\n") :),
        (: $2->set_medium_alias("GroundFoxglove") :),
        (: $2->add_eat_effect( "/std/effects/ingested/cum_poison", 12 ) :),
        (: $2->set_decay_speed(0) :)
    });
  data["grind:Foxglove"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 50.0;
  item->func = ({
        (: $2->set_name("violet") :),
        (: $2->set_short("ground violet") :),
        (: $2->add_adjective("ground") :),
        (: $2->set_long( "This is $pile_size$ of ground plant, "
                    "$amount_size$.  It looks "
             "very, well, violet.\n") :),
        (: $2->set_medium_alias("GroundViolet") :),
        (: $2->set_decay_speed(0) :)
    });
  data["grind:Violet"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 10.0;
  item->func = ({
        (: $2->set_name("cabbage") :),
        (: $2->set_short("shredded cabbage") :),
        (: $2->add_adjective("shredded") :),
        (: $2->set_long( "This is $pile_size$ of shredded cabbage, "
                    "$amount_size$.  "
             "Hopefully, not a sentinent one.\n") :),
        (: $2->set_medium_alias("GroundCabbage") :),
        (: $2->set_decay_speed(0) :)
    });
  data["grind:Cabbage"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 50.0;
  item->func = ({
        (: $2->set_name( "peel" ) :),
        (: $2->set_short( "ground orange peel" ) :),
        (: $2->add_adjective( ({ "ground", "orange" }) ) :),
        (: $2->set_long( "This is $pile_size$ of ground orange peel, "
            "$amount_siuze$.  It is still "
            "a vibrant orange, the citric acid preserving both the colour "
            "and smell of the orange peel.\n" ) :),
        (: $2->set_medium_alias( "GroundOrangePeel" ) :),
        (: $2->set_decay_speed( 0 ) :)
    });
  data["grind:OrangePeel"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 1.0;
  item->func = ({
        (: $2->set_name( "belladonna" ) :),
        (: $2->set_short( "ground belladonna" ) :),
        (: $2->add_adjective( "ground" ) :),
        (: $2->add_alias( "plant" ) :),
        (: $2->add_plural( "plants" ) :),
        (: $2->set_long( "This is $pile_size$ of ground plant, "
            "$amount_size$.  It looks like it might've been belladonna.\n" ) :),
        (: $2->set_medium_alias( "GroundBelladonna" ) :),
        (: $2->add_eat_effect( "/std/effects/ingested/cum_poison", 12 ) :),
        (: $2->set_decay_speed( 0 ) :)
    });
  data["grind:Belladonna"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 1.0;
  item->func = ({
        (: $2->set_name( "hemlock" ) :),
        (: $2->set_short( "ground hemlock" ) :),
        (: $2->add_adjective( "ground" ) :),
        (: $2->add_alias( "plant" ) :),
        (: $2->add_plural( "plants" ) :),
        (: $2->set_long( "This is $pile_size$ of ground plant, "
            "$amount_size$.  It looks like it might've been hemlock.\n" ) :),
        (: $2->set_medium_alias( "GroundHemlock" ) :),
        (: $2->add_eat_effect( "/std/effects/ingested/cum_poison", 12 ) :),
        (: $2->set_decay_speed( 0 ) :)
    });
  data["grind:Hemlock"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 1.0;
  item->func = ({
        (: $2->set_name( "monkshood" ) :),
        (: $2->set_short( "ground monkshood" ) :),
        (: $2->add_adjective( "ground" ) :),
        (: $2->add_alias( "plant" ) :),
        (: $2->add_plural( "plants" ) :),
        (: $2->set_long( "This is $pile_size$ of ground plant, "
            "$amount_size$.  It looks like it might've been monkshood.\n" ) :),
        (: $2->set_medium_alias( "GroundMonkshood" ) :),
        (: $2->add_eat_effect( "/std/effects/ingested/cum_poison", 12 ) :),
        (: $2->set_decay_speed( 0 ) :)
    });
  data["grind:Monkshood"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 1.0;
  item->func = ({
        (: $2->set_name( "wormwood" ) :),
        (: $2->set_short( "ground wormwood" ) :),
        (: $2->add_adjective( "ground" ) :),
        (: $2->add_alias( "plant" ) :),
        (: $2->add_plural( "plants" ) :),
        (: $2->set_long( "This is $pile_size$ of ground plant, "
            "$amount_size$.  It looks like it might've been wormwood.\n") :),
        (: $2->set_medium_alias( "GroundWormwood" ) :),
        (: $2->add_eat_effect( "/std/effects/ingested/cum_poison", 12 ) :),
        (: $2->set_decay_speed( 0 ) :)
    });
  data["grind:Wormwood"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 1.0;
  item->func = ({
        (: $2->set_name( "bryony" ) :),
        (: $2->set_short( "ground bryony" ) :),
        (: $2->add_adjective( "ground" ) :),
        (: $2->add_alias( "plant" ) :),
        (: $2->add_plural( "plants" ) :),
        (: $2->set_long( "This is $pile_size$ of ground plant, "
            "$amount_size$.  It looks like it might've been bryony.\n" ) :),
        (: $2->set_medium_alias( "GroundBryony" ) :),
        (: $2->add_eat_effect( "/std/effects/ingested/cum_poison", 12 ) :),
        (: $2->set_decay_speed( 0 ) :)
    });
  data["grind:Bryony"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 1.0;
  item->func = ({
        (: $2->set_name( "achorion" ) :),
        (: $2->set_short( "ground achorion mould" ) :),
        (: $2->add_adjective( ({ "ground", "mould" }) ) :),
        (: $2->add_alias( "mould" ) :),
        (: $2->add_alias( "plant" ) :),
        (: $2->add_plural( "plants" ) :),
        (: $2->set_long( "This is $pile_size$ of ground plant, "
            "$amount_size$.  It looks like it might've been achorion mould.\n") :),
        (: $2->set_medium_alias( "GroundAchorionMould" ) :),
        (: $2->add_eat_effect( "/std/effects/ingested/cum_poison", 12 ) :),
        (: $2->set_decay_speed( 0 ) :)
    });
  data["grind:AchorionMould"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 1.0;
  item->func = ({
        (: $2->set_name( "trumpet" ) :),
        (: $2->set_short( "ground angel's trumpet" ) :),
        (: $2->add_adjective( ({ "ground", "angel's" }) ) :),
        (: $2->add_alias( "angel's" ) :),
        (: $2->add_alias( "plant" ) :),
        (: $2->add_plural( "plants" ) :),
        (: $2->set_long( "This is $pile_size$ of ground plant, "
            "$amount_size$.  It looks like it might've been angel's trumpet.\n") :),
        (: $2->set_medium_alias( "GroundAngelsTrumpet" ) :),
        (: $2->add_eat_effect( "/std/effects/ingested/cum_poison", 12 ) :),
        (: $2->set_decay_speed( 0 ) :)
    });
  data["grind:AngelsTrumpet"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 1.0;
  item->func = ({
        (: $2->set_name( "cereus" ) :),
        (: $2->set_short( "ground cereus" ) :),
        (: $2->add_adjective( "ground" ) :),
        (: $2->add_alias( "plant" ) :),
        (: $2->add_plural( "plants" ) :),
        (: $2->set_long( "This is $pile_size$ of ground plant, "
            "$amount_size$.  It looks like it might've been cereus.\n") :),
        (: $2->set_medium_alias( "GroundCereus" ) :),
        (: $2->add_eat_effect( "/std/effects/ingested/cum_poison", 12 ) :),
        (: $2->set_decay_speed( 0 ) :)
    });
  data["grind:Cereus"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 1.0;
  item->func = ({
        (: $2->set_name( "skullcap" ) :),
        (: $2->set_short( "ground skullcap" ) :),
        (: $2->add_adjective( "ground" ) :),
        (: $2->add_alias( "plant" ) :),
        (: $2->add_plural( "plants" ) :),
        (: $2->set_long( "This is $pile_size$ of ground plant, "
            "$amount_size$.  It looks like it might've been skullcap.\n") :),
        (: $2->set_medium_alias( "GroundSkullcap" ) :),
        (: $2->add_eat_effect( "/std/effects/ingested/cum_poison", 12 ) :),
        (: $2->set_decay_speed( 0 ) :)
    });
  data["grind:Skullcap"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 1.0;
  item->func = ({
        (: $2->set_name( "weed" ) :),
        (: $2->set_short( "ground tyler weed" ) :),
        (: $2->add_adjective( ({ "ground", "tyler" }) ) :),
        (: $2->add_alias( "tyler" ) :),
        (: $2->add_alias( "plant" ) :),
        (: $2->add_plural( "plants" ) :),
        (: $2->set_long( "This is $pile_size$ of ground plant, "
            "$amount_size$.  It looks like it might've been tyler weed.\n") :),
        (: $2->set_medium_alias( "GroundTylerWeed" ) :),
        (: $2->add_eat_effect( "/std/effects/ingested/cum_poison", 12 ) :),
        (: $2->set_decay_speed( 0 ) :)
    });
  data["grind:TylerWeed"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 1.0;
  item->func = ({
        (: $2->set_name( "skullcap" ) :),
        (: $2->set_short( "ground skullcap" ) :),
        (: $2->add_adjective( "ground" ) :),
        (: $2->add_alias( "plant" ) :),
        (: $2->add_plural( "plants" ) :),
        (: $2->set_long( "This is $pile_size$ of ground plant, "
            "$amount_size$.  It looks like it might've been skullcap.\n") :),
        (: $2->set_medium_alias( "GroundSkullcap" ) :),
        (: $2->add_eat_effect( "/std/effects/ingested/cum_poison", 12 ) :),
        (: $2->set_decay_speed( 0 ) :)
    });
  data["grind:Skullcap"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 1.0;
  item->func = ({
        (: $2->set_name( "skin" ) :),
        (: $2->set_short( "ground toad skin" ) :),
        (: $2->add_adjective( ({ "ground", "toad" }) ) :),
        (: $2->add_plural( "skins" ) :),
        (: $2->set_long( "This is $pile_size$ of ground skin, "
            "$amount_size$.  It looks like it might've originally belonged "
            "to a toad.\n") :),
        (: $2->set_medium_alias( "GroundToadSkin" ) :),
        (: $2->set_decay_speed( 0 ) :)
    });
  data["grind:SkinOfToad"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 0.5;
  item->func = ({
        (: $2->set_name( "duct" ) :),
        (: $2->set_short( "ground lion bile duct" ) :),
        (: $2->add_adjective( ({ "ground", "lion", "bile" }) ) :),
        (: $2->add_palias( "bile" ) :),
        (: $2->add_plural( "ducts" ) :),
        (: $2->set_long( "This is $pile_size$ of ground bile duct, "
            "$amount_size$.  It looks like it might've originally belonged "
            "to a lion.\n") :),
        (: $2->set_medium_alias( "GroundLionBileDuct" ) :),
        (: $2->set_decay_speed( 0 ) :)
    });
  data["grind:BileDuctOfLion"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 1.0;
  item->func = ({
        (: $2->set_name( "heart" ) :),
        (: $2->set_short( "ground wolf heart" ) :),
        (: $2->add_adjective( ({ "ground", "wolf" }) ) :),
        (: $2->add_plural( "hearts" ) :),
        (: $2->set_long( "This is $pile_size$ of ground heart, "
            "$amount_size$.  It looks like it might've originally belonged "
            "to a wolf.\n") :),
        (: $2->set_medium_alias( "GroundWolfHeart" ) :),
        (: $2->set_decay_speed( 0 ) :)
    });
  data["grind:HeartOfWolf"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 1.0;
  item->func = ({
        (: $2->set_name( "brain" ) :),
        (: $2->set_short( "ground bird brain" ) :),
        (: $2->add_adjective( ({ "ground", "bird" }) ) :),
        (: $2->add_plural( "brains" ) :),
        (: $2->set_long( "This is $pile_size$ of ground brain, "
            "$amount_size$.  It looks like it might've originally belonged "
            "to a bird.\n") :),
        (: $2->set_medium_alias( "GroundBirdBrain" ) :),
        (: $2->set_decay_speed( 0 ) :)
    });
  data["grind:BrainOfBird"] = item;
}
mixed data_return_2() {
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 1.0;
  item->func = ({
        (: $2->set_name( "brain" ) :),
        (: $2->set_short( "ground bird brain" ) :),
        (: $2->add_adjective( ({ "ground", "bird" }) ) :),
        (: $2->add_plural( "brains" ) :),
        (: $2->set_long( "This is $pile_size$ of ground brain, "
            "$amount_size$.  It looks like it might've originally belonged "
            "to a bird.\n") :),
        (: $2->set_medium_alias( "GroundBirdBrain" ) :),
        (: $2->set_decay_speed( 0 ) :)
    });
  data["grind:BrainOfChicken"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 1.0;
  item->func = ({
        (: $2->set_name( "brain" ) :),
        (: $2->set_short( "ground bird brain" ) :),
        (: $2->add_adjective( ({ "ground", "bird" }) ) :),
        (: $2->add_plural( "brains" ) :),
        (: $2->set_long( "This is $pile_size$ of ground brain, "
            "$amount_size$.  It looks like it might've originally belonged "
            "to a bird.\n") :),
        (: $2->set_medium_alias( "GroundBirdBrain" ) :),
        (: $2->set_decay_speed( 0 ) :)
    });
  data["grind:BrainOfDuck"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 0.5;
  item->func = ({
        (: $2->set_name( "brain" ) :),
        (: $2->set_short( "ground bird brain" ) :),
        (: $2->add_adjective( ({ "ground", "bird" }) ) :),
        (: $2->add_plural( "brains" ) :),
        (: $2->set_long( "This is $pile_size$ of ground brain, "
            "$amount_size$.  It looks like it might've originally belonged "
            "to a bird.\n") :),
        (: $2->set_medium_alias( "GroundBirdBrain" ) :),
        (: $2->set_decay_speed( 0 ) :)
    });
  data["grind:BrainOfDuckling"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 1.0;
  item->func = ({
        (: $2->set_name( "brain" ) :),
        (: $2->set_short( "ground bird brain" ) :),
        (: $2->add_adjective( ({ "ground", "bird" }) ) :),
        (: $2->add_plural( "brains" ) :),
        (: $2->set_long( "This is $pile_size$ of ground brain, "
            "$amount_size$.  It looks like it might've originally belonged "
            "to a bird.\n") :),
        (: $2->set_medium_alias( "GroundBirdBrain" ) :),
        (: $2->set_decay_speed( 0 ) :)
    });
  data["grind:BrainOfParrot"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 1.0;
  item->func = ({
        (: $2->set_name( "brain" ) :),
        (: $2->set_short( "ground bird brain" ) :),
        (: $2->add_adjective( ({ "ground", "bird" }) ) :),
        (: $2->add_plural( "brains" ) :),
        (: $2->set_long( "This is $pile_size$ of ground brain, "
            "$amount_size$.  It looks like it might've originally belonged "
            "to a bird.\n") :),
        (: $2->set_medium_alias( "GroundBirdBrain" ) :),
        (: $2->set_decay_speed( 0 ) :)
    });
  data["grind:BrainOfPeacock"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 1.0;
  item->func = ({
        (: $2->set_name( "brain" ) :),
        (: $2->set_short( "ground bird brain" ) :),
        (: $2->add_adjective( ({ "ground", "bird" }) ) :),
        (: $2->add_plural( "brains" ) :),
        (: $2->set_long( "This is $pile_size$ of ground brain, "
            "$amount_size$.  It looks like it might've originally belonged "
            "to a bird.\n") :),
        (: $2->set_medium_alias( "GroundBirdBrain" ) :),
        (: $2->set_decay_speed( 0 ) :)
    });
  data["grind:BrainOfVulture"] = item;
  item = new( class state_change );
  item->result = "/obj/food/sweets/sugar.food";
  item->factor = 5.0;
  item->func = ({ });
  data["grind:SugarCube"] = item;
  item = new( class state_change );
  item->result = "/obj/food/sweets/brown_sugar.food";
  item->factor = 5.0;
  item->func = ({ });
  data["grind:SugarLump"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 0.25;
  item->func = ({
        (: $2->set_name( "powder" ) :),
        (: $2->set_short( "grainy orange powder" ) :),
        (: $2->add_adjective( ({ "grainy", "orange" }) ) :),
        (: $2->add_plural( "powders" ) :),
        (: $2->set_long( "This is $pile_size$ of grainy orange powder, "
            "$amount_size$.  It looks like it might've originally been "
            "solid drain cleaner.\n") :),
        (: $2->set_medium_alias( "GroundDrainCleaner" ) :),
        (: $2->set_decay_speed( 0 ) :)
    });
  data["grind:DrainCleaner"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/water.ob";
  item->factor = 1.0;
  item->func = ({});
  data["heat:Water"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_liquid.ob";
  item->factor = 0.5;
  item->func = ({
      (: $2->set_name( "steeped_achorion" ) :),
      (: $2->set_short( "purple-grey liquid" ) :),
      (: $2->add_adjective( ({ "purple-grey", "liquid" }) ) :),
      (: $2->set_long( "This is $amount_size$ of some purple-grey liquid.\n" ) :),
      (: $2->set_medium_alias( "UndistilledAchorionPurple" ) :),
    });
  data["heat:UnheatedAchorionPurple"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/con_poison.ob";
  item->factor = 0.1;
  item->func = ({ (: $2->add_eat_effect( "/std/effects/poisons/con_new",
    to_int( $3->query_skill_bonus( "covert.items.poisons" ) ) ) :) });
  data["heat:UnheatedWeakConPoison"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/con_poison.ob";
  item->factor = 0.1;
  item->func = ({ (: $2->add_eat_effect( "/std/effects/poisons/con_new",
    to_int( $3->query_skill_bonus( "covert.items.poisons" ) * 10 ) ) :) });
  data["heat:UnheatedConPoison"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/confuse_poison.ob";
  item->factor = 0.1;
  item->func = ({ (: $2->add_eat_effect( "/std/effects/poisons/confuse",
    to_int( $3->query_skill_bonus( "covert.items.poisons" ) * 10 ) ) :) });
  data["heat:UnheatedConfusePoison"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/smokebomb.ob";
  item->factor = 0.5;
  item->func = ({ (: $2->add_eat_effect( "/std/effects/poisons/smokebomb",
    to_int( $3->query_skill_bonus( "covert.items.poisons" ) ) ) :) });
  data["heat:UnheatedSmokeBomb"] = item;
  item = new( class state_change );
  item->result = "/w/taffyd/reagents/caramelised_sugar.food";
  item->factor = 6.4;
  item->func = ({});
  item->playtester = 1;
  data["heat:SuGar"] = item;
  item = new( class state_change );
  item->result = "/w/taffyd/reagents/disgusting_brown_lump.food";
  item->factor = 0.15625;
  item->func = ({ });
  item->playtester = 1;
  data["heat:CaramelisedSugar"] = item;
  item = new( class state_change );
  item->result = "/obj/food/sweets/toffee.food";
  item->factor = 1.0;
  item->func = ({});
  item->playtester = 1;
  data["heat:BrownSugar"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_liquid.ob";
  item->factor = 0.5;
  item->func = ({
  (: $2->set_name("liquid") :),
  (: $2->set_short("cloudy yellowish liquid") :),
  (: $2->set_long("This is a cloudy, yellowish liquid, with faint "
      "traces of red swirls.\n") :),
  (: $2->add_adjective(({ "cloudy", "yellowish", "yellow" })) :)
});
  data["juice:snake left eye"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_liquid.ob";
  item->factor = 0.5;
  item->func = ({
  (: $2->set_name( "juice" ) :),
  (: $2->set_short( "jelly orange juice" ) :),
  (: $2->add_adjective( ({ "jelly", "orange" }) ) :),
  (: $2->set_long( "This is a delicious looking juice that "
      "appears to have been made from juicing up a jelly orange.\n" ) :),
  (: $2->set_medium_alias( "JellyOrangeJuice" ) :),
});
  data["juice:JellyOrange"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_liquid.ob";
  item->factor = 1.0;
  item->func = ({
  (: $2->set_name( "juice" ) :),
  (: $2->set_short( "apple juice" ) :),
        (: $2->set_main_plural( "apple juices" ) :),
        (: $2->add_plural( "juices" ) :),
  (: $2->add_adjective( "apple" ) :),
  (: $2->set_long( "This is some transparent golden-brown "
                  "juice made from apples, "
                  "$amount_size$.\n" ) :),
  (: $2->set_medium_alias( "AppleJuice" ) :),
});
  data["juice:Apple"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_liquid.ob";
  item->factor = 1.0;
  item->func = ({
        (: $2->set_name( "blackheart_juice" ) :),
        (: $2->set_short( "apple juice" ) :),
        (: $2->set_main_plural( "apple juices" ) :),
        (: $2->add_plural( "juices" ) :),
        (: $2->add_alias( "juice" ) :),
        (: $2->add_adjective( "apple" ) :),
        (: $2->set_long( "This is some dark, treacly, "
                        "sweet-smelling apple juice, "
                        "$amount_size$.\n" ) :),
        (: $2->set_medium_alias( "BlackheartJuice" ) :),
});
  data["juice:LancreBlackheart"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_liquid.ob";
  item->factor = 1.0;
  item->func = ({
        (: $2->set_name( "disagreeable_juice" ) :),
        (: $2->set_short( "apple juice" ) :),
        (: $2->set_main_plural( "apple juices" ) :),
        (: $2->add_plural( "juices" ) :),
        (: $2->add_alias( "juice" ) :),
        (: $2->add_adjective( "apple" ) :),
        (: $2->set_long( "This is some thin and watery "
                        "sour-smelling apple juice, "
                        "$amount_size$.\n" ) :),
        (: $2->set_medium_alias( "DisagreeableJuice" ) :),
});
  data["juice:GoldenDisagreeable"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_liquid.ob";
  item->factor = 1.0;
  item->func = ({
        (: $2->set_name( "billet_juice" ) :),
        (: $2->set_short( "apple juice" ) :),
        (: $2->set_main_plural( "apple juices" ) :),
        (: $2->add_plural( "juices" ) :),
        (: $2->add_alias( "juice" ) :),
        (: $2->add_adjective( "apple" ) :),
        (: $2->set_long( "This is some evil coloured, "
                        "bitter-smelling apple juice, "
                        "$amount_size$.\n" ) :),
        (: $2->set_medium_alias( "BilletJuice" ) :),
        (: $2->add_eat_effect( "/std/effects/ingested/nausea", 50 ) :),
});
  data["juice:GreenBillet"] = item;
  item = new( class state_change );
  item->result = "/std/object";
  item->factor = 1.1;
  item->func = ({
        (: $2->set_name("ice") :),
        (: $2->set_short("ice") :),
        (: $2->set_long("This is a chunk of ice.\n") :)
    });
  data["freeze:Water"] = item;
  item = new( class state_change );
  item->result = "/obj/food";
  item->factor = 0.9;
  item->func = ({
      (: $2->set_name( "potato" ) :),
      (: $2->set_short( "peeled potato" ) :),
      (: $2->add_adjective("peeled") :),
      (: $2->set_long( "This is a raw, peeled potato, ready for what next you do.\n" ) :),
      (: $2->set_medium_alias( "PeeledPotato" ) :),
      (: $2->set_decay_speed( 0 ) :)
   });
  data["peel:Potato"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_liquid.ob";
  item->factor = 0.1;
  item->func = ({
      (: $2->set_name( "spider_poison" ) :),
      (: $2->set_short( "pale red liquid" ) :),
      (: $2->add_adjective( ({ "pale", "red", "liquid" }) ) :),
      (: $2->set_long( "This is $amount_size$ of some pale red liquid.\n" ) :),
      (: $2->set_medium_alias( "UndistilledSpiderPoison" ) :),
      (: $2->add_eat_effect( "/std/effects/poisons/spider_venom",
        to_int( $3->query_skill_bonus( "covert.items.poisons" ) / 10 ) ) :),
    });
  data["press:PoisonGlandOfSpider"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_liquid.ob";
  item->factor = 0.1;
  item->func = ({
      (: $2->set_name( "blowfish_poison" ) :),
      (: $2->set_short( "pale brown liquid" ) :),
      (: $2->add_adjective( ({ "pale", "brown", "liquid" }) ) :),
      (: $2->set_long( "This is $amount_size$ of some pale brown liquid.\n" ) :),
      (: $2->set_medium_alias( "UndistilledBlowfishPoison" ) :),
      (: $2->add_eat_effect( "/std/effects/poisons/bloat",
        to_int( $3->query_skill_bonus( "covert.items.poisons" ) / 10 ) ) :),
    });
  data["press:PoisonSacOfBlowfish"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_liquid.ob";
  item->factor = 0.1;
  item->func = ({
      (: $2->set_name( "snake_poison" ) :),
      (: $2->set_short( "thin white liquid" ) :),
      (: $2->add_adjective( ({ "thin", "white", "liquid" }) ) :),
      (: $2->set_long( "This is $amount_size$ of some thin white liquid.\n" ) :),
      (: $2->set_medium_alias( "UndistilledSnakePoison" ) :),
      (: $2->add_eat_effect( "/std/effects/ingested/poison",
        to_int( $3->query_skill_bonus( "covert.items.poisons" ) ) ) :),
    });
  data["press:PoisonSacOfSnake"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 50.0;
  item->func = ({
      (: $2->set_name( "venom" ) :),
      (: $2->set_short( "yellow powder" ) :),
      (: $2->add_alias( "powder" ) :),
      (: $2->add_adjective( "yellow" ) :),
      (: $2->set_long( "This is some yellow powder.\n" ) :),
      (: $2->set_medium_alias( "PoisonVenom" ) :),
      (: $2->add_eat_effect("/std/effects/ingested/cum_poison", 16) :),
      (: $2->add_eat_effect("/std/effects/ingested/basic_healing", 4) :),
      (: $2->set_decay_speed( 0 ) :)
   });
  data["pulverise:Venom"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 50.0;
  item->func = ({
        (: $2->set_name("Catalyst") :),
        (: $2->set_short("white powder") :),
        (: $2->add_alias("powder") :),
        (: $2->add_adjective("white") :),
        (: $2->set_long("This is some white powder.\n") :),
        (: $2->set_medium_alias("PoisonCatalyst") :),
        (: $2->add_eat_effect("/std/effects/ingested/cum_poison", 12) :),
        (: $2->add_eat_effect("/std/effects/ingested/basic_healing", 2) :),
        (: $2->set_decay_speed(0) :)
    });
  data["pulverise:Catalyst"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 50.0;
  item->func = ({
        (: $2->set_name("fang") :),
        (: $2->set_short("black powder") :),
        (: $2->add_alias("powder") :),
        (: $2->add_adjective("black") :),
        (: $2->set_long("This is some black powder.\n") :),
        (: $2->set_medium_alias("PoisonFang") :),
        (: $2->set_decay_speed(0) :)
    });
  data["pulverise:Fang"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 50.0;
  item->func = ({
        (: $2->set_name("leaf") :),
        (: $2->set_short("green powder") :),
        (: $2->add_alias("powder") :),
        (: $2->add_adjective("green") :),
        (: $2->set_long("This is some green powder.\n") :),
        (: $2->set_medium_alias("PoisonLeaf") :),
        (: $2->set_decay_speed(0) :)
    });
  data["pulverise:Leaf"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/sulphur_powder.ob";
  item->factor = 10.0;
  item->func = ({});
  data["pulverise:SulphurBlock"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_liquid.ob";
  item->factor = 1.0;
  item->func = ({
   (: $2->set_name("alexander") :),
   (: $2->set_short("brandy Alexander") :),
   (: $2->add_adjective( "brandy" ) :),
   (: $2->add_alias( ({ "brandy", "cocktail" }) ) :),
   (: $2->set_long("A creamy brandy Alexander cocktail, full "
             "of brandy, cream and chocolate liqueur goodness.  "
             "It looks perfect.\n") :),
   (: $2->add_eat_effect( "/std/effects/ingested/drunk", 800 ) :),
   (: $2->set_medium_alias( "BrandyAlexander" ) :)
});
  data["shake:UnshakenBrandyAlexander"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_liquid.ob";
  item->factor = 1.0;
  item->func = ({
   (: $2->set_name( "cosmopilitian" ) :),
   (: $2->set_short( "Cosmopilitian" ) :),
   (: $2->add_alias( "cocktail" ) :),
   (: $2->set_long( "The perfect Cosmopilitian cocktail.  For "
             "is it not written, \"Things always look better "
             "through the bottom of an empty glass.\"?\n" ) :),
   (: $2->add_eat_effect( "/std/effects/ingested/drunk", 800 ) :),
   (: $2->set_medium_alias( "Cosmopilitian" ) :),
});
  data["shake:UnshakenCosmopilitian"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_liquid.ob";
  item->factor = 1.0;
  item->func = ({
   (: $2->set_name( "morporkian" ) :),
   (: $2->set_short( "Morporkian" ) :),
   (: $2->add_alias( "cocktail" ) :),
   (: $2->set_long( "The perfect Morporkian, in drink form.  "
             "This drink does not contain blood, vomit or "
             "sharp knives.\n" ) :),
   (: $2->add_eat_effect( "/std/effects/ingested/drunk", 800 ) :),
   (: $2->set_medium_alias( "Morporkian" ) :),
});
  data["shake:UnshakenMorporkian"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_liquid.ob";
  item->factor = 1.0;
  item->func = ({
   (: $2->set_name( "carriage" ) :),
   (: $2->set_short( "Sidecarriage" ) :),
   (: $2->add_alias( "cocktail" ) :),
   (: $2->add_adjective( "side" ) :),
   (: $2->set_long( "A Sidecarriage cocktail, just "
             "the drink for a smooth ride.\n" ) :),
   (: $2->add_eat_effect( "/std/effects/ingested/drunk", 800 ) :),
   (: $2->set_medium_alias( "SideCarriage" ) :),
});
  data["shake:UnshakenSideCarriage"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_liquid.ob";
  item->factor = 1.0;
  item->func = ({
   (: $2->set_name( "daiquiri" ) :),
   (: $2->set_short( "Bananana Daiquiri" ) :),
   (: $2->add_alias( "cocktail" ) :),
   (: $2->add_adjective( "bananana" ) :),
   (: $2->set_long( "Mmm, full of mon... ape-y goodness.\n" ) :),
   (: $2->add_eat_effect( "/std/effects/ingested/drunk", 800 ) :),
   (: $2->set_medium_alias( "BananaDaiquiri" ) :),
});
  data["shake:UnshakenBananaDaiquiri"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_liquid.ob";
  item->factor = 1.0;
  item->func = ({
   (: $2->set_name( "lady" ) :),
   (: $2->set_short( "Shady Lady" ) :),
   (: $2->add_alias( "cocktail" ) :),
   (: $2->add_adjective( "shady" ) :),
   (: $2->set_long( "An Shady Lady.  For some reason, this "
                  "cocktail seems a little... distasteful, even though "
                  "it smells delicious.\n" ) :),
   (: $2->add_eat_effect( "/std/effects/ingested/drunk", 800 ) :),
   (: $2->set_medium_alias( "ShadyLady" ) :),
});
  data["shake:UnshakenShadyLady"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_liquid.ob";
  item->factor = 1.0;
  item->func = ({
   (: $2->set_name( "dwarf" ) :),
   (: $2->set_short( "Well Greased Dwarf" ) :),
   (: $2->add_alias( "cocktail" ) :),
   (: $2->add_adjective( ({ "well", "greased" }) ) :),
   (: $2->set_long( "An Well Greased Dwarf.  The cocktail "
                  "seems short, dark and likely to put you in a vile "
                  "temper.\n" ) :),
   (: $2->add_eat_effect( "/std/effects/ingested/drunk", 800 ) :),
   (: $2->set_medium_alias( "WellGreasedDwarf" ) :),
});
  data["shake:UnshakenWellGreasedDwarf"] = item;
}
mixed data_return_3() {
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 1.0;
  item->func = ({
      (: $2->set_name( "carrot" ) :),
      (: $2->set_short( "sliced carrot" ) :),
      (: $2->add_adjective( "sliced" ) :),
      (: $2->set_long( "This is some sliced carrots, little "
            "orange rings around lighter orange circles.\n" ) :),
      (: $2->set_medium_alias( "SlicedCarrot" ) :),
      (: $2->set_decay_speed( 0 ) :)
   });
  data["slice:Carrot"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 1.0;
  item->func = ({
        (: $2->set_name("cabbage") :),
        (: $2->set_short("shredded cabbage") :),
        (: $2->add_adjective("shredded") :),
        (: $2->set_long("This is some shredded cabbage.  "
             "Hopefully, not a sentinent one.\n") :),
        (: $2->set_medium_alias("GroundCabbage") :),
        (: $2->set_decay_speed(0) :)
    });
  data["slice:Cabbage"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 1.0;
  item->func = ({
      (: $2->set_name( "rhubarb" ) :),
      (: $2->set_short( "sliced rhubarb" ) :),
      (: $2->add_adjective( "sliced" ) :),
      (: $2->set_long( "This is some sliced rhubarb, sweet little chunks "
          "perfect for a nice pie.\n" ) :),
      (: $2->set_medium_alias( "SlicedRhubarb" ) :),
      (: $2->set_decay_speed( 0 ) :)
   });
  data["slice:Rhubarb"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 1.0;
  item->func = ({
      (: $2->set_name( "onion" ) :),
      (: $2->set_short( "sliced onion" ) :),
      (: $2->add_adjective( "sliced" ) :),
      (: $2->set_long( "This is some finely sliced onions.  How very sad...  "
             "could make a bloke break down and sob...\n" ) :),
      (: $2->set_medium_alias( "SlicedOnion" ) :),
      (: $2->set_decay_speed( 0 ) :)
   });
  data["slice:Onion"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 1.0;
  item->func = ({
      (: $2->set_name( "parsnip" ) :),
      (: $2->set_short( "sliced parsnip" ) :),
      (: $2->add_adjective( "sliced" ) :),
      (: $2->set_long( "This is some parsnip slices, white and hot.\n" ) :),
      (: $2->set_medium_alias( "SlicedParsnip" ) :),
      (: $2->set_decay_speed( 0 ) :)
   });
  data["slice:Parsnip"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 1.0;
  item->func = ({
      (: $2->set_name( "tomato" ) :),
      (: $2->set_short( "sliced tomato" ) :),
      (: $2->add_adjective( "sliced" ) :),
      (: $2->set_long( "This is some sliced tomato, perfect for a sandwich, "
          "but needing more slicing for other purposes.\n" ) :),
      (: $2->set_medium_alias( "SlicedTomato" ) :),
      (: $2->set_decay_speed( 0 ) :)
   });
  data["slice:Tomato"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 1.0;
  item->func = ({
      (: $2->set_name( "tomato" ) :),
      (: $2->set_short( "chopped tomato" ) :),
      (: $2->add_adjective( "chopped" ) :),
      (: $2->set_long( "This is some chopped tomato, suitable for cooking.\n" ) :),
      (: $2->set_medium_alias( "ChoppedTomato" ) :),
      (: $2->set_decay_speed( 0 ) :)
   });
  data["slice:SlicedTomato"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 1.0;
  item->func = ({
      (: $2->set_name( "potato" ) :),
      (: $2->set_short( "potato chunks" ) :),
      (: $2->add_alias(({"potato chunks", "potato chunk", "chunk", "chunks"})) :),
      (: $2->set_long( "These are some potato chunks.  They could do with "
          "some cooking ere they are eaten.\n" ) :),
      (: $2->set_medium_alias( "PotatoChunks" ) :),
      (: $2->set_decay_speed( 0 ) :)
   });
  data["slice:PeeledPotato"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 1.0;
  item->func = ({
      (: $2->set_name( "celery" ) :),
      (: $2->set_short( "sliced celery" ) :),
      (: $2->add_adjective( "sliced" ) :),
      (: $2->set_long( "This is some sliced celery, perfect for a nice "
          "soup or stew.\n" ) :),
      (: $2->set_medium_alias( "SlicedCelery" ) :),
      (: $2->set_decay_speed( 0 ) :)
   });
  data["slice:Celery"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 1.0;
  item->func = ({
      (: $2->set_name( "radish" ) :),
      (: $2->set_short( "sliced radish" ) :),
      (: $2->add_adjective( "sliced" ) :),
      (: $2->set_long( "This is some sliced radish, the decorative vegetable.\n" ) :),
      (: $2->set_medium_alias( "SlicedRadish" ) :),
      (: $2->set_decay_speed( 0 ) :)
   });
  data["slice:Radish"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 1.0;
  item->func = ({
      (: $2->set_name( "cucumber" ) :),
      (: $2->set_short( "cucumber slices" ) :),
      (: $2->add_alias(({"cucumber slices", "cucumber slice", "slice", "slices"})) :),
      (: $2->add_adjective( "sliced" ) :),
      (: $2->set_long( "These are the remains of a once mighty cucumber, now sliced.  "
          "Tis a great pity.\n" ) :),
      (: $2->set_medium_alias( "SlicedCucumber" ) :),
      (: $2->set_decay_speed( 0 ) :)
   });
  data["slice:Cucumber"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 1.0;
  item->func = ({
      (: $2->set_name( "apple" ) :),
      (: $2->set_short( "sliced apple" ) :),
      (: $2->add_adjective( "sliced" ) :),
      (: $2->set_long( "This is some sliced apple, sweet and delicious.\n" ) :),
      (: $2->set_medium_alias( "SlicedApple" ) :),
      (: $2->set_decay_speed( 0 ) :)
   });
  data["slice:Apple"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 1.0;
  item->func = ({
      (: $2->set_name( "banana" ) :),
      (: $2->set_short( "sliced banana" ) :),
      (: $2->add_adjective( "sliced" ) :),
      (: $2->set_long( "This is some sliced banana.  It would go "
           "down a treat on buttered toast.\n" ) :),
      (: $2->set_medium_alias( "SlicedBanana" ) :),
      (: $2->set_decay_speed( 0 ) :)
   });
  data["slice:Banana"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_ore.ob";
  item->factor = 0.75;
  item->func = ({
        (: $2->set_name("ore") :),
        (: $2->set_short("refined iron ore") :),
        (: $2->add_adjective(({"refined", "iron"})) :),
        (: $2->set_long("This is $pile_size$ of refined iron ore, "
                        "$amount_size$.\n" ) :),
        (: $2->set_material("refined iron ore") :),
        (: $2->set_material("refined iron ore") :),
        (: $2->set_medium_alias("RefinedIronOre") :)
    });
  data["smelt:RedHotRawIronOre"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_ore.ob";
  item->factor = 0.75;
  item->func = ({
        (: $2->set_name("bloom") :),
        (: $2->set_short("pig of iron bloom") :),
        (: $2->add_adjective(({"pig", "of", "iron"})) :),
        (: $2->add_property("determinate", "a ") :),
        (: $2->add_alias("pig") :),
        (: $2->add_alias("iron") :),
        (: $2->set_material("iron bloom") :),
        (: $2->set_long("This is a lump of crude iron.\n") :),
        (: $2->set_medium_alias("IronBloom") :),
        (: $2->reset_continuous() :)
    });
  data["smelt:RedHotRefinedIronOre"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_ore.ob";
  item->factor = 0.5;
  item->func = ({
        (: $2->set_name("ingot") :),
        (: $2->set_short("wrought iron ingot") :),
        (: $2->add_adjective(({"wrought", "iron"})) :),
        (: $2->add_property("determinate", "a ") :),
        (: $2->add_alias("iron") :),
        (: $2->set_material("wrought iron") :),
        (: $2->set_long("This is an ingot of wrought iron.\n") :),
        (: $2->set_medium_alias("WroughtIron") :),
        (: $2->reset_continuous() :)
    });
  data["hammer:RedHotIronBloom"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 1.0;
  item->func = ({ (:
   $2->set_decay_speed(0),
   $2->set_medium_alias( "SmokeCrystals" ),
   $2->set_name( "smoke_crystal" ),
   $2->set_short( "tiny gray crystals" ),
   $2->set_main_plural( "tiny gray crystals" ),
   $2->set_weight_unit( ({ 1, 50 }) ),
   $2->add_alias( ({ "crystal", "crystals" }) ),
   $2->add_adjective( ({ "tiny", "gray" }) ),
   $2->set_long( "This is $pile_size$ of tiny, dark gray crystals, "
     "$amount_size$.  The individual crystals catch the light on "
     "their facets, and the pile seems to swirl, like smoke.\n" )
:) });
  data["grind:SmokeRock"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 1.0;
  item->func = ({ (:
   $2->set_decay_speed(0),
   $2->set_medium_alias( "CoatedSmokeCrystals" ),
   $2->set_name( "coated_smoke_crystals" ),
   $2->add_alias( "crystals" ),
   $2->set_short( "powdery black crystals" ),
   $2->add_adjective( ({ "powdery", "black" }) ),
   $2->set_long( "This is $pile_size$ of black crystals, about "
     "$amount_size$.  The crystals are covered in fine black powder.\n" )
:) });
  data["air-dry:DampCoatedSmokeCrystals"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_solid.ob";
  item->factor = 1.0;
  item->func = ({ (:
   $2->set_decay_speed(0),
   $2->set_medium_alias( "InertSmokeCrystals" ),
   $2->set_name( "inert_smoke_crystals" ),
   $2->add_alias( "crystals" ),
   $2->set_short( "powdery black crystals" ),
   $2->add_adjective( ({ "powdery", "black" }) ),
   $2->set_long( "This is $pile_size$ of black crystals, about "
     "$amount_size$.  The crystals are covered in fine black powder.\n" )
:) });
  data["air-dry:DampInertSmokeCrystals"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/water.ob";
  item->factor = 1.0;
  item->func = ({});
  data["steep:Water"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_liquid.ob";
  item->factor = 1.0;
  item->func = ({
      (: $2->set_name( "liquid" ) :),
      (: $2->set_short( "darker milky acrid liquid" ) :),
      (: $2->add_adjective( ({ "darker", "milky", "acrid", "liquid" }) ) :),
      (: $2->set_long( "This is $amount_size$ of some darker milky acrid liquid.\n" ) :),
      (: $2->set_medium_alias( "SteepedCereus" ) :),
    });
  data["steep:CereusTea"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/generic_liquid.ob";
  item->factor = 1.0;
  item->func = ({
      (: $2->set_name( "liquid" ) :),
      (: $2->set_short( "dark azure liquid" ) :),
      (: $2->add_adjective( ({ "dark", "azure", "liquid" }) ) :),
      (: $2->set_long( "This is $amount_size$ of some dark azure liquid.\n" ) :),
      (: $2->set_medium_alias( "SteepedSkullcap" ) :),
    });
  data["steep:SkullcapTea"] = item;
  item = new( class state_change );
  item->result = "/obj/reagents/intelligence_tea.ob";
  item->factor = 0.8;
  item->func = ({
    (: $2->add_eat_effect( "/std/effects/ingested/int_bonus" ) :)
  });
  data["featherstir:SageTea"] = item;
  item = new( class state_change );
  item->result = "/obj/food/grains/wheat_berry.food";
  item->factor = 8;
  item->func = ({ });
  data["thresh:Wheat"] = item;
}
mixed data_return() {
  data_return_0();
  data_return_1();
  data_return_2();
  data_return_3();
  return data;
}
