# Total Tokens: 12493
# Total Files Merged: 29
# Total Characters: 41724

nitures/misc/newspaper_box.c
==================================================

inherit "/std/room/furniture/storage";
#include <room/newspaper.h>
#include <move_failures.h>
#include <housing.h>
#include <player_handler.h>
void check_for_new_papers();
void set_paper( string _paper );
void set_issues_left( int _issues );
void set_international( int value );
void set_last_issue( int _issue );
mapping query_dynamic_auto_load();
varargs void init_dynamic_arg( mapping map, object thing );
int query_last_issue();
int query_international();
int query_issues_left();
string query_paper();
private string _paper = "a given newspaper";
private int _last_issue = 0;
private int _issues_left = 1;
private int _international = 0;
void setup() {
   set_name( "box" );
   set_short( "newspaper box" );
   add_adjective( "newspaper" );
   set_long( "It's a large box impregnated with an oil designed to attract "
             "delivery-imps.\n" );
   set_allowed_positions( ({ "hanging", "standing" }) );
   set_allowed_room_verbs( ([ "standing": "stands", "hanging": "hangs" ]) );
   add_extra_look( this_object() );
   set_weight( 100 );
   set_max_weight( 300 );
   set_value( 10000 );
   set_open();
   set_stuck( 1 );
   call_out( "check_for_new_papers", 5 );
}
string extra_look() {
   if( !_paper || _paper == "a given newspaper" ) {
      return "The variables of this newspaper box are broken.  Please ask a "
             "creator to re-set them.\n";
   };
   return "This particular one works for " + _paper + ".\n";
}
void check_for_new_papers() {
   object newspaper;
   object room = environment( this_object() );
   int i, x, latest_issue;
   int* editions_bought;
   string name;
   if( !is_placed() && _issues_left > 0 ) {
      call_out( "check_for_new_papers", 3600 );
      return;
   };
   if( ( _international == 0 &&
         member_array( _paper, NEWSPAPER_HANDLER->query_papers_in_area(
           HOUSING->query_region( file_name( room ) ) ) ) != -1 ) ||
       ( _international == 1 &&
         member_array( _paper, NEWSPAPER_HANDLER->query_all_papers() ) != -1 ) ){
      latest_issue = NEWSPAPER_HANDLER->query_last_edition_num( _paper );
      name = environment( this_object() )->query_owner();
      if( latest_issue > _last_issue ) {
         tell_room( room,
                    "A " + ({"red", "green", "purple", "blue", "yellow",
                             "drunk", "smelly", "large", "tiny"})[random(9)] +
                    " imp rushes in with some newpapers in its hands and "
                      "disappears in the box.\n" );
         x = latest_issue - _last_issue;
         for( i = 0; i < x; i++ ) {
            newspaper = clone_object( NEWSPAPER_OB );
            newspaper->set_paper( _paper );
            newspaper->set_edition( _last_issue + 1 );
            if( !newspaper->move( this_object() ) == MOVE_OK ) {
               tell_room( room,
                          "Something in the box curses and a newspaper is "
                          "thrown to the floor from inside it.\n" );
               newspaper->move( room );
            };
            _last_issue++;
            _issues_left--;
            editions_bought = PLAYER_HANDLER->test_property( name, "Paper " +
                                                              _paper );
            if( !editions_bought ) {
               editions_bought = ({ });
            };
            if( member_array( _last_issue + 1, editions_bought ) == -1 ) {
               editions_bought += ({ _last_issue });
               PLAYER_HANDLER->special_add_property( name,
                 "Paper " + _paper, editions_bought );
               NEWSPAPER_HANDLER->add_edition_paper_sold( _paper,
                  _last_issue + 1,
                  NEWSPAPER_HANDLER->query_paper_cost( _paper ) );
            } else {
               NEWSPAPER_HANDLER->add_edition_revenue( _paper, _last_issue + 1,
                  NEWSPAPER_HANDLER->query_paper_cost( _paper ) );
            };
            tell_room( room,
                       "You hear some " + ({"giggling", "ranting", "quacking",
                                            "thumping", "cursing", "swearing",
                                            "snickering"})[random(7)] +
                       " emerging, the imp jumps out and runs off again.\n" );
         };
      };
   };
   if( _issues_left == 0 ) {
      set_long( query_long() +
                "It appears the imp-bait is no longer working.\n" );
   } else {
      call_out( "check_for_new_papers", 3600 );
   };
}
void set_paper( string new_paper ) {
   _paper = new_paper;
}
void set_issues_left( int _issues ) {
   _issues_left = _issues;
}
void set_last_issue( int _issue ) {
   _last_issue = _issue;
}
mapping query_dynamic_auto_load() {
   return ([
            "::": ::query_dynamic_auto_load(),
            "_paper": _paper,
            "_issues_left": _issues_left,
            "_last_issue": _last_issue,
            "_international": _international
        ]);
}
varargs void init_dynamic_arg( mapping map, object thing ) {
   if( map[ "::" ] && thing ) {
      ::init_dynamic_arg( map[ "::" ], thing );
   } else if( map[ "::" ] ) {
      ::init_dynamic_arg( map[ "::" ] );
   };
   if( map[ "_paper" ] ) {
      set_paper( map[ "_paper" ] );
   };
   if( map[ "_issues_left" ] ) {
      set_issues_left( map[ "_issues_left" ] );
   };
      if( map[ "_last_issue" ] ) {
      set_last_issue( map[ "_last_issue" ] );
   };
      if( map[ "_international" ] ) {
      set_international( map[ "_international" ] );
   };
}
int query_last_issue() {
   return _last_issue;
}
int query_issues_left() {
   return _issues_left;
}
int query_international() {
   return _international;
}
string query_paper() {
   return _paper;
}
void set_international( int i ) {
   _international = i;
}

==================================================
FILE: /lib/obj/furnitures/misc/peony_fishbowl.c
==================================================

inherit "/std/room/furniture/basic";
void setup() {
    set_name( "fishbowl" );
    set_short( "gold-leafed peony fishbowl" );
    add_adjective( ({ "gold", "leafed", "leaf", "gold-leaf", "gold-leafed",
        "peony" }) );
    add_plural( ({ "bowls", "fishbowls" }) );
    add_alias("bowl");
    set_long( "Richly designed with blooming peonies, the flower that "
        "symbolizes peace and prosperity in Agatean culture, this grand "
        "16-inch fishbowl is carefully hand-layered with gold leaf over "
        "porcelain and hand-painted in exuberant colors.  This fishbowl "
        "matches any kind of foliage or simply stands alone as an art "
        "object.  Resting on a beautiful hand-polished rosewood base, "
        "the shapes of several goldfish can be seen swishing back and "
        "forth beneath the water it holds.\n" );
  set_weight( 110 );
  set_value( 51000 );
  set_allowed_positions(({"sitting"}));
  set_allowed_room_verbs((["sitting" : "sits",
                           "standing" : "stands",
                           "leaning" : "leans",
                           "lying" : "lies",
                           "squatting" : "squats" ]));
}

==================================================
FILE: /lib/obj/furnitures/misc/platinum_gong.c
==================================================

inherit "/std/room/furniture/basic";
void setup() {
    set_name("gong");
    set_short("platinum gong");
    add_adjective( "platinum" );
    set_long("This is a smallish platinum gong, hanging from a platinum "
        "frame.  Leaping lions writhe around each other on the "
        "surface of the disc, showing their teeth as they "
        "run across the etchings.  The gong can be hit to make a "
        "loud ringing sound and annoy everyone in the room.\n");
    set_weight( 30 );
    set_value( 28000 );
    set_material( "platinum" );
    set_allowed_positions( ({"hanging"}) );
    set_allowed_room_verbs((["hanging" : "hangs",
                             "sitting" : "sits",
                             "dangling" : "dangles",
                             "standing" : "stands" ]));
}
void init() {
    this_player()->add_command( "hit", this_object(), "<direct:object:me>" );
}
int do_hit(){
    this_player()->add_succeeded_mess(this_object(), "$N $V $p "
        +this_object()->short()+" loudly, filling the room with a "
        "deafening ringing sound.\n", ({ }));
    return 1;
}

==================================================
FILE: /lib/obj/furnitures/misc/samurai_screen.c
==================================================

inherit "/std/room/furniture/basic";
void setup() {
    set_name( "screen" );
    set_short( "rice paper samurai screen" );
    add_adjective( ({ "rice", "paper", "samurai" }) );
    set_long("This is a simple screen that would fit in most traditional "
        "homes.  A stoic samurai in full traditional Agatean armour and "
        "dress storms across the panelling, hand-drawn in shades of orange, "
        "blue, brown, cream and black.  The frame is made "
        "of a strange combination of walnut and spruce woods, their "
        "differing colours blending well with the shades of the panels.\n");
    set_allowed_positions( ({ "standing", "sitting" }) );
    set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
    set_weight(150);
    set_value(329000);
}

==================================================
FILE: /lib/obj/furnitures/misc/satsuma_fishbowl.c
==================================================

inherit "/std/room/furniture/basic";
void setup() {
    set_name( "fishbowl" );
    set_short( "satsuma fishbowl" );
    add_adjective( ({ "satsuma" }) );
    add_alias("bowl");
    add_plural( ({ "bowls", "fishbowls" }) );
    set_long("Learning is regarded the highest virtue in Agatean "
        "culture.  The picture on this "
        "fishbowl depicts a group of scholars in a session of discussion.  "
        "This fishbowl is made of porcelain and hand-painted with dark-green "
        "lacquer.  On top of the lacquer gold threads are woven in "
        "decorative design.  One intriguing detail about this particular  "
        "fishbowl is that thousands of tiny dots are meticulously painted "
        "one by one over the entire 16-inch fishbowl.  The interior is an "
        "underwater scene of gold fish swimming in circular along the edge "
        "of the bowl.  Resting on a beautiful hand-polished mahogany base, "
        "the shapes of several goldfish can be seen swishing back and "
        "forth beneath the water it holds.\n" );
    set_weight( 110 );
    set_value( 56000 );
    set_allowed_positions(({"sitting"}));
    set_allowed_room_verbs(([ "sitting" : "sits",
                              "standing" : "stands",
                              "leaning" : "leans",
                              "lying" : "lies",
                              "squatting" : "squats" ]));
}

==================================================
FILE: /lib/obj/furnitures/misc/silver_gong.c
==================================================

inherit "/std/room/furniture/basic";
void setup() {
    set_name("gong");
    set_short("silver gong");
    add_adjective( "silver" );
    set_long("This is a smallish silver gong, hanging from a silver "
        "frame.  Tiny goldfish swim around each other on the "
        "surface of the disc, nipping each others' tails as they "
        "go.  The gong can be hit to make a loud ringing "
        "sound and annoy everyone in the room.\n");
    set_weight( 40 );
    set_value( 22000 );
    set_material( "silver" );
    set_allowed_positions( ({"hanging"}) );
    set_allowed_room_verbs((["hanging" : "hangs",
                             "sitting" : "sits",
                             "dangling" : "dangles",
                             "standing" : "stands" ]));
}
void init() {
    this_player()->add_command( "hit", this_object(), "<direct:object:me>" );
}
int do_hit(){
    this_player()->add_succeeded_mess(this_object(), "$N $V $p "
        +this_object()->short()+" loudly, filling the room with a "
        "deafening ringing sound.\n", ({ }));
    return 1;
}

==================================================
FILE: /lib/obj/furnitures/misc/small_stove.c
==================================================

inherit "/std/room/furniture/surface";
void setup() {
  set_name("stove");
  set_short("small stove");
  add_adjective("small");
  set_long("This is a small stove.\n");
  set_allowed_room_verbs(([
    "sitting" : "sits",
    "squatting" : "squats",
  ]));
  set_weight(495);
  set_max_weight(45);
  set_value(8000);
}

==================================================
FILE: /lib/obj/furnitures/misc/spruce_screen.c
==================================================

inherit "/std/room/furniture/basic";
void setup() {
    set_name( "screen" );
    set_short( "double cross spruce screen" );
    add_adjective( ({ "double", "cross", "spruce" }) );
    set_long( "This double-sided screen has been constructed by "
        "lashing pairs of long spruce strips together so that "
        "three distinct interconnected panels are hinged "
        "together when it is standing.  The frame, decorated with "
        "criss-crossed pairs of spruce poles, is covered by a "
        "thin layer of rice paper that breaks up light and "
        "sheds a warm glow on a room when a lamp is placed behind it.\n");
    set_allowed_positions( ({ "standing", "sitting" }) );
    set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
    set_weight(150);
    set_value(400000);
}

==================================================
FILE: /lib/obj/furnitures/misc/sung_umbrella_stand.c
==================================================

inherit "/std/room/furniture/storage";
void setup() {
    set_name("stand");
    set_short("Sung umbrella stand");
    add_adjective( ({ "Sung", "umbrella" }) );
    set_long("This is a conical umbrella stand that raises itself up in an "
        "smooth-sided cylinder.  Often placed by front doors to house the "
        "clothing accessories that are most-loathed, this particular "
        "stand has been lacquered with several shades of gold, red, blue, "
        "green and cream and depicts the Sung Estate as it is seen from the "
        "banks of the Pearl River in the Sum Bing district of Bes Pelargic.  "
        "Several white ceramic lions border the estate, guarding it and "
        "bestowing several thousand years of good luck upon its "
        "inhabitants.\n");
    set_open();
    set_stuck(1);
    set_weight(90);
    set_max_weight(55);
    set_value(51000);
    set_allowed_room_verbs( ([ "squatting" : "squats",
                               "resting" : "rests",
                               "sitting" : "sits",
                               "standing" : "stands" ]) );
}

==================================================
FILE: /lib/obj/furnitures/misc/textured_leaf_screen.c
==================================================

inherit "/std/room/furniture/basic";
void setup() {
    set_name( "screen" );
    set_short( "textured leaf screen" );
    add_adjective( ({ "textured", "leaf" }) );
    set_long( "This beautiful screen has a lovely honey oak frame which "
        "pales in comparison to the panelling it holds.  Three textured rice "
        "paper panels, each divided into six vertical segments, sit "
        "in the hinged frame, each one handpainted in "
        "watercolours with a tan leaf design.  The frame is "
        "double-hinged so it can bend both backwards and forward to suit "
        "its placement, and the rice paper panelling has been ribbed with "
        "matchstick-like strings of wood to give it more support. \n");
    set_allowed_positions( ({ "standing", "sitting" }) );
    set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
    set_weight(150);
    set_value(290000);
}

==================================================
FILE: /lib/obj/furnitures/misc/tiny_gong.c
==================================================

inherit "/std/room/furniture/basic";
void setup() {
    set_name("gong");
    set_short("tiny brass gong");
    add_adjective( ({ "tiny", "brass" }) );
    set_long("This is a tiny brass gong, which hangs from an equally "
        "tiny frame.  Fluttering butterflies flit around each other on the "
        "disc, flying aimlessly across its smooth "
        "surface.  The gong can be hit to make a loud ringing "
        "sound and annoy everyone in the room.\n");
    set_weight( 20 );
    set_value( 15000 );
    set_material( "brass" );
    set_allowed_positions( ({"hanging"}) );
    set_allowed_room_verbs((["hanging" : "hangs",
                             "sitting" : "sits",
                             "dangling" : "dangles",
                             "standing" : "stands" ]));
}
void init() {
    this_player()->add_command( "hit", this_object(), "<direct:object:me>" );
}
int do_hit(){
    this_player()->add_succeeded_mess(this_object(), "$N $V $p "
        +this_object()->short()+" loudly, filling the room with a"
        " tiny tinkling chime.\n", ({ }));
    return 1;
}

==================================================
FILE: /lib/obj/furnitures/misc/waterbuffalo_dung.c
==================================================

inherit "/std/room/furniture/fuel_inherit";
void setup() {
  set_name("dung");
  set_shorts( ({ "small lump of dried waterbuffalo dung",
                 "slightly burnt lump of waterbuffalo dung",
                 "blackened lump of waterbuffalo dung",
                 "black, charred lump of dung" }) );
  set_longs( ({
    "This is a small lump of dried waterbuffalo dung.  It looks as "
        "though it would burn well.\n",
    "This is a small lump of dried waterbuffalo dung.  It has been "
        "charred around the edges but would still burn for a while yet.\n",
    "This is a black lump of charred dung, which is barely able to still "
        "hold itself together.\n" }) );
  set_weight( 9 );
  set_value( 200 );
}

==================================================
FILE: /lib/obj/weapons/knives/.black_handled_ceremonial_bronze_knife.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/black_handled_ceremonial_bronze_knife.wep#1" );
  call_other( clone, "set_name", "knife"  );
  call_other( clone, "set_short", "black handled ceremonial bronze knife"  );
  call_other( clone, "add_adjective", ({ "black", "handled", "ceremonial", "bronze" })  );
  call_other( clone, "set_main_plural", "black handled ceremonial bronze knives"  );
  call_other( clone, "add_plural", "knives"  );
  call_other( clone, "set_long", "This is a ceremonial knife, for use in magic rituals.  Its ornate handle is made of ebony and its long bronze blade has been carved with mystic runes.\n"  );
  call_other( clone, "set_weight", 11  );
  call_other( clone, "set_length", 13  );
  call_other( clone, "set_width", 4  );
  call_other( clone, "set_material", "copper"  );
  call_other( clone, "set_value", 1000  );
  call_other( clone, "new_weapon", 2000  );
  call_other( clone, "add_attack", "slash", 70, ({ 10, 2, 20 }), "sharp", "sharp", 0  );
  call_other( clone, "add_attack", "stab", 40, ({ 20, 2, 60 }), "pierce", "pierce", 0 );
   return clone;
}

==================================================
FILE: /lib/obj/weapons/knives/.carving_knife.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/carving_knife.wep#1" );
  call_other( clone, "set_name", "knife"  );
  call_other( clone, "set_short", "carving knife"  );
  call_other( clone, "add_adjective", ({ "carving" })  );
  call_other( clone, "add_alias", "utensil"  );
  call_other( clone, "add_plural", "utensils"  );
  call_other( clone, "set_long", "This is a knife such as you might use to carve up your Octeday roast, and then use to substantiate your arguments with your spouse as to who should do the washing up.\n"  );
  call_other( clone, "set_weight", 9  );
  call_other( clone, "set_length", 12  );
  call_other( clone, "set_width", 2  );
  call_other( clone, "set_material", "steel"  );
  call_other( clone, "set_value", 500  );
  call_other( clone, "new_weapon", 2000  );
  call_other( clone, "add_attack", "slash", 70, ({ 10, 2, 20 }), "sharp", "sharp", 0  );
  call_other( clone, "add_attack", "stab", 40, ({ 20, 2, 60 }), "pierce", "pierce", 0 );
   return clone;
}

==================================================
FILE: /lib/obj/weapons/knives/.chisel.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/chisel.wep#1" );
  call_other( clone, "set_name", "chisel"  );
  call_other( clone, "set_short", "chisel"  );
  call_other( clone, "set_long", "This is a tool with a sharp edge which is used to shape and cut metal, wood, or stone.\n"  );
  call_other( clone, "set_weight", 11  );
  call_other( clone, "set_length", 6  );
  call_other( clone, "set_width", 3  );
  call_other( clone, "set_material",  "steel"  );
  call_other( clone, "set_value", 300  );
  call_other( clone, "new_weapon", 19200  );
  call_other( clone, "set_damage_chance", 5  );
  call_other( clone, "add_attack", "slash", 30, ({ 10, 3, 10 }), "sharp", "sharp", 0  );
  call_other( clone, "add_attack", "stab", 30, ({ 10, 3, 10 }), "pierce", "pierce", 0 );
   return clone;
}

==================================================
FILE: /lib/obj/weapons/knives/.copper_fighting_knife.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/copper_fighting_knife.wep#1" );
  call_other( clone, "set_name", "knife"  );
  call_other( clone, "set_short", "copper fighting knife"  );
  call_other( clone, "set_main_plural", "copper fighting knives"  );
  call_other( clone, "add_adjective", ({ "copper", "fighting" })  );
  call_other( clone, "set_long", "This Djelian copper knife is designed for fighting.  Its straight blade and hilt are undecorated, clean and functional.\n"  );
  call_other( clone, "set_weight", 9  );
  call_other( clone, "set_length", 10  );
  call_other( clone, "set_width", 2  );
  call_other( clone, "set_material", "copper"  );
  call_other( clone, "set_value", 180  );
  call_other( clone, "new_weapon", 32000  );
  call_other( clone, "add_attack", "slash", 100, ({ 10, 5, 15 }), "sharp", "sharp"  );
  call_other( clone, "add_attack", "stab", 50, ({ 10, 2, 20 }), "pierce", "pierce" );
   return clone;
}

==================================================
FILE: /lib/obj/weapons/knives/.dagger.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/dagger.wep#1" );
  call_other( clone, "set_name", "dagger"  );
  call_other( clone, "set_short", "dagger"  );
  call_other( clone, "add_adjective", ({ })  );
  call_other( clone, "add_alias", ({ })  );
  call_other( clone, "add_plural", ({ "daggers" })  );
  call_other( clone, "set_long",  "This is a largish looking knife.\n"  );
  call_other( clone, "set_material", "steel"  );
  call_other( clone, "set_weight", 10  );
  call_other( clone, "set_length", 11  );
  call_other( clone, "set_width", 2  );
  call_other( clone, "set_value",  200  );
  call_other( clone, "new_weapon", 12800  );
  call_other( clone, "set_damage_chance", 5  );
  call_other( clone, "add_attack", "slash", 75, ({ 10, 5, 15 }), "sharp", "sharp"  );
  call_other( clone, "add_attack", "stab", 50, ({ 10, 2, 25 }), "pierce", "pierce" );
   return clone;
}

==================================================
FILE: /lib/obj/weapons/knives/.howondalandish_throwing_knife.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/howondalandish_throwing_knife.wep#1" );
  call_other( clone, "set_name", "knife"  );
  call_other( clone, "add_adjective", ({ "howondalandish", "throwing" })  );
  call_other( clone, "set_short", "howondalandish throwing knife"  );
  call_other( clone, "set_main_plural", "howondalandish throwing knives"  );
  call_other( clone, "set_long", "From one of the more remote Howondalandish tribes, this knife "   "doesn't look throwable, much less a knife.  From a short handle, "   "spiky steel blades jut out at all angles, sure to deliver a nasty "   "shock to whoever gets hit with it.\n"  );
  call_other( clone, "set_weight", 9  );
  call_other( clone, "set_length", 9  );
  call_other( clone, "set_width", 3  );
  call_other( clone, "set_material", "steel"  );
  call_other( clone, "new_weapon", 200  );
  call_other( clone, "set_damage_chance", 10  );
  call_other( clone, "add_attack", "stab", 60, ({ 40, 3, 30 }), "pierce", "pierce", 0  );
  call_other( clone, "add_attack", "slash", 60, ({ 25, 5, 30 }), "sharp", "sharp", 0  );
  call_other( clone, "set_value", 7000 );
   return clone;
}

==================================================
FILE: /lib/obj/weapons/knives/.klatchian_steel_dirk.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/klatchian_steel_dirk.wep#1" );
  call_other( clone, "set_name", "dirk"  );
  call_other( clone, "set_short", "Klatchian steel dirk"  );
  call_other( clone, "add_adjective", ({ "klatchian", "steel" })  );
  call_other( clone, "add_alias", "dagger"  );
  call_other( clone, "add_plural", "daggers"  );
  call_other( clone, "set_long", "This is a very long, curving knife with a wickedly sharp point.  It is made of Klatchian steel.\n"  );
  call_other( clone, "set_weight", 12  );
  call_other( clone, "set_length", 18  );
  call_other( clone, "set_width", 3  );
  call_other( clone, "set_material", "steel"  );
  call_other( clone, "set_value", 400  );
  call_other( clone, "new_weapon", 32000  );
  call_other( clone, "set_damage_chance", 5  );
  call_other( clone, "add_attack", "slash", 75, ({ 10, 5, 20 }), "sharp", "sharp"  );
  call_other( clone, "add_attack", "stab", 50, ({ 10, 2, 27 }), "pierce", "pierce" );
   return clone;
}

==================================================
FILE: /lib/obj/weapons/knives/.knife.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/knife.wep#1" );
  call_other( clone, "set_name", "knife"  );
  call_other( clone, "set_short", "knife"  );
  call_other( clone, "add_adjective", ({ "medium-sized", "medium" })  );
  call_other( clone, "set_main_plural", "knives"  );
  call_other( clone, "set_long", "This is a medium-sized knife, the sort of thing someone might keep in a boot to ward off a would-be attacker.  You just have to hope that it's not then used to prepare your dinner.\n"  );
  call_other( clone, "set_weight", 8  );
  call_other( clone, "set_length", 7  );
  call_other( clone, "set_width", 2  );
  call_other( clone, "set_material",  "steel"  );
  call_other( clone, "set_value", 100  );
  call_other( clone, "new_weapon", 9000  );
  call_other( clone, "add_attack",  "slash", 70, ({ 10, 3, 20 }), "sharp", "sharp", 0  );
  call_other( clone, "add_attack",  "stab", 40, ({ 15, 3, 30 }), "pierce", "pierce", 0 );
   return clone;
}

==================================================
FILE: /lib/obj/weapons/knives/.letter_opener.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/letter_opener.wep#1" );
  call_other( clone, "set_name", "opener"  );
  call_other( clone, "set_short", "pearl-handled letter opener"  );
  call_other( clone, "add_adjective", ({ "pearl-handled", "pearl", "handled", "letter" })  );
  call_other( clone, "set_main_plural", "pearl-handled letter openers"  );
  call_other( clone, "set_long", "This letter opener has a lovely pearl handle.  It has a pointy blade that could come in handy in a crunch.\n"  );
  call_other( clone, "set_weight", 4  );
  call_other( clone, "set_length", 8  );
  call_other( clone, "set_width", 1  );
  call_other( clone, "set_material", "steel"  );
  call_other( clone, "set_value", 5000  );
  call_other( clone, "new_weapon", 1600  );
  call_other( clone, "set_damage_chance", 8  );
  call_other( clone, "add_attack", "stab", 40, ({ 30, 3, 10 }), "pierce", "pierce", 0 );
   return clone;
}

==================================================
FILE: /lib/obj/weapons/knives/.meat_cleaver.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/meat_cleaver.wep#1" );
  call_other( clone, "set_name", "cleaver"  );
  call_other( clone, "set_short", "meat cleaver"  );
  call_other( clone, "add_alias", ({ "utensil", "knife" })  );
  call_other( clone, "add_adjective", "meat"  );
  call_other( clone, "set_main_plural", "meat cleavers"  );
  call_other( clone, "add_plural", ({ "utensils", "knives" })  );
  call_other( clone, "set_long", "This is a butcher's implement for cutting animal carcasses into joints or pieces.  It is a large, rectangular knife and is quite heavy.\n"  );
  call_other( clone, "set_weight", 16  );
  call_other( clone, "set_length",  11  );
  call_other( clone, "set_width", 5  );
  call_other( clone, "set_material",  "steel"  );
  call_other( clone, "set_value", 400  );
  call_other( clone, "new_weapon", 750  );
  call_other( clone, "set_damage_chance", 5  );
  call_other( clone, "add_attack", "slash", 50, ({ 10, 4, 10 }), "sharp", "sharp", 0  );
  call_other( clone, "add_attack", "hack", 90, ({ 20, 3, 20 }), "sharp", "sharp", 0 );
   return clone;
}

==================================================
FILE: /lib/obj/weapons/knives/.sharp_butter_knife.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/sharp_butter_knife.wep#1" );
  call_other( clone, "set_name", "knife"  );
  call_other( clone, "set_short", "sharp butter knife"  );
  call_other( clone, "set_main_plural", "sharp butter knives"  );
  call_other( clone, "add_adjective", ({ "sharp", "butter" })  );
  call_other( clone, "add_alias", ({ "utensil" })  );
  call_other( clone, "add_plural", "knives"  );
  call_other( clone, "set_long",  "This is a butter knife that has been sharpened a bit.\n"  );
  call_other( clone, "set_weight",  3  );
  call_other( clone, "set_length",  6  );
  call_other( clone, "set_width",  1  );
  call_other( clone, "set_material",  "steel"  );
  call_other( clone, "set_value",  75  );
  call_other( clone, "new_weapon",  500  );
  call_other( clone, "add_attack",  "slash", 70, ({ 15, 2, 20 }), "sharp", "sharp", 0  );
  call_other( clone, "add_attack",  "stab", 40, ({ 20, 2, 30 }), "pierce", "pierce", 0 );
   return clone;
}

==================================================
FILE: /lib/obj/weapons/knives/.silver_sickle.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/silver_sickle.wep#1" );
  call_other( clone, "set_name", "sickle"  );
  call_other( clone, "set_short", "silver sickle"  );
  call_other( clone, "add_adjective", "silver"  );
  call_other( clone, "set_long", "This is a dagger with a crescent shaped blade cast from silver.\n"  );
  call_other( clone, "set_weight", 9  );
  call_other( clone, "set_length", 12  );
  call_other( clone, "set_width", 8  );
  call_other( clone, "set_material",  "silver"  );
  call_other( clone, "set_value",  2000  );
  call_other( clone, "new_weapon", 12800  );
  call_other( clone, "set_damage_chance", 5  );
  call_other( clone, "add_attack",  "slash", 75, ({ 10, 5, 15 }), "sharp", "sharp"  );
  call_other( clone, "add_attack",  "stab", 50, ({ 10, 2, 25 }), "pierce", "pierce" );
   return clone;
}

==================================================
FILE: /lib/obj/weapons/knives/.small_copper_knife.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/small_copper_knife.wep#1" );
  call_other( clone, "set_name", "knife"  );
  call_other( clone, "set_short", "small copper knife"  );
  call_other( clone, "set_main_plural", "small copper knives"  );
  call_other( clone, "add_adjective", ({ "small", "copper" })  );
  call_other( clone, "set_long", "This is a small, Djelian, copper knife.  Its straight blade and hilt are undecorated, clean and functional.\n"  );
  call_other( clone, "set_weight", 5  );
  call_other( clone, "set_length", 8  );
  call_other( clone, "set_width", 3  );
  call_other( clone, "set_material",  "copper"  );
  call_other( clone, "set_value", 100  );
  call_other( clone, "new_weapon", 16000  );
  call_other( clone, "add_attack", "slash", 100, ({ 10, 5, 10 }), "sharp", "sharp"  );
  call_other( clone, "add_attack", "stab", 50, ({ 10, 2, 15 }), "pierce", "pierce" );
   return clone;
}

==================================================
FILE: /lib/obj/weapons/knives/.small_knife.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/small_knife.wep#1" );
  call_other( clone, "set_name", "knife"  );
  call_other( clone, "set_short", "small knife"  );
  call_other( clone, "add_adjective", ({ "small" })  );
  call_other( clone, "add_alias", "utensil"  );
  call_other( clone, "add_plural", "utensils"  );
  call_other( clone, "set_long", "This small knife might be the sort of thing " "you'd use to peel an apple, slice carrots or " "stab in someone's kidney.  You could say " "that it's a multi-purpose utensil.\n"  );
  call_other( clone, "set_weight", 6  );
  call_other( clone, "set_length", 7  );
  call_other( clone, "set_width", 1  );
  call_other( clone, "set_material",  "steel"  );
  call_other( clone, "set_value", 50  );
  call_other( clone, "new_weapon", 500  );
  call_other( clone, "add_attack", "slash", 70, ({ 5, 2, 20 }), "sharp", "sharp", 0  );
  call_other( clone, "add_attack", "stab", 40, ({ 10, 2, 30 }), "pierce", "pierce", 0 );
   return clone;
}

==================================================
FILE: /lib/obj/weapons/knives/.stiletto.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/stiletto.wep#1" );
  call_other( clone, "set_name", "stiletto"  );
  call_other( clone, "set_short", "stiletto"  );
  call_other( clone, "add_alias", "knife"  );
  call_other( clone, "add_adjective", "slender"  );
  call_other( clone, "set_main_plural", "stilettoes"  );
  call_other( clone, "add_plural", "knives"  );
  call_other( clone, "set_long", "This is a slender knife with a dark steel blade, and sharp tip.  "         "It's perfect for slipping between someone's ribs.\n"  );
  call_other( clone, "set_weight", 7  );
  call_other( clone, "set_length", 10  );
  call_other( clone, "set_width", 1  );
  call_other( clone, "set_material",  "steel"  );
  call_other( clone, "set_value", 2000  );
  call_other( clone, "new_weapon",  5000  );
  call_other( clone, "set_damage_chance",  5  );
  call_other( clone, "add_attack",  "stab", 70, ({ 40, 4, 20 }), "pierce", "pierce"  );
  call_other( clone, "add_attack",  "stabstab", 70, ({ 40, 4, 20 }), "pierce", "pierce"  );
  call_other( clone, "set_no_limbs", 1 );
   return clone;
}

==================================================
FILE: /lib/obj/weapons/knives/.tanto.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/tanto.wep#1" );
  call_other( clone, "set_name", "tanto"  );
  call_other( clone, "set_short", "tanto"  );
  call_other( clone, "add_alias", "dagger"  );
  call_other( clone, "add_plural", ({"daggers","tantos"})  );
  call_other( clone, "set_main_plural", "tantos"  );
  call_other( clone, "set_long", "This large auriental dagger is an excellent weapon for close-in fighting.  It is short, well crafted and looks pretty durable.\n"  );
  call_other( clone, "set_weight", 9  );
  call_other( clone, "set_length", 10  );
  call_other( clone, "set_width", 3  );
  call_other( clone, "set_material", "steel"  );
  call_other( clone, "set_value", 4000  );
  call_other( clone, "new_weapon", 50000  );
  call_other( clone, "set_damage_chance", 2  );
  call_other( clone, "add_attack", "slash", 75, ({ 0, 2, 40 }), "sharp", "sharp", 0  );
  call_other( clone, "add_attack", "stab", 50, ({ 9, 4, 30 }), "pierce", "pierce", 0 );
   return clone;
}

==================================================
FILE: /lib/obj/weapons/knives/.white_handled_ceremonial_bronze_knife.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/white_handled_ceremonial_bronze_knife.wep#1" );
  call_other( clone, "set_name", "knife"  );
  call_other( clone, "set_short", "white handled ceremonial bronze knife"  );
  call_other( clone, "add_adjective", ({ "white", "handled", "ceremonial", "bronze" })  );
  call_other( clone, "set_main_plural", "white handled ceremonial bronze knives"  );
  call_other( clone, "add_plural", "knives"  );
  call_other( clone, "set_long", "This is a ceremonial knife, for use in magic rituals.  Its ornate handle is made of ivory and its long bronze blade has been carved with mystic runes.\n"  );
  call_other( clone, "set_weight", 11  );
  call_other( clone, "set_length", 18  );
  call_other( clone, "set_width", 3  );
  call_other( clone, "set_material",  "bronze"  );
  call_other( clone, "set_value", 1000  );
  call_other( clone, "new_weapon", 2000  );
  call_other( clone, "add_attack", "slash", 70, ({ 10, 2, 20 }), "sharp", "sharp", 0  );
  call_other( clone, "add_attack", "stab", 40, ({ 20, 2, 60 }), "pierce", "pierce", 0 );
   return clone;
}
