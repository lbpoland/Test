# Total Tokens: 15500
# Total Files Merged: 35
# Total Characters: 51775

/rabbit/print_shop.c
==================================================

#include "path.h"
inherit "/std/shops/print_shop";
void setup() {
   set_short("Flopsies Print Shop");
   set_long(
"This place appears to have been made into a shrine for a rabbit, you "
"can see a small altar and carrot covered cloth on the counter.\n");
   add_item("counter", ({ "long", "The counter runs across the "
            "front of the room and there is a small altar set up "
            "on the edge of it.",
            "position", "the counter" }) );
   add_item("altar", ({ "long", "A nice altar with a little sign "
            "under it.",
            "read", "In memory of 'Mopsy'.\n" }) );
   set_light(70);
   add_exit("north", RABBIT + "rabbit3", "door");
   add_property("place", "Pumpkin");
}

==================================================
FILE: dist/pumpkin/rabbit/print_shop_binding.c
==================================================

#include "path.h"
#include <armoury.h>
inherit "/std/shops/print_shop";
int is_room_open();
void setup() {
   set_light(70);
   set_room_size(5);
   set_short("print shop's binding room");
   add_property("determinate", "the ");
   set_long(
"Several tables are laid out in this room, people sit at the tables "
"placing the pages which come in from the printing press into the "
"final bound editions of the books.  This looks like the place where "
"the completed books are stored until taken away by their owners, judging "
"by the huge piles of books scattered around on the floor.\n");
   add_item("table",
({ "long", "Several tables house the equipment used to bind the books into "
"completed volumes are scattered around the room.  All the space not used by "
"the tables is covered in piles of completed, bound books.",
"position", "a binding table",
"position multiple", 1 }) );
   add_item(({ "edition", "volume", }),
"The uncompleted, or soon to be completed volumes of work are sitting "
"on the tables, when they get put on the ground they suddenly turn "
"into books.");
   add_item("people",
"They are binding the books, placing each page into (hopefully) the "
"correct place and creating a final, probably exact output.");
   add_item("book",
({ "long", "There are books all over the floor, in piles and stacks.  Some "
"of the stacks look a little precarious.",
"position", "a pile of books",
"position multiple", 1 }) );
   add_item("page",
"The pages are stacked up on the tables, somewhat neatly, beside the "
"workers as they place them into the bound copies.");
   add_exit("south", PATH + "print_shop_press", "corridor");
   set_office_room(PATH + "print_shop_office");
   set_open_func((: is_room_open :));
   set_print_shop_name("Goatbergers printing shop, Pumpkin");
   add_property("place", "Pumpkin");
}
int is_room_open() {
   return 1;
}

==================================================
FILE: dist/pumpkin/rabbit/print_shop_foyer.c
==================================================

#include "path.h"
inherit "/std/room/basic_room";
void setup() {
   set_light(70);
   set_room_size(5);
   set_short("print shop's foyer");
   add_property("determinate", "the ");
   set_long(
"A busy room full of people running around carrying trays full of moving "
"type and ink.  There is a coffee table in the middle of the chaos with "
"a chair sitting beside it.  To the west there is a door with a "
"brass plaque attached to it.\n");
   add_item("coffee table",
({ "long", "The coffee table is old and very coffee and tea stained, you are "
"not sure just how undisturbed you would be sitting at the table, the whole "
"place looks a little busy.",
"position", "the coffee table" }) );
   add_item("rickety chair",
({ "long", "The rickety chair sits beside the coffee table, it looks "
"pretty precarious about its role in life.  Sitting on it might be a "
"dangerous occupation.",
"position", "the rickety chair" }) );
   add_item("moving type",
"Lots of little letters placed in rows on boards, or heaped in buckets.  "
"They don't actually appear to move, but is hard to tell because no one "
"with them ever stops long enough for you to look.");
   add_item("ink",
"Large pots of ink, small pots of ink, ink!  All colours of ink, black, "
"red, green, although mostly black, are being carted around.  You are sure "
"there is a purpose to all the movement even if it is a little unclear.");
   add_item("people",
"They are all in a hurry, they look determined and stressed as if they "
"could never manage to get to whatever their destination is fast enough.  "
"Most of them do not appear to really know where their destination is, "
"they rush in and out of the room carrying the same items, look around "
"wildly and dash out again.");
   add_item("brass plaque",
({ "long", "It is a nice polished brass plaque on a surprisingly nice "
"looking door.\nIt appears to have something written on it.",
"read", "Office.\n" }) );
   add_exit("west", PATH + "print_shop_office", "door");
   add_exit("east", PATH + "print_shop_press", "corridor");
   add_exit("south", PATH + "rabbit3", "door");
   room_chat( ({ 120, 240, ({
       "Someone rushes into the room, looks around wildly and rushes back "
       "out again.",
         "You hear a CLANK, WHAM, HISS from the east",
    }) }) );
   add_property("place", "Pumpkin");
}

==================================================
FILE: dist/pumpkin/rabbit/print_shop_office.c
==================================================

#include "path.h"
#include <armoury.h>
inherit "/std/shops/print_shop";
nosave object goatberger;
int is_office_open(object *obs);
void setup() {
   set_light(70);
   set_room_size(5);
   set_short("print shop's office");
   add_property("determinate", "the ");
   set_long(
"A big impressive table dominates the room, contrasting sharply to the "
"bare undecorated walls and single bookcase on the back wall.  "
"The soft squooshy carpet covers the floor "
"in a soft cuddly way, licking up against the walls of the room.  "
"The room gives the impression of opulence by its starkness.\n");
   add_item("impressive table",
({ "long", "The table is almost bare except for a blotting pad and a nice "
"set of gold plated quills.  It is a deep shiny maroon colour "
"and the finish glistens softly in the light.  Nestled in behind the "
"table is a wonderful looking chair.",
"position", "the impressive table" }));
   add_item("chair",
({ "long", "The chair is one of those amazing office executive chairs.  "
"It has bits that wobble, bits that zip around and generally looks "
"pretty exciting.",
"position", "the chair" }) );
   add_item("gold plated quill",
"The gold plated quills rest on a quill holder on the table, slightly "
"askew from the blotting paper.  They look hardly used.");
   add_item("bare undecorated wall",
"The walls are bare and undecorated, but nicely finished with a "
"coat of some sort of timber varnish.\n");
   add_item( ({ "blotting paper", "blotting pad" }),
"The blotting paper is bright white, it looks like it has never seen "
"anything remotely resembling ink.  Scribbled just on the corner of "
"the wonderful white paper is a small note saying, 'Please note we can "
"\"print\" books and allow you to \"claim\" copyright here.'");
   add_item("quill holder",
"Resting on the hand engraved silver quill holder are two gold plated "
"quills.");
   add_item("soft squooshy carpet",
"The light brown carpet decorates the room perfectly, running from "
"wall to wall, gently fading into the floor and not being too obtrusive.");
   add_item("bookcase",
"It is sparsely populated with a couple of new looking leather bound "
"books.  They are titled 'Two nights in a closet', 'The Joye of Snacks' "
"and 'A few bedtime poems'.\n");
   add_item(({ "two nights in a closet", "book" }),
({ "long", "The red leather cover looks posh and gorgeous in your "
"hands.  You can see the title 'Two nights in a closet' etched "
"into the cover.\n"
"It appears to have something written on it.",
"read",
"This is a long winding book about a monster having to temporarily "
"relocate from a nice cellar in which it used to live.  The cellar "
"is undergoing refurbishment and is unavailable for monster "
"habitation, so it moved to a closet in a childs bedroom.  The "
"mother of the child refuses to believe that there is a monster "
"in the closet despite the loud protestations of the child.  The "
"monster peers out at the child every night, when it leaves it "
"eats the childs favorite toy and the mother eventually agrees "
"to look in the closet.  But it is empty.\n" }));
   add_item(({ "the joye of snacks", "book" }),
({ "long", "Wonderful bright red alluring cover with an interesting "
"picture of two people, naked, embracing in a shower with a "
"coffee table lurking in the foreground.  The caption 'Joye of "
"snacks' can be seen on the binder.\n"
"It appears to have something written on it.",
"read", "The first page has 'Demo copy only' written on it in "
"big black letters.  Sounds like a really interesting book though.\n" }) );
   add_item(({ "a few bedtime poems", "book" }),
({ "long", "The mate black cover of this book hardly even gleams at "
"all, the straight time Roman lettering saying 'A few bedtime poems "
"by a small colourful fish'.\n"
"It appears to have something written on it.",
"read",
"Strawberries\n"
"------------\n"
"\n"
"Starting from a above,\n"
"Working slowly down under.\n"
"Sliding up the sides\n"
"Eating a meal, fresh cream and syrup.\n"
"\n"
"Round and round, and round again\n"
"Grinning mischeviously\n"
"One tongue at play\n"
"Firm and hard, fresh strawberries today.\n"
"\n"
"\n"
"Flirting\n"
"--------\n"
"\n"
"A sidelong glance,\n"
"A funny remark!\n"
"Glittering eyes\n"
"Meeting in the dark.\n"
"\n"
"Fear of whats to come\n"
"Glad of what is here.\n"
"Hoping, wishing, believing\n"
"We will be as one.\n"
"\n"
"\n"
"Bewitched by the highlands\n"
"--------------------------\n"
 "\n"
"Scotland reminds me\n"
"Of heather and song\n"
"Of bagpipes and dancing\n"
"Never a witch\n"
 "\n"
"Then she bewitched me\n"
"Her eyes were brown\n"
"Her hair was like satin\n"
"Skin of pure honey\n"
 "\n"
"We talked for hours\n"
"Talking of the times\n"
"Strawberries and cream\n"
"Staring at her eyes\n"
 "\n"
"We laughed and sighed\n"
"Talked far and wide\n"
"Feeling a glow inside\n"
"Hands touching in my mind\n"
 "\n"
"Many more times we met\n"
"Laughed and had fun\n"
"Flirting with abandon\n"
"More happy than ever before\n"
 "\n"
"Now Scotland and witches\n"
"Are inextricably linked\n"
"With joy and happiness\n"
"In my dreams at night\n"
 }) );
   set_no_collection(1);
   set_open_func((: is_office_open($1) :));
   set_default_language("common");
   add_translation_cost("djelian", 130);
   set_save_dir("/d/am/save/printing/");
   add_exit("east", PATH + "print_shop_foyer", "door");
   add_property("place", "Pumpkin");
}
void reset() {
   if (!goatberger) {
      goatberger = clone_object("/obj/monster");
      goatberger->set_name("goatberger");
      goatberger->set_short("Mr. Goatberger");
      goatberger->set_long(
"He is smartly dressed in an expensive looking imported suit, a slight smile "
"just playing on his lips.  A gold fob watch peeks out of the lapels "
"of his suit.\n");
      goatberger->set_race("human");
      goatberger->set_level(10);
      goatberger->set_gender("male");
      goatberger->add_property("determinate", "");
      ARMOURY->request_item("white linen tunic", 90)->move(goatberger);
      ARMOURY->request_item("green pants", 90)->move(goatberger);
      goatberger->set_default_position( (: goatberger->do_command("sit on chair") :) );
      goatberger->do_command("equip");
      goatberger->move(this_object(), "$N arrives from the west.\n");
      goatberger->return_to_default_position(0);
   }
}
int is_office_open(object *obs) {
   if (!goatberger) {
      add_failed_mess("There is no one here to serve you.\n", obs);
      return 0;
   }
   return 1;
}

==================================================
FILE: dist/pumpkin/rabbit/print_shop_press.c
==================================================

#include "path.h"
inherit "/std/room/basic_room";
void setup() {
   set_light(70);
   set_room_size(5);
   set_short("print shop's machinery room");
   add_property("determinate", "the ");
   set_long(
"Big huge black machines, belching steam and exciting noises, completely cover "
"the floor of the room.  People scurry back and forth, carrying single "
"pages, bound books and trays of moving type.  The floor is covered in "
"spilled ink, both new and old, and little bits of metal, forgotten "
"bits of moving type and the odd rat.\n");
   add_item(({ "big huge black machine", "press", "machines" }),
"The machines are big presses that squish the moving type down onto "
"bits of paper which are then shuffled off to the binding department.  Steam "
"and unnecessary noise appear to be vital components of the printing "
"process.");
   add_item(({ "metal bit", "metal" }),
"There are a number of small bits of metal scattered over the floor, they "
"appear to be broken bits of moving type and things shaved off the "
"industriously working machines.");
   add_item("floor",
"The floor is covered in spilled ink, both new and old, and little bits of "
"metal,  forgotten bits of moving type and the odd rat.");
   add_item("people",
"There are people scurrying around in a hurry, moving pages from the "
"press into the binding room and swapping the moving type.  In a corner "
"there are a group of people arranging the type onto the trays from an "
"original book.");
   add_item("bound book",
"You have no idea why people would be walking around with bound books here, "
"especially since they seem to be reading the books and then blushing bright "
"red.  The title of the books appears to be 'The Joye of Snacks'.");
   add_item("spilled ink",
"The ink is all over the floor in a thick layer, caking everything in a "
"fine dust.");
   add_item("rat",
"The rat looks kind of, well very, covered in ink.  It sniffs around the "
"place industriously, perhaps it is a spy rat?");
   add_item("single page",
"The pages are single pages from books, they are not particularly ordered "
"from what you can tell.  You wonder how the books make it out alive.");
   add_item(({ "tray", "tray of moving type" }),
"Trays of moveable type to be inserted into the machines, they then print "
"the pages which get placed into the final book.");
   add_exit("west", PATH + "print_shop_foyer", "corridor");
   add_exit("north", PATH + "print_shop_binding", "corridor");
   room_chat( ({ 120, 240, ({
      "Someone reading a book blushes bright red and drops a tray of "
      "moving type.",
      "WHUMP!",
      "HISS!",
      "A machine clanks alarmingly.",
      "Someone wanders off with a bunch of pages to be bound to the binding "
      "room."
    }) }) );
   add_property("place", "Pumpkin");
}

==================================================
FILE: dist/pumpkin/rabbit/rabbit1.c
==================================================

#include "path.h";
inherit CITYROOM;
void setup() {
  set_short("Rabbit Lane");
  set_long("This is Rabbit Lane at the junction with Squash Square.\n");
  set_light( 80 );
  add_exit("east", RABBIT + "rabbit2", "road");
  add_exit("west", SQUASH + "squash6", "road");
}

==================================================
FILE: dist/pumpkin/rabbit/rabbit2.c
==================================================

#include "path.h";
inherit CITYROOM;
void setup() {
  set_short("Rabbit Lane");
  set_long("This is the middle of Rabbit Lane where a bunch of "
           "books and things seem to be.\n");
  set_light( 80 );
  add_exit("east", RABBIT + "rabbit3", "road");
  add_exit("west", RABBIT + "rabbit1", "road");
  add_exit("north", RABBIT + "bookshop", "door");
}

==================================================
FILE: dist/pumpkin/rabbit/rabbit3.c
==================================================

#include "path.h";
inherit CITYROOM;
void setup() {
  set_short("Rabbit Lane");
  set_long("This is the middle of Rabbit Lane\n");
  set_light( 80 );
  add_exit("east", RABBIT + "rabbit4", "road");
  add_exit("west", RABBIT + "rabbit2", "road");
  add_exit("north", RABBIT + "print_shop_foyer", "door");
}

==================================================
FILE: dist/pumpkin/rabbit/rabbit4.c
==================================================

#include "path.h";
inherit CITYROOM;
void setup() {
  set_short("Rabbit Lane");
  set_long("This is end of Rabbit Lane at the exit of the city of Pumpkin.\n");
  set_light( 80 );
  add_exit("east", TERRAIN_HANDLER + ":0:18:0", "road");
  add_exit("west", RABBIT + "rabbit3", "road");
  add_exit("north", RABBIT + "potion_shop", "door");
}

==================================================
FILE: dist/pumpkin/woods/path.h
==================================================

#include "../path.h"
#undef PATH
#define PATH __DIR__

==================================================
FILE: dist/pumpkin/woods/woods1.c
==================================================

#include "path.h";
inherit "/std/outsides/woodland";
void setup() {
  set_short("Woods");
  set_long("This is Woods at the junction with Plains.
\n");
  set_light( 80 );
  add_exit("north", PLAIN + "plain5", "road");
  add_exit("south", WOODS + "woods2", "road");
}

==================================================
FILE: dist/pumpkin/woods/woods2.c
==================================================

#include "path.h";
inherit "/std/outsides/woodland";
void setup() {
  set_short("Woods");
  set_long("This is the end of Woods\n");
  set_light( 80 );
  add_exit("north", WOODS + "woods1", "road");
  add_exit("south", WOODS + "woods3", "road");
}

==================================================
FILE: dist/pumpkin/woods/woods3.c
==================================================

#include "path.h";
inherit "/std/outsides/woodland";
void setup() {
  set_short("Woods");
  set_long("This is the end of Woods\n");
  set_light( 80 );
  add_exit("north", WOODS + "woods2", "road");
  add_exit("south", WOODS + "woods4", "road");
}

==================================================
FILE: dist/pumpkin/woods/woods4.c
==================================================

#include "path.h";
inherit "/std/outsides/woodland";
void setup() {
  set_short("Woods");
  set_long("This is the end of Woods\n");
  set_light( 80 );
  add_exit("north", WOODS + "woods3", "road");
  add_exit("south", WOODS + "woods5", "road");
}

==================================================
FILE: dist/pumpkin/woods/woods5.c
==================================================

#include "path.h";
inherit "/std/outsides/woodland";
void setup() {
  set_short("Woods");
  set_long("This is Woods at the junction with Desert.
\n");
  set_light( 80 );
  add_exit("north", WOODS + "woods4", "road");
  add_exit("south", DESERT + "desert10", "road");
}

==================================================
FILE: dist/pumpkin/hospital/hospital.c
==================================================

#include "path.h"
inherit CITY "inherit/hospital";
void create() {
   set_hospital_type("Pumpkin");
   set_save_file("/d/dist/dist/pumpkin_hospital");
   set_max_living(100);
   set_log_directory("/d/dist/log");
   do_setup++;
   ::create();
   do_setup--;
   if (!do_setup) {
      set_short("Pumpkin Hospital");
      set_light(60);
   }
   set_npc_groups(DATA->compile_data( ({ HOSPITAL_DIR "bes_pelargic_group" }) ));
   set_npc_info(DATA->compile_data( ({ HOSPITAL_DIR "bes_pelargic_info" }) ));
}

==================================================
FILE: dist/pumpkin/squash/beer_bar.c
==================================================

#include "path.h"
#include <armoury.h>
#include <shops/pub_shop.h>
inherit "/std/shops/pub_shop";
object *drunkards;
object bartender, barmaid;
int do_sit(string str);
int ref_to_serve(object player, int type);
void setup() {
   set_short("beer room");
   set_room_size(5);
   add_property( "place", "Pumpkin");
   set_light(60);
   set_theft_handler( HOSPITAL );
   set_zone("Flaming Cabbage");
   set_open_function( (: ref_to_serve :) );
   set_long("This is a beer bar.  Hence, all the bottles, signs and glasses "
      "are related to beer.  Maybe it could be possible to get something "
      "else, but most likely, beer (and of course the sort of healthy, "
      "nutritious food that goes along with beer) is all they sell here.  "
      "The customers, sitting on chairs around the tables, are all drinking "
      "beer and chatting merrily.  At one of the more secluded tables, "
      "some seedy-looking characters are whispering less merrily.  Of course, "
      "they too are enjoying a tasty beer.  A menu is tacked to the "
      "wall behind the counter.\n");
   add_item("floor", "The floor is sticky, and it seems like it'd be hard "
      "to walk out of here.  That could explain why some of the clientele "
      "here seem to have been drinking for days.");
   add_item("sign","There are a number of signs in this bar.  Most of "
      "them are tacky, sticky old cardboard signs pointing out the "
      "special benefits of drinking beer X or ale Y.");
   add_item("bottle","There are a vast amount of bottles on the wall "
      "behind the counter.  They all seem to be the same sort, and quite "
      "a few of them seem to be empty.  At least they catch the seedy "
      "light in a very pretty way.");
   add_item("glass","Beer glasses (the empty kind which are not overly dirty "
      "on the inside) are flooding the bar behind the counter.  Considering "
      "how empty, used glasses seem to disappear altogether, it is probably "
      "necessary to have quite a few glasses around.");
   add_item(({"customer","clientele"}), "The people in here seem to be "
      "mainly concerned with the intake of beer.  They all look rather red "
      "around their noses and, for some reason, they all look rather "
      "happy.  All except those who wouldn't be caught dead doing something "
      "as silly as looking happy, of course.");
   add_item(({"seedy-looking character","character","corner"}), "In a "
      "corner of the bar, some people (who seem to melt in extraordinarily "
      "well into the dark shadows) are quietly drinking some beer, keeping "
      "a watchful eye on everything that happens");
   add_item(({"bar","counter"}), "The counter runs along one wall of the "
      "room.  All empty glasses put on it seem to disappear to some other "
      "dimension.  Only Dogbolter, the God of Empty Beer Pints, knows "
      "where that is.");
   add_item("wall", "The walls are sticky with dried in beer.  Somehow it "
      "has ended up on the walls, but there is nothing here to explain how.  "
      "On one of the walls there's a sign - it appears to be stuck there "
      "without the aid of a pin or anything...");
   add_item("ceiling", "The ceiling is sticky.  They must have had quite a "
      "party here recently.  Or maybe they had a party a long time ago and "
      "just haven't washed the ceiling since?");
   add_item( "wooden table", ({"long", "This is a rather nice wooden "
      "table.  At least it could be, somewhere underneath all that "
      "sticky beer.",
      "position","the wooden table"}));
   add_item( "small table", ({"long", "This table is made of wood, but a "
      "lot smaller than the other tables here.",
      "position","the small table"}));
   add_item( "sticky table", ({"long", "This large table is a lot stickier "
      "than anything else in here, and that means it's pretty darn sticky!",
      "position","the sticky table"}));
   add_item( "old chair",
         ({ "long", "The chairs around the wooden table are old and worn.",
            "position","the wooden table"
         }) );
   add_item( "small chair",
         ({ "long", "The chairs around the wooden table are old and worn.",
            "position","a chair at the wooden table"
         }) );
   add_item("sticky beer", "It's just about everywhere.");
   add_menu_item("Spicy sausage", PUB_APPETISER, 396, "spicy sausage");
   add_menu_alias("sausage", "Spicy sausage");
   add_menu_item("Salad", PUB_MAINCOURSE, 796, "salad",
                 PUB_STD_SIDEPLATE);
   add_menu_item("Fish'n'chips", PUB_MAINCOURSE, 1196, "fish'n'chips",
                 PUB_STD_DINNERPLATE);
   add_menu_item("Ribs", PUB_MAINCOURSE, 1304, "ribs",
                 PUB_STD_DINNERPLATE);
   add_menu_item("Hot chicken sandwich", PUB_MAINCOURSE, 796,
      "chicken sandwich");
   add_menu_alias("chicken sandwich", "Hot chicken sandwich");
   add_menu_item("Ham'n'cheese sandwich", PUB_MAINCOURSE, 796, "ham sandwich");
   add_menu_alias("ham sandwich", "Ham'n'cheese sandwich");
   add_menu_item("Unnameable liquid", PUB_ALCOHOL, 1704, "unnameable",
                 PUB_STD_PINT, 0, 1);
   add_menu_alias("unnameable", "Unnameable liquid");
   add_menu_item("CMOTD's Finest Brew", PUB_ALCOHOL, 1704, "finest brew",
                 PUB_STD_PINT, 0, 1);
   add_menu_alias("brew", "CMOTD's Finest Brew");
   add_menu_alias("cmotd", "CMOTD's Finest Brew");
   add_menu_item("Pumpkine Ale", PUB_ALCOHOL, 1838, "/obj/food/ale.food",
                 PUB_STD_PINT, 0, 1);
   add_menu_alias("ale", "Pumpkine Ale");
   add_menu_item("Troll Beer", PUB_ALCOHOL, 1838, "troll beer",
                 PUB_STD_PINT, 0, 3);
   add_menu_alias("beer", "Troll Beer");
   add_menu_item("Schlorg Beer", PUB_ALCOHOL, 1838, "schlorg beer",
                 "schlorg bottle", 0, 2);
   add_menu_alias("schlorg", "Schlorg Beer");
   add_exit("west", PATH + "squash9", "corridor");
}
object create_item( string word ) {
   object thing, thang;
   switch ( word ) {
   case "spicy sausage" :
      thing = clone_object( "/obj/food" );
      thing->set_weight_per_bite(1);
      thing->set_name("sausage");
      thing->set_short("spicy sausage");
      thing->set_long( "The sausage, of a very questionable origin, seems "
         "to be designed to increase the thirst of whomever eats it.\n" );
      thing->set_value( 396 );
      thing->set_weight(5);
      return thing;
   case "unnameable liquid" :
      thang = clone_object( "/obj/reagents/generic_liquid.ob" );
      thang->set_medium_alias("beer");
      thang->set_name("unnameable");
      thang->set_short( "unnameable liquid" );
      thang->set_long( "This sludge is definitely better off without a "
           "name.  If someone was to try to give it a name, it'd have to be "
           "something along the lines of \"Stinking Mud\", \"Utterly "
           "Disgusting and Undrinkable Slush\" or maybe just \"Yuck!\".\n" );
      thang->add_eat_effect( "/std/effects/ingested/drunk", 40 );
      thang->add_eat_effect("/std/effects/ingested/nausea", 100);
      thang->set_amount( 2000 );
      return thang;
   case "finest brew" :
      thang = clone_object( "/obj/reagents/generic_liquid.ob" );
      thang->set_name("brew");
      thang->set_medium_alias("beer");
      thang->set_short( "CMOTD's Finest Brew" );
      thang->add_alias(({"finest brew","CMOTD's finest","CMOTD's brew"}));
      thang->set_long( "CMOT Dibbler has produced an amazing beer from "
           "Pumpkin, weird spices and possibly some more things.  Being "
           "Dibbler, he has of course made sure that the pint is rather "
           "a small one.\n" );
      thang->add_eat_effect( "/std/effects/ingested/drunk", 50 );
      thang->set_amount( 980 );
      return thang;
   case "troll beer" :
      thang = clone_object( "/obj/reagents/generic_liquid.ob" );
      thang->add_alias("beer");
      thang->set_name("beer");
      thang->set_short("troll beer");
      thang->add_adjective("pint");
      thang->set_long("This is trollish beer.  You suspect a human "
            "shouldn't really be drinking this stuff.\n" );
      thang->add_alias( "trollbeer" );
      thang->add_adjective("troll");
      thang->add_eat_effect("/std/effects/ingested/drunk", 70);
      thang->set_amount( 2000 );
      return thang;
   case "schlorg" :
      thang = clone_object( "/obj/reagents/generic_liquid.ob" );
      thang->set_name("schlorg");
      thang->set_short("Schlorg");
      thang->set_medium_alias("beer");
      thang->set_long("This beer must be \"forn\".  It has none of the "
           "characteristic muddiness that all beer brewed from Pumpkin water "
           "possesses.\n" );
      thang->add_eat_effect("/std/effects/ingested/drunk", 180);
      thang->set_amount(3900);
      thang->move(thing);
      thing->do_close();
      return thing;
      break;
   case "salad" :
      thing = clone_object( "/obj/food" );
      thing->set_name("salad");
      thing->add_property("food", 1);
      thing->set_short( "green salad" );
      thing->set_long( "This green salad is at least partially green, "
         "with interesting bits and thingies in it.\n" );
      thing->add_eat_effect("/std/effects/ingested/nausea", 10);
      thing->set_value( 796 );
      thing->set_amount( 2000 );
      return thing;
   case "fish'n'chips" :
      thing = clone_object( "/obj/food" );
      thing->add_alias(({"fish","chips"}));
      thing->add_property("food", 1);
      thing->set_name("cod");
      thing->set_short( "fish'n'chips" );
      thing->set_long( "It's hard to tell what is the fish and which of "
         "the small, sloppy pieces that are supposed to be the chips.  "
         "They all taste the same anyway.\n" );
      thing->add_eat_effect("/std/effects/ingested/nausea", 10);
      thing->set_value( 1196 );
      thing->set_amount( 2000 );
      return thing;
   case "ribs" :
      thing = clone_object( "/obj/food" );
      thing->set_name("ribs");
      thing->add_property("food", 1);
      thing->set_short( "ribs" );
      thing->set_main_plural("ribs");
      thing->set_long( "These are ribs.  What animal(s) they come from is "
         "not of any interest, rest assured...  They are quite a lot smaller "
         "than the Real Pork Ribs that you can get in the posh restaurants "
         "in any case.\n" );
      thing->set_value( 1304 );
      thing->set_amount( 2000 );
      return thing;
   case "chicken sandwich" :
      thing = clone_object( "/obj/food" );
      thing->add_alias("sandwich");
      thing->add_property("food", 1);
      thing->set_name("chicken");
      thing->set_short( "hot chicken sandwich" );
      thing->set_long( "The chicken on this sandwich is of the green sort.  "
         "It smells funny, moves funny and even sounds a bit funny.  The "
         "only nice thing to say about this sandwich is that it is indeed "
         "hot.  It should probably be eaten with caution, though.\n" );
      thing->add_eat_effect("/std/effects/ingested/nausea", 40);
      thing->set_value( 796 );
      thing->set_amount( 2000 );
      return thing;
   case "ham sandwich" :
      thing = clone_object( "/obj/food" );
      thing->add_alias("sandwich");
      thing->add_property("food", 1);
      thing->set_name("ham");
      thing->set_short( "ham'n'cheese sandwich" );
      thing->set_long( "This sandwich has some ham and some cheese on it, "
         "which is why it is called a ham and cheese sandwich.  It has been "
         "baked in an oven.  A long time ago.  It is rather cold an clammy "
         "now.\n" );
      thing->set_value( 796 );
      thing->set_amount( 2000 );
      return thing;
   }
}
object create_container(string name) {
   object thing;
   switch (name) {
   case "schlorg" :
      thing = clone_object( "/obj/bottle" );
      thing->make_bottle("green", 1000);
      thing->set_value(1596);
      thing->set_long( (string)thing->query_long() + "This bottle has a "
               "slightly odd-looking porcelain cap, and no label at all, "
               "in the ordinary fashion of Schlorg-bottles discwide.\n");
      return thing;
   }
}
void reset() {
   int i, j, x, y, z;
   string *kinds = ({"jolly","burly","fat","happy","drunk","very drunk",
      "silly"});
   j = 5 + random(2);
   if (sizeof(drunkards) < 3) {
      drunkards = allocate(j);
   }
   for (i=0;i<(sizeof(drunkards));i++) {
      if (!drunkards[i]) {
         x = random(sizeof(kinds));
         y = random(4);
         drunkards[i] = clone_object("/obj/monster");
         drunkards[i]->set_name("drunkard");
         drunkards[i]->add_alias(kinds[x]+"drunkard");
         drunkards[i]->add_alias(kinds[x]+" drunkard");
         drunkards[i]->add_property("emote",1);
         drunkards[i]->add_move_zone("Flaming Cabbage");
         drunkards[i]->set_short(kinds[x]+" drunkard");
         drunkards[i]->set_main_plural(kinds[x]+" drunkards");
         drunkards[i]->add_plural("drunkards");
         drunkards[i]->add_plural(kinds[x]+" drunkards");
         drunkards[i]->set_gender(1+random(1));
         drunkards[i]->set_long("This "+kinds[x]+" drunkard seems very "
            "content with sitting here, chugging down beer after beer.  Who "
            "can blame " + drunkards[i]->query_objective() + ", really?\n");
         drunkards[i]->set_race("human");
         drunkards[i]->set_al(-300 + random(600));
         drunkards[i]->set_guild("fighters");
         drunkards[i]->set_class("fighter");
         drunkards[i]->adjust_con(10);
         drunkards[i]->adjust_str(5);
         drunkards[i]->adjust_dex(-1);
         drunkards[i]->set_level(75 + random(25));
         drunkards[i]->add_skill_level( "other.health", 50 );
         drunkards[i]->add_skill_level("fighting.combat.melee",
                                       20+random(20));
         drunkards[i]->add_skill_level("fighting.combat.special",30);
         drunkards[i]->adjust_money(0 + random(1),"Pumpkin dollar");
         drunkards[i]->adjust_money(10+ random(20),"Pumpkin pence");
         switch(y) {
            case 0:
            ((object)ARMOURY->request_item("dagger",30 +
                    random(30)))->move(drunkards[i]);
            drunkards[i]->init_equip();
            drunkards[i]->do_command("tactics response parry");
            drunkards[i]->add_skill_level("fighting.combat.parry.held",
                                          50+random(100));
            break;
            case 1:
               ((object)ARMOURY->request_item("knife",70 +
                                              random(20)))->move(drunkards[i]);
               ((object)ARMOURY->request_item("green pants",70 +
                                              random(20)))->move(drunkards[i]);
               drunkards[i]->init_equip();
               drunkards[i]->do_command("tactics response parry");
               drunkards[i]->add_skill_level("fighting.combat.parry.held",
                                             50+random(20));
               break;
            default:
               ((object)ARMOURY->request_item("knife",30 +
                                           random(30)))->move(drunkards[i]);
               ((object)ARMOURY->request_item("green pants",70 +
                                              random(20)))->move(drunkards[i]);
               drunkards[i]->init_equip();
               drunkards[i]->add_property("emote", 1);
               drunkards[i]->do_command("tactics response parry");
               drunkards[i]->add_skill_level("fighting.combat.parry.held",
                                             20+random(20));
               drunkards[i]->load_chat(2,({
                  1, "'I need another beer.",
                  1, "'Bring me some beer, will you?",
                  1, "'I jolly well need beer!  Hurry up!"
                    }));
         }
         drunkards[i]->move("/room/void");
         y = random(4);
         z = 40 + random(90);
         call_out("make_drunk", z, drunkards[i], y, kinds[x]);
      }
   }
   if (!bartender) {
      bartender = clone_object( "/obj/monster" );
      bartender->set_name("bartender");
      bartender->set_short("sympathetic bartender");
      bartender->add_property("determinate","a ");
      bartender->set_long("This bartender looks just like you would "
         "expect in a place like this.  He has a huge red beard and seems "
         "to be laughing and smiling in a friendly manner at everyone all "
         "the time.\n");
      bartender->set_race("human");
      bartender->set_gender( 1 );
      bartender->set_al( -350 );
      bartender->set_class("fighter");
      bartender->set_level(100);
      bartender->do_command("tactics attitude offensive");
      bartender->do_command("tactics response parry");
      bartender->adjust_con(6);
      bartender->adjust_str(6);
      bartender->adjust_dex(3);
      bartender->add_skill_level( "other.health",55);
      bartender->add_skill_level("fighting.combat.melee.sharp",100);
      bartender->add_skill_level("fighting.combat.special",50);
      ((object)ARMOURY->request_item("dagger",100))->move(bartender);
      ((object)ARMOURY->request_item("dagger",85))->move(bartender);
      ((object)ARMOURY->request_item("leather undershirt",80))->
         move(bartender);
      ((object)ARMOURY->request_item("leather breeches",80))->move(bartender);
      ((object)ARMOURY->request_item("white apron",80))->move(bartender);
      bartender->add_respond_to_with( ({({"@spank"}),"bartender"}),
         "thank $hname$ profusely");
      bartender->load_chat(25,({
                  1, ":brings some beer out to his thirsty customers.",
                  1, "@wink barmaid",
                  1, "@beam brightly",
                  1, "@hum",
                  1, "@laugh",
                  1, ":laughs pleasantly.",
                  1, "'Well, well - what have we here?",
                  1, "'Bring you another beer, shall I?"
                    }));
      bartender->init_equip();
      barmaid = clone_object( "/obj/monster" );
      barmaid->set_name("barmaid");
      barmaid->set_short("lovely barmaid");
      barmaid->set_long("This barmaid looks happy with her work.  She smiles "
         "a lot and has a noticeable tendency to flutter her eye-lashes at "
         "the bartender.\n");
      barmaid->set_race("human");
      barmaid->set_class("fighter");
      barmaid->set_level(50);
      barmaid->set_gender(2);
      ((object)ARMOURY->request_item("white linen skirt",80))->move(barmaid);
      ((object)ARMOURY->request_item("white apron",80))->move(barmaid);
      barmaid->init_equip();
      call_out("make_bart", 20, bartender, barmaid);
   }
}
void make_drunk(object ob, int y, string str) {
   int a = random(2);
   string adj, adv;
   adv = ({ "not at all", "very", "quite", "extremely", "rather" })
     [ random(5) ];
   ob->move(this_object(), "A "+  str + " drunkard comes in, looking " + adv +
          " thirsty.");
   switch (y) {
   case 0:
      adj = "small";
      break;
   case 1:
   case 2:
      adj = "wooden";
      break;
   case 3:
      adj = "sticky";
      break;
   }
   if (a)
      ob->do_command("sit at "+adj+" table");
   y = 5 + random(50);
   call_out("buy_new", y, ob);
}
void make_bart(object ob, object obette) {
   ob->move(this_object(), "The bartender pops up from behind the counter "
          "with a wide grin on his face.");
   call_out("make_barm", 5, obette);
}
void make_barm(object ob) {
   ob->move(this_object(), "The barmaid appears from behind the counter and "
          "tries to look innocent.  She desperately tries to sort out her "
          "hair which is a bit unordered.");
}
void buy_new(object ob) {
   int tim;
   if (!undefinedp(ob)) {
      if (environment(ob) == this_object()) {
         int z;
         string beer;
         beer = ({ "troll beer", "brew", "brew",
                      "unnameable liquid" })[ random(4) ];
         ob->adjust_money(5, "Pumpkin dollar");
         ob->do_command("buy " + beer );
         ob->do_command("hold glass in left hand");
         z = 120 + random(120);
         tim = 20 + random(20);
         while (tim < z) {
            call_out("sip_beer", tim, ob);
            tim += 30 + random(20);
         }
         call_out("drink_beer", z, ob);
      }
   }
}
void sip_beer(object ob) {
   if (ob &&
       environment(ob) == this_object()) {
      ob->do_command("drink 1/3rd of glass");
   }
}
void drink_beer(object ob) {
   if (!undefinedp(ob)) {
      ob->do_command("drink glass");
      ob->do_command("'Ha!  Nice beer, this.");
      call_out("no_litter",3,ob);
   }
}
void no_litter(object ob) {
   object pint, *obinv;
   int z;
   int a = random(2);
   if (!ob) {
      return ;
   }
   obinv = deep_inventory(ob);
   if (sizeof(obinv)) {
      foreach( pint in obinv ) {
	 if (pint->query_max_volume()) {
            switch (a) {
            case 0:
               ob->do_command("'Ah.  An empty pint.  Now what would I "
                       "want that for?");
               break;
            case 1:
               ob->do_command("'Bugger.  It's all empty.  Now I'm sad.");
               break;
            case 2:
               ob->do_command("'No more beer.  What has the world come to?");
               break;
	    }
            ob->do_command("put " + pint->query_name() + " on counter");
         }
      }
   }
   if (a) {
      z = 120 + random(240);
      call_out("buy_new", z, ob);
   } else {
      ob->do_command("north");
   }
}
int ref_to_serve(object player, int type) {
   int clock, servtime;
   clock = (time()%(3600*24));
   servtime = ((clock > 35000) && (clock < 60000));
   if((!servtime) && (type == PUB_MAINCOURSE)) {
      add_failed_mess("Unfortunately, this pub doesn't serve food at the "
         "moment.  Try to change your order, please.\n");
      return 2;
   }
}
void event_enter(object ob, string str, object from) {
   if (ob->query_name() == "drunkard") {
      if( sizeof( match_objects_for_existence( "pint", ob ))) {
         ob->do_command("'Time for another beer for me.");
         call_out("buy_new",5 + random(50),ob);
      }
   }
}

==================================================
FILE: dist/pumpkin/squash/path.h
==================================================

#include "../path.h"
#undef PATH
#define PATH __DIR__

==================================================
FILE: dist/pumpkin/squash/squash1.c
==================================================

#include "path.h";
inherit CITYROOM;
void setup() {
  set_short("northwest corner of Squash Square");
  set_long("This is the north west corner of Squash Square\n");
  set_light( 80 );
  add_exit("east", SQUASH + "squash2", "road");
  add_exit("south", SQUASH + "squash4", "road");
  add_exit("southeast", SQUASH + "squash5", "hidden");
  add_property( "los", "open" );
  set_linker(({ PATH + "squash2", PATH + "squash4", PATH + "squash5" }),
             "to a point", "", "Squash Square");
  set_zone("pumpkin");
  set_monster(1, "city");
}

==================================================
FILE: dist/pumpkin/squash/squash2.c
==================================================

#include "path.h";
inherit CITYROOM;
void setup() {
  set_short("north edge of Squash Square");
  set_long("This is the north of Squash Square at the "
           "junction with Pumpkin Way.\n");
  set_light( 80 );
  add_exit("east", SQUASH + "squash3", "road");
  add_exit("west", SQUASH + "squash1", "road");
  add_exit("north", PUMPKIN + "pumpkin6", "road");
  add_exit("south", SQUASH + "squash5", "road");
  add_exit("southwest", SQUASH + "squash4", "hidden");
  add_exit("southeast", SQUASH + "squash6", "hidden");
  set_linker(({ PATH + "squash3", PATH + "squash1", PATH + "squash5",
                PATH + "squash4", PATH + "squash6" }),
             "into", "", "Squash Square");
  set_zone("pumpkin");
  set_monster(1, "city");
}

==================================================
FILE: dist/pumpkin/squash/squash3.c
==================================================

#include "path.h";
inherit CITYROOM;
void setup() {
  set_short("north east corner of Squash Square");
  set_long("This is the north east corner of Squash Square\n");
  set_light( 80 );
  add_exit("west", SQUASH + "squash2", "road");
  add_exit("south", SQUASH + "squash6", "road");
  add_exit("southwest", SQUASH + "squash5", "hidden");
  add_property( "los", "open" );
  set_linker(({ PATH + "squash2", PATH + "squash6", PATH + "squash5" }),
             "to a point", "", "Squash Square");
  set_zone("pumpkin");
  set_monster(1, "city");
}

==================================================
FILE: dist/pumpkin/squash/squash4.c
==================================================

#include "path.h";
inherit CITYROOM;
void setup() {
  set_short("west edge of Squash Square");
  set_long("This is the west side of Squash Square at the junction "
           "with Fruitbat Avenue.\n");
  set_light( 80 );
  add_exit("east", SQUASH + "squash5", "road");
  add_exit("west", FRUITBAT + "fruitbat4", "road");
  add_exit("north", SQUASH + "squash1", "road");
  add_exit("south", SQUASH + "squash7", "road");
  add_exit("northeast", SQUASH + "squash2", "hidden");
  add_exit("southeast", SQUASH + "squash8", "hidden");
  add_property( "los", "open" );
  set_linker(({ PATH + "squash5", PATH + "squash1", PATH + "squash7",
                 PATH + "squash2", PATH + "squash8" }),
              "into", "", "Squash Square");
  set_zone("pumpkin");
  set_monster(1, "city");
}

==================================================
FILE: dist/pumpkin/squash/squash5.c
==================================================

#include "path.h";
inherit CITYROOM;
void setup() {
  set_short("in the middle of Squash Square");
  set_long("This is the middle of Squash Square\n");
  set_light( 80 );
  add_exit("east", SQUASH + "squash6", "road");
  add_exit("west", SQUASH + "squash4", "road");
  add_exit("north", SQUASH + "squash2", "road");
  add_exit("south", SQUASH + "squash8", "road");
  add_exit("northeast", SQUASH + "squash3", "hidden");
  add_exit("northwest", SQUASH + "squash1", "hidden");
  add_exit("southeast", SQUASH + "squash9", "hidden");
  add_exit("northwest", SQUASH + "squash7", "hidden");
  add_property( "los", "open" );
  set_linker(({ PATH + "squash6", PATH + "squash4", PATH + "squash2",
                PATH + "squash8", PATH + "squash3", PATH + "squash1",
                PATH + "squash9", PATH + "squash7" }),
             "to a point", "", "Squash Square");
  set_monster(1, "city");
  set_zone("pumpkin");
  set_co_ord(({ 0, 0, 0 }));
}

==================================================
FILE: dist/pumpkin/squash/squash6.c
==================================================

#include "path.h";
inherit CITYROOM;
void setup() {
  set_short("east edge of Squash Square");
  set_long("This is east side of Squash Square at the junction "
           "with Rabbit Lane.\n");
  set_light( 80 );
  add_exit("east", RABBIT + "rabbit1", "road");
  add_exit("west", SQUASH + "squash5", "road");
  add_exit("north", SQUASH + "squash3", "road");
  add_exit("south", SQUASH + "squash9", "road");
  add_exit("northwest", SQUASH + "squash2", "hidden");
  add_exit("southwest", SQUASH + "squash8", "hidden");
  add_property( "los", "open" );
  set_linker(({ PATH + "squash5", PATH + "squash3", PATH + "squash9",
                PATH + "squash2", PATH + "squahs8" }),
             "into", "", "Squash Square");
  set_zone("pumpkin");
  set_monster(1, "city");
}

==================================================
FILE: dist/pumpkin/squash/squash7.c
==================================================

#include "path.h";
inherit CITYROOM;
void setup() {
  set_short("south west corner of Squash Square");
  set_long("This is the south west corner Squash Square\n");
  set_light( 80 );
  add_exit("east", SQUASH + "squash8", "road");
  add_exit("north", SQUASH + "squash4", "road");
  add_exit("northeast", SQUASH + "squash3", "hidden");
  add_property( "los", "open" );
  set_linker(({ PATH + "squash8", PATH + "squash4", PATH + "squash3" }),
             "to a point", "", "Squash Square");
  set_zone("pumpkin");
  set_monster(1, "city");
}

==================================================
FILE: dist/pumpkin/squash/squash8.c
==================================================

#include "path.h";
inherit CITYROOM;
void setup() {
  set_short("south edge of Squash Square");
  set_long("This is south side of Squash Square at the "
           "junction with Gumboot Road.\n");
  set_light( 80 );
  add_exit("east", SQUASH + "squash9", "road");
  add_exit("west", SQUASH + "squash7", "road");
  add_exit("north", SQUASH + "squash5", "road");
  add_exit("south", GUMBOOT + "gumboot1", "road");
  add_exit("northwest", SQUASH + "squash4", "hidden");
  add_exit("northeast", SQUASH + "squash6", "hidden");
  add_property( "los", "open" );
  set_linker( ({ PATH + "squash9", PATH + "squash7", PATH + "squash5",
                 PATH + "squash4", PATH + "squash6" }),
             "into", "", "Squash Square");
  set_zone("pumpkin");
  set_monster(1, "city");
}

==================================================
FILE: dist/pumpkin/squash/squash9.c
==================================================

#include "path.h";
inherit CITYROOM;
void setup() {
  set_short("south east corner of Squash Square");
  set_long("This is the south east corner Squash Square.\n");
  set_light( 80 );
  add_exit("west", SQUASH + "squash8", "road");
  add_exit("north", SQUASH + "squash6", "road");
  add_exit("northwest", SQUASH + "squash5", "hidden");
  add_exit("east", PATH + "beer_bar", "door");
  add_property( "los", "open" );
  set_linker(({ PATH + "squash8", PATH + "squash6", PATH + "squash5" }),
             "to a point", "", "Squash Square");
  set_zone("pumpkin");
  set_monster(1, "city");
}

==================================================
FILE: dist/pumpkin/terrain/desert.c
==================================================

#include "path.h";
inherit "/std/outsides/desert";
void setup() {
  set_short("Desert");
  set_long("A bunch of sand.");
  set_light( 80 );
}

==================================================
FILE: dist/pumpkin/terrain/desertpath.c
==================================================

inherit "/std/outsides/road";
void setup() {
   set_short("Road through desert");
   set_long("A road through the desert.");
   set_light(80);
}

==================================================
FILE: dist/pumpkin/terrain/path.h
==================================================

#include "../path.h"

==================================================
FILE: dist/pumpkin/terrain/plainpath.c
==================================================

inherit "/std/outsides/road";
void setup() {
   set_short("Road through plain");
   set_long("A road through the plain.");
   set_light(80);
}

==================================================
FILE: dist/pumpkin/terrain/plains.c
==================================================

#include "path.h";
inherit "/std/outsides/plain";
void setup() {
  set_short("Plains");
  set_long("A bunch of plains.");
  set_light( 80 );
}

==================================================
FILE: dist/pumpkin/terrain/terrain_handler.c
==================================================

#include <terrain_map.h>
#include "path.h"
inherit TERRAIN_MAP_HANDLER_BASE;
string query_map_file() {
    return __DIR__ + "terrain";
}
void setup_handler() {
    set_newline_mode(0);
   set_visible_distance(5);
   add_obstacle_type("H", "a lush, thick hedge surrounds the small garden",
     "hedge", "The hedge surrounds the garden, stretching thick and "
     "impenetrable towards the sky, protecting anyone in the garden from the "
     "gawking eyes of passers-by.");
   add_obstacle_type("*", "s big high lump that you cannot avoid looking at",
     "lump", "The lump is very lumpy.");
   add_feature("lump",
               16, 3,
               1, 1,
               15,
               ({
                  "a lump towers above you to the $D",
                }),
               "lump", "A lumpy thing that lumps around.",
               ({
                  "a lump at night to the $D",
                }),
               "It looks just like a lump, even though it is dark.");
   add_road_type("=", __DIR__ "plainpath",
     "", "a nice sandy path leads through the plains.");
   add_road_type("+", __DIR__ "woodpath",
     "", "a nice sandy path leads through the woods.");
   add_road_special_type("-", __DIR__ "desertpath",
     3,
     1,
     0,
     "", "a nice sandy path leads through the woods.");
   add_room_type("L", __DIR__ "plains");
   add_room_type("W", __DIR__ "woods");
   add_room_type("d", __DIR__ "desert");
   add_exit_at(0, 1, "west", GUMBOOT + "gumboot5", "road");
   add_exit_at(0, 18, "west", RABBIT + "rabbit4", "road");
}

==================================================
FILE: dist/pumpkin/terrain/woods.c
==================================================

#include "path.h";
inherit "/std/outsides/woodland";
void setup() {
  set_short("Woodlands");
  set_long("A bunch of trees.");
  set_light( 80 );
}

==================================================
FILE: dist/pumpkin/terrain/woodspath.c
==================================================

inherit "/std/outsides/road";
void setup() {
   set_short("Road through woods");
   set_long("A road through the woods.");
   set_light(80);
}
