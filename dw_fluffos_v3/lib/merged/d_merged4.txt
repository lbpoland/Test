# Total Tokens: 11386
# Total Files Merged: 19
# Total Characters: 38002

bie/introduction/examples/.advanced_item_4.food_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/food.c", 1 );
  clone->add_property( "virtual name", "/d/learning/newbie/introduction/examples/advanced_item_4.food#1" );
  call_other( clone, "set_name", "sandwich"  );
  call_other( clone, "set_short", "monkey sandwich"  );
  call_other( clone, "add_adjective", ({ "monkey" })  );
  call_other( clone, "set_value", 0  );
  call_other( clone, "set_weight", 1  );
  call_other( clone, "set_long", "This is a monkey sandwich.  Made from real monkey.  Mmm!\n"  );
  call_other( clone, "add_eat_effect",  "/std/effects/ingested/poison", 600 );
   return clone;
}

==================================================
FILE: learning/newbie/introduction/examples/.simple_object.clo_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/clothing.c", 1 );
  clone->add_property( "virtual name", "/d/learning/newbie/introduction/examples/simple_object.clo#1" );
  call_other( clone, "set_name",  "dungarees"  );
  call_other( clone, "set_short",  "pair of waterproof dungarees"  );
  call_other( clone, "set_long",  "This is a pair of waterproof dungarees.  Luckily they "     "are also ooze proof.\n"  );
  call_other( clone, "add_adjective",  ({"pair of", "waterproof"})  );
  call_other( clone, "set_weight",  45  );
  call_other( clone, "set_value",  4000  );
  call_other( clone, "setup_clothing",  50000  );
  call_other( clone, "set_type",  "robe" );
   return clone;
}

==================================================
FILE: learning/newbie/introduction/examples/.simple_weapon.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( "virtual name", "/d/learning/newbie/introduction/examples/simple_weapon.wep#1" );
  call_other( clone, "set_name",  "mop"  );
  call_other( clone, "set_short",  "dirty mop"  );
  call_other( clone, "set_long",  "This is a dirty mop, dripping with ooze.\n"  );
  call_other( clone, "add_adjective",  "dirty"  );
  call_other( clone, "set_weight",  20  );
  call_other( clone, "set_value",  2000  );
  call_other( clone, "new_weapon", 10000  );
  call_other( clone, "add_attack",  "prod", 50, ({ 5, 6, 6 }), "blunt", "blunt", 0  );
  call_other( clone, "add_attack",  "whack", 50, ({ 10, 10, 5 }), "blunt", "blunt", 0 );
   return clone;
}

==================================================
FILE: learning/newbie/introduction/examples/advanced_item_1.c
==================================================

inherit "/obj/baggage";
void setup() {
    set_name("bag");
    set_short("little green bag");
    set_long("This is a little green bag.\n");
    add_adjective(({"little", "green"}));
    set_weight(5);
    set_max_weight(20);
}
int test_add(object ob, int flag) {
    if(this_player()->query_name() != "drakkos") {
        return 0;
    }
    else {
        return ::test_add(ob, flag);
    }
}
int test_remove(object ob, int flag, mixed dest) {
    if(this_player()->query_name() != "drakkos") {
        return 0;
    }
    else {
        return ::test_remove(ob, flag, dest);
    }
}

==================================================
FILE: learning/newbie/introduction/examples/advanced_item_2.c
==================================================

inherit "/obj/clothing";
void setup() {
    set_name("trousers");
    set_short("pair of flourescent pink flared trousers");
    add_adjective(({"pair of", "flourescent", "pink", "flared"}));
    set_long("This is a pair of extremely stylish, extremely "
    "tasteful, flourescent pink flared trousers.\n");
    set_weight(10);
    set_value(0);
    set_type("trousers");
    add_alias("flares");
    set_main_plural("pairs of flourescent pink flared trousers");
    add_plural("trousers");
    setup_clothing(10000);
    add_pocket("left", 20);
    add_pocket("right", 20);
    set_wear_remove_func(base_name(this_object()), "do_wear_stuff");
}
void do_wear_stuff(object ob) {
    if(this_player()->query_name() != "drakkos") {
        if(!ob) {
            tell_object(this_player(), "You heave a sigh of relief as "
                "you remove the ghastly garment.\n");
        }
        else {
            tell_object(this_player(), "Ye gods, are you really going "
            "to wear those hideous things?!\n");
        }
    }
    else {
        if(!ob) {
            tell_object(this_player(), "Awww, why are you taking off your "
                "super-cool slacks?\n");
        }
        else {
            tell_object(this_player(), "You feel Real Cool as you slip "
                "into your fabulous flares!\n");
        }
    }
}

==================================================
FILE: learning/newbie/introduction/examples/advanced_item_3.c
==================================================

inherit "/obj/weapon";
void setup() {
    set_name("ruler");
    set_short("wooden ruler");
    add_adjective("wooden");
    set_long("This is a thick, wooden ruler, with the inches "
        "inked out in black.\n");
    set_weight(1);
    set_value(0);
    new_weapon(5000);
    add_attack("rap", 50,({ 25, 10, 5 }), "blunt", "blunt", "do_shame");
    add_attack_message( "rap", "blunt",
   ({
    0,({ "You rap $hcname$ smartly across the knuckles with your "
        "ruler.\n",
        "$mcname$ raps you smartly across the knuckles with $mposs$ "
            "ruler.\n",
        "$mcname$ raps $hcname$ smartly across the knuckles with "
            "$mposs$ ruler.\n"})
    }));
    set_wield_func( "test_creator", base_name( this_object() ) );
}
int test_creator(object ob)  {
    if(!ob) {
        return 1;
    }
    if(ob->query_corpse()) {
        return 1;
    }
    if(ob->query_creator()) {
        tell_object(ob, "You have been deemed worthy, leetle creator!\n");
        return 1;
    }
    else {
        tell_object(ob, "You have been deemed unworthy, leetle player!\n");
        return 0;
    }
}
void do_shame( int damage, object attack_ob, object attack_by, string
    type, string name ) {
    tell_object(attack_ob, "Your knuckles %^BOLD%^sting!%^RESET%^\n");
    tell_object(attack_by, "You feel strangely satisfied as " +
        attack_ob->one_short() + " whimpers in pain!\n");
}

==================================================
FILE: learning/newbie/introduction/examples/advanced_npc.c
==================================================

#include <armoury.h>
inherit "/obj/monster";
void do_bunny(object, object);
void do_maintain(object, object);
void setup() {
    set_name("gnome");
    set_short("laughing gnome");
    set_long("This is a little, friendly looking gnome.  Well... "
        "friendly looking aside from the vicious sharp teefs and the "
        "wicked razor-like claws.  He has laughter lines all over "
        "his face, tho', so he can't be all bad.\n");
    add_property("unique", 1);
    basic_setup("gnome", "wizard", 50);
    set_gender("male");
    set_int(23);
    set_str(18);
    set_wis(18);
    add_skill_level("magic", 100);
    add_skill_level("fighting", 50);
    load_chat(20,({
        1, "' Ha ha ha!.",
        1, "' He he he!.",
        2 , "' I'm the laughing gnome, and you can't catch me!",
        1 , "#charm_women",
    }) );
    load_a_chat(20,({
        2, ": bares his teeth.",
        1, "' I'll get my brother Fred onto you!.",
        2 , "' I'll call out the Gnome Guard!",
    }) );
    add_spell("bunnies", "/obj/spells/fire_bunny", "cast_spell");
    add_spell("flowers", "/obj/spells/flowers", "cast_spell");
    add_spell("shield", "/obj/spells/small_shield", "cast_spell");
    add_combat_action(25, "bunny_them",(: do_bunny :));
    add_combat_action(25, "maintain_me",(: do_maintain :));
    add_attack( "claws", 88,({ 10, 8, 20 }), "sharp", "sharp", 0 );
    add_attack( "teeth", 88,({ 5, 5, 25 }), "pierce", "pierce", 0 );
    add_attack_message( "claws", "sharp",
   ({
    100,
       ({ "You slice $hcname$ with your claws.\n",
            "$mcname$ slices you with $mposs$ claws.\n",
            "$mcname$ slices $hcname$ with $mposs$ claws.\n"}),
    200,
       ({ "You rip $hcname$ apart with your claws.\n",
            "$mcname$ rips you apart with $mposs$ claws.\n",
            "$mcname$ rips $hcname$ apart with $mposs$ claws.\n"}),
    0,
       ({ "You scratch $hcname$ viciously with your claws.\n",
            "$mcname$ scratches you viciously with $mposs$ claws.\n",
            "$mcname$ scratches $hcname$ viciously with $mposs$ claws.\n"})
    }));
    add_attack_message( "teeth", "pierce",
   ({
    100,
       ({ "You nibble $hcname$ with your teeth.\n",
            "$mcname$ nibbles you with $mposs$ teeth.\n",
            "$mcname$ nibbles $hcname$ with $mposs$ teeth.\n"}),
    200,
       ({ "You chew on $hcname$ with your teeth.\n",
            "$mcname$ chews on you with $mposs$ teeth.\n",
            "$mcname$ chews on $hcname$ with $mposs$ teeth.\n"}),
    0,
       ({ "You sink your teeth into $hcname$.\n",
            "$mcname$ sinks $mposs$ teeth into you.\n",
            "$mcname$ sinks $mposs$ teeth into $hcname$.\n"})
    }));
}
void charm_women() {
    object player;
    foreach(player in all_inventory(environment(this_object()))) {
        if(interactive(player) && player->query_gender() == 2) {
            queue_command("cast flowers");
            queue_command("give flowers to " + player->query_name());
            queue_command("bow with a flourish");
            return;
        }
    }
}
void do_bunny(object attacker, object target) {
    object carrot,torch;
    if(target != this_object() ) {
        if(!sizeof(match_objects_for_existence("carrot", this_object()))) {
            carrot =ARMOURY->request_item ("carrot");
            carrot->move(this_object());
        }
        if(!sizeof(match_objects_for_existence("torch", this_object()))) {
            torch = ARMOURY->request_item ("torch");
            torch->move(this_object());
        }
        do_command("cast bunnies on " + target->query_name());
    }
}
void do_maintain(object attacker, object target) {
    object temp;
    if(!sizeof(match_objects_for_existence("shields", this_object()))) {
        temp = ARMOURY->request_item("wooden djelian shield", 100);
        temp->move(this_object());
    }
    do_command("cast shield on " + this_object()->query_name());
}
void adjust_hp(int number) {
    return;
}

==================================================
FILE: learning/newbie/introduction/examples/advanced_room_1.c
==================================================

#include "path.h"
inherit "/std/outside";
void setup() {
    set_short("market square");
    set_day_long("This is a lovely market square, where people mill about "
        "doing the kind of things you would expect people to do in a lovely "
        "market square.  Brightly coloured stalls stand in the corners of "
        "the market.  They seem to do good business judging by the steady "
        "stream of consumers ducking under the flaps.\n");
    set_night_long("The darkness settles on this market square like a thick "
        "black blanket.  The stalls, undoubtedly merry and brightly coloured "
        "during the day, lie dormant and unusued.  The silence is "
        "deafening.\n");
    add_property("climate",({20, 20, 10}));
    set_light(80);
    add_zone("my rooms");
    set_linker(({PATH + "advanced_room_2", PATH + "advanced_room_3"}),
        "onto", "on", "the newbie creator marketplace");
    add_day_item(({"people", "consumers"}), "The people mill around happily, "
        "browsing the goods and talking with the stallowners.");
    add_night_item(({"people", "consumers"}), "They're all tucked up in "
        "bed.  Only crazed retrobrates like you are awake at this time of "
        "night.");
    add_day_item("stall", "The stalls are brightly coloured and really "
        "quite merry.");
    add_night_item("stall", "The stalls lie dormant in the night.  Creepy!");
    room_day_chat(({120,240,({
        "People mill around happily.",
        "The brightly coloured stalls attract the eye.",
    })}));
    room_night_chat(({120,240,({
        "The only sound is the chirping of the crickets.",
        "The stalls loom ominously in the darkness.",
    })}));
    add_exit("north", PATH + "advanced_room_3", "road");
    add_exit("south", PATH + "advanced_room_2", "road");
    add_exit("east", "/w/drakkos/workroom", "road");
    add_exit("west", PATH + "simple_room", "road");
    modify_exit("east",({"look", "You get the feeling that peeking into a "
        "creator's workroom is very rude!", "function", "test_creator"}));
}
int do_search(string str) {
    if(!sizeof(str)) {
        return -1;
    }
    if(str == "shards") {
        tell_object(this_player(), "You search through the shards, but "
            "succeed only in cutting your hand slightly.  Ouch!\n");
        this_player()->adjust_hp(-100);
        if(this_player()->query_hp() < 0) {
            this_player()->attack_by(this_object());
        }
    return 1;
    }
    else {
        notify_fail("Try searching something else, perhaps?\n");
        return 0;
    }
}
string query_death_reason() {
    return "a nasty cut in the newbie creator tutorial room";
}
int test_creator(string str, object ob, string special_mess) {
    if(!ob->query_creator()) {
        notify_fail ("");
        tell_object (ob, "You are not a creator!  You may not pass!\n");
        return 0;
    }
    else {
        tell_object(ob, "You feel a tingle down your spine as you take the "
            "exit.\n");
        return 1;
    }
}

==================================================
FILE: learning/newbie/introduction/examples/advanced_room_2.c
==================================================

#include "path.h"
inherit "/std/outside";
void setup() {
    set_short("road to the market");
    add_property("determinate", "the ");
    set_day_long("This is a quiet road.  Absolutely nothing of interest is "
        "here..\n");
    set_night_long("This is a quiet road.  But at night!.\n");
    set_linker(({PATH + "advanced_room_1", PATH + "advanced_room_3"}),
        "onto", "on", "the newbie creator marketplace");
    set_light(80);
    add_zone("my rooms");
    add_item("road", "I *said*, there's nothing interesting at all here.");
    add_exit("north", PATH + "advanced_room_1", "road");
}

==================================================
FILE: learning/newbie/introduction/examples/advanced_room_3.c
==================================================

#include "path.h"
inherit "/std/outside";
void setup() {
    set_short("road to the market");
    add_property("determinate", "the ");
    set_day_long("This is a quiet road.  Absolutely nothing of interest is "
        "here..\n");
    set_night_long("This is a quiet road.  But at night!.\n");
    set_linker(({PATH + "advanced_room_1", PATH + "advanced_room_2"}),
        "onto", "on", "the newbie creator marketplace");
    set_light(80);
    add_zone("my rooms");
    add_item("road", "I *said*, there's nothing interesting at all here.");
    add_exit("south", PATH + "advanced_room_1", "road");
}

==================================================
FILE: learning/newbie/introduction/examples/path.h
==================================================

#define PATH "/d/learning/newbie/introduction/examples/"

==================================================
FILE: learning/newbie/introduction/examples/simple_npc.c
==================================================

inherit "/obj/monster";
void setup() {
  set_name("blob");
  set_short("grey blob");
  set_long("This is a grey blob.  It is grey.  It is also quite "
      "blobby.\n");
  basic_setup("human", "warrior", 10);
  set_gender("male");
  add_adjective(({"oozing", "grey"}));
  set_main_plural("grey blobses");
  add_alias("porridge");
  add_respond_to_with(({ "@say",({"blob", "grey"}),
      }), "say Yes, I am a grey blob.");
  add_respond_to_with(({ "@say",({"ooze", "blue", "cardboard"}),
     ({"porridge", "bing", "womble"}),
      }), "' Yes, I'm oozing quite nicely, like grey "
          "blobs do.  Like porridge!");
  add_respond_to_with(({ "@thank", ({ "you", "blob" }) }),
      "' Aw, shucks. T'weren't nuthin'.");
  add_respond_to_with(({ ({"@gnaw", "@bite", "@chew"}), ({ "you",
    "blob" }) }),
      ({"' What did you do that for?!",  "scream", "cry", "weep"}));
  load_chat(20,({ 2, ": oozes around.",
      1, "' I'm very grey.",
      2 , "' I'm a blob.",
      2 , "@bing",
  }) );
  load_a_chat(20,({ 2, ": oozes all over you.",
      1, "' Lemme alone!.",
      2 , ": sobs bitter, slimy tears.",
  }) );
}

==================================================
FILE: learning/newbie/introduction/examples/simple_object.c
==================================================

inherit "/obj/clothing";
void setup() {
    set_name("dungarees");
    set_short("pair of waterproof dungarees");
    add_adjective(({"pair of", "waterproof"}));
    set_long("This is a pair of waterproof dungarees.  Luckily they "
        "are also ooze proof.\n");
    add_adjective(({"pair of", "waterproof"}));
    set_weight(45);
    set_value(4000);
    setup_clothing(50000);
    set_type("robe");
}

==================================================
FILE: learning/newbie/introduction/examples/simple_room.c
==================================================

#include "path.h"
inherit "/std/room";
void setup() {
    set_short("blobby lair");
    set_long("This is where the grey blob lives.  All around lie "
        "frogs, and wombles, and strange oozy things.  It's a "
        "very nice lair, as lairs go.\n");
    add_property("determinate", "a ");
    set_light(50);
    add_item(({"frog", "pinkfish", "toad"}),({"long", "The frogs are very "
        "nice.  Very froggy.", "position", "one of the poor leetle "
        "frogs."}));
    add_item(({"womble", "uncle bulgaria"}),({"long", "It's Uncle "
        "Bulgaria!", "pet", "You pet Uncle Bulgaria.  He growls and "
        "chews the nails off your hand.\n", "snuggle", "Uncle Bulgaria gnaws "
        "on your teeth.\n"}));
    add_item("strange oozy things", "Ewww!");
    add_zone("my rooms");
    add_sign("This is a nice sign.\n", "Do Notte Feed Thee Blob!",
        "nice sign", "sign", "common");
    room_chat(({120,240,({
        "A thick blob of goo oozes over one of the frogs.",
        "The womble bings quietly.",
        "The frogs ribbit in abstract contemplation.",
    })}));
    add_exit("east", PATH + "advanced_room_1", "road");
}
void reset() {
    call_out("after_reset", 3);
}
void after_reset() {
    object ob = find_object
        (PATH + "simple_npc");
    if(!ob) {
        ob=load_object(PATH + "simple_npc");
        ob->move(this_object(), "$N appear$s with a wet squelch.\n");
    }
    else if(!environment(ob)) {
        ob->move(this_object(), "$N appear$s with a wet squelch.\n");
    }
}

==================================================
FILE: learning/cutnpaste/althea.c
==================================================

#define CREATOR "Ceres"
#include <armoury.h>
inherit "/obj/monster";
#define HEAL_COST 30
object flail;
int dickens_warned;
void do_heal(object);
void check_injured();
void maintain_self(object, object);
void fighting_stuff(object, object);
void ritual_stuff(object, object);
void setup() {
    set_name("althea");
    set_short("Althea of Pishe");
    set_main_plural("Altheas of Pishe");
    set_long("This is Althea, an Archcardinal of Pishe.  She is a beautiful, "
      "middle-aged woman with a kind face.  She almost seems to glow "
      "with a gentle power.\n");
    add_adjective(({"arch", "cardinal", "of", "pishe"}));
    add_alias(({"priestess", "archcardinal", "cardinal"}));
    add_property("determinate","");
    add_property("unique", 1);
    set_gender("female");
    set_race("human");
    set_guild("priest");
    set_deity("pishe");
    set_level(400);
    set_height(140);
    set_weight(1000);
    set_al(-2000 - random(501));
    set_con(15);
    set_dex(13);
    set_int(12);
    set_str(15);
    set_wis(20);
    add_skill_level("fighting", 300, 0);
    add_skill_level("fighting.combat.melee.blunt", 150, 0);
    add_skill_level("faith", 200);
    add_skill_level("faith.rituals.misc.area", 300);
    add_skill_level("other.perception", 400, 0);
    add_skill_level("other.health", 200, 0);
    add_known_command("strike");
    add_known_command("crush");
    add_spell("cure light wounds", "/obj/rituals/curelight", "cast_spell");
    add_spell("cure serious wounds", "/obj/rituals/cureserious", "cast_spell");
    add_spell("cure critical wounds", "/obj/rituals/curecritical", "cast_spell");
    add_spell("minor shield", "/obj/rituals/minorshield", "cast_spell");
    add_spell("dust devil", "/obj/rituals/dustdevil", "cast_spell");
    add_combat_action(100, "maintenance", (: maintain_self :)) ;
    add_combat_action(70, "fighting_stuff", (: fighting_stuff :));
    add_combat_action(50, "ritual_stuff", (: ritual_stuff :));
    ARMOURY->request_item("white cotton tunic", 100)->move(this_object());
    ARMOURY->request_item("rope belt", 100)->move(this_object());
    ARMOURY->request_item("soft leather shoes", 100)->move(this_object());
    clone_object("/obj/faith/pishe_symbol.ob")->move(this_object());
    do_command("tactics response parry");
    do_command("tactics attitude defensive");
    load_chat(20, ({ 2, ":smiles kindly.",
        1, "'May the countenance of Pishe rain upon you.",
        2, ":smiles serenely." }));
    load_a_chat(20, ({ 1, "'Do you know who I am?",
        1, "'May the power of Pishe strike you down.",
        1, "'Die unbeliever!",
        1, "'You fight me, you fight Pishe herself",
        1, "'Pishe! Aid your loyal servant!" }));
    set_virtual_move(1);
    set_move_after(30, 120);
    add_move_zone("Ankh-Morpork");
    add_move_zone("Temple");
    set_wimpy(10);
    add_respond_to_with(({ "@say",
        ({ ({ "heal", "healing" }), "please" }) }), (: do_heal :));
    add_respond_to_with(({ "@say",
        ({ "please", "heal", "me" }) }), (: do_heal :));
    add_respond_to_with(({ "@smile", "althea" }), "smile $hname$");
    add_respond_to_with(({ ({ "@bow", "@curtsey" }), "althea" }),
      "curtsey $hname$");
    add_enter_commands((: check_injured :));
    flail = ARMOURY->request_item("cleric rod", 100);
    flail->set_enchant(flail->query_max_enchant() / 2);
    flail->whichone(7);
    flail->move(this_object());
    call_out((: init_equip :), 2);
    move("/d/guilds/priests/Ankh-Morpork/small-gods/old/PriestGardenStatue", "$N walk$s into the "
      "room, smiling serenely.");
}
void maintain_self(object thing1, object thing2) {
    if (thing2 != this_object())
        return;
    if (member_array(flail, query_holding()) == -1) {
        queue_command("get flail");
        queue_command("hold flail");
    }
    if (query_gp() < 200)
        adjust_gp(200);
    if (query_hp() < query_max_hp() / 2) {
        do_command("cast cure serious wounds on althea");
    }
    if(query_hp() < query_max_hp() - 1000) {
        do_command("cast dust devil on althea");
    }
    if (query_hp() < query_max_hp() - 500) {
        do_command("cast minor shield on althea");
    }
    if (query_hp() < query_max_hp() - 250) {
        do_command("cast cure light wounds on althea");
    }
}
void fighting_stuff(object thing1, object thing2) {
    if (thing2 != this_object())
        return;
    if ( random( 10 ) )
        return;
   do_command("concentrate " + thing1->query_name());
    do_command("tactics attitude offensive" );
    do_command("crush "+ thing1->query_name() + " with flail");
}
void ritual_stuff(object thing1, object thing2) {
    if (thing2 != this_object())
        return;
    switch (random(6)) {
    case 0..1:
        do_command( "cast minor shield on althea" );
        break;
    case 2 .. 4 :
        do_command("cast dust devil on althea");
        do_command("cast dust devil on althea");
        do_command("cast dust devil on althea");
        break;
    case 5 :
        do_command("use flail to cast fear on " + thing1->query_name());
        break;
    }
    do_command("tactics attitude defensive");
}
void do_heal(object victim) {
    if (member_array(victim, query_attacker_list()) != -1) {
        do_command("say I'm not going to heal you!");
        return;
    }
    if (victim->query_hp() > (victim->query_max_hp() / 2)) {
        do_command("say You don't need healing from me, " +
          victim->short()+".");
        return;
    }
    if (victim->query_gp() < HEAL_COST) {
        do_command("say Sorry you're not strong enough for me to "
          "heal at the moment.\n");
        return;
    }
    if (victim->query_guild_ob() == "/std/guilds/wizard") {
        do_command("say I thought wizards didn't believe in gods?");
        do_command("smirk");
        return;
    }
    if (victim->query_al() > random(300)) {
        do_command("say You are far too wicked for Pishe's healing.");
        return;
    }
    do_command("say May the power of Pishe heal you.");
    tell_room(environment(), "Althea places her hands upon " +
      victim->the_short() + " and starts to pray softly.\n");
    tell_room(environment(), "As she does so her hands start to glow with a "
      "gentle silver light.\nThe light gradually intensifies until "
      "everything is bathed in it.\n");
    tell_object(victim, "As Althea prays you feel warmth spreading from her "
      "hands throughout your body.\n");
    tell_room(environment(), "Gradually the light fades.\n");
    tell_object(victim, "You feel much better.\n");
    tell_room(environment(), victim->the_short()+" looks much better.\n",
      victim);
    victim->set_hp(victim->query_max_hp());
    victim->adjust_gp(-HEAL_COST);
}
void check_injured() {
    object *people, person;
    people = filter(all_inventory(environment()), (: living($1) &&
        ($1->query_hp() < ($1->query_max_hp() / 2)) &&
        $1->query_al() < -300 :));
    people -= ({ this_object() });
    if (!sizeof(people))
        return;
    person = people[random(sizeof(people))];
    do_command("say Oh my, " + person->short()+ " you don't look so good.");
    do_command("say Allow me to heal you.");
    call_out((: do_heal($1) :), 1, person);
}
void event_fight_in_progress(object attacker, object victim) {
    if ( attacker != this_object() && victim->query_name() == "dickens" ) {
        if ( !dickens_warned ) {
            do_command( "say Fear not, Dickens, Pishe"
                " shall protect you!" );
            dickens_warned = 1;
            do_command( "protect dickens" );
            attack_ob( attacker );
        }
    }
    ::event_fight_in_progress( attacker, victim );
}
int adjust_hp(int hp, object attacker) {
    int result;
    result = ::adjust_hp(hp, attacker);
    if(hp < -1500)
        call_out("eek", 0);
    return result;
}
void eek() {
    init_command("use flail to cast sanctuary", 1);
    init_command("cast cure critical wounds on althea", 2);
    run_away();
}
void check_fumble( object ob ) {
    if ( environment( ob ) == environment() ) {
        do_command( "say Whoops, I must have dropped my precious flail!" );
        do_command( "get " + file_name( ob ) );
        do_command( "hold " + file_name( ob ) );
    }
}
void event_enter( object ob, string mess, object from ) {
    ::event_enter( ob, mess, from );
    if ( environment( ob ) == environment() &&
        ob->id( "flail" ) && ob->query_cloned_by() == "althea" ) {
        call_out( (: check_fumble :), 1, ob );
    }
}

==================================================
FILE: learning/cutnpaste/kess.c
==================================================

#define CREATOR "Ceres"
#include <armoury.h>
inherit "/obj/monster";
object rod;
void setup() {
  object chain;
  set_name("kess");
  set_short("Kess of Sek");
  set_main_plural("Kesses of Sek");
  set_long( "This is Kess, an Archcardinal of Sek.  She is a young woman, "+
           "and beautiful in a twisted kind of way.  She seems fairly "+
           "innocuous until you notice her eyes and see the vicious look in "+
           "them.\n" );
  add_adjective(({"archcardinal", "of", "sek"}));
  add_alias(({"priestess", "archcardinal", "cardinal"}));
  add_property("determinate","");
  add_property("unique", 1);
  set_gender("female");
  set_race("human");
  set_class("priest");
  set_deity("sek");
  set_level(260);
  set_height(140);
  set_weight(1000);
  set_al(2000);
  adjust_str(2);
  adjust_con(2);
  adjust_wis(5);
  adjust_int(-6);
  adjust_dex(-3);
  add_skill_level( "faith.items.rod", 250, 0 );
  add_skill_level( "fighting.combat.melee.blunt", 200, 0 );
  add_skill_level( "fighting.combat.parry.held", 200, 0 );
  add_known_command("kick");
  add_spell( "paralysis", "/obj/rituals/paralysis",
            "cast_spell" );
  add_spell( "fear", "/obj/rituals/fear",
            "cast_spell" );
  add_spell("cure medium wounds", "/obj/rituals/curemedium",
            "cast_spell" );
  add_spell("calm", "/obj/rituals/calm",
            "cast_spell" );
  add_spell( "rage", "/obj/rituals/rage",
            "cast_spell" );
  set_join_fights( "Blood-lust glows in Kess' eyes as she dives "+
                   "into the melee.\n" );
  set_join_fight_type(1);
  chain = ARMOURY->request_armour("chainmail", 100);
  chain->add_ac("magic", "magic", 60);
  chain->add_ac("fire", "fire" , 60);
  chain->add_ac("cold", "cold", 60);
  chain->move(this_object());
  chain->add_property("holy amulet", "sek");
  chain->add_property("sek", 1);
  ARMOURY->request_armour("blood red cloak", 100)->move(this_object());
  ARMOURY->request_armour("rope belt", 100)->move(this_object());
  ARMOURY->request_armour("soft leather shoes", 100)->move(this_object());
  rod = ARMOURY->request_weapon( "cleric rod", 100 );
  rod->whichone(6);
  rod->set_enchant(8);
  rod->move(this_object());
  clone_object("/obj/faith/sek_symbol.arm")->move(this_object());
  init_equip();
  ((object)ARMOURY->request_weapon("dagger", 100))->move(this_object());
  do_command("tactics response parry");
  do_command("tactics parry both");
  do_command("tactics attitude offensive");
  load_chat(20, ({2, ":smiles viciously.",
                  1, "@glare $lname$",
                  1, "@smirk",
                }));
  load_a_chat(20, ({1, "'Do you know who I am?",
                    1, "'Die unbeliever!",
                    1, "'You fight me, Sek will rip your heart out!"}) );
  set_virtual_move(1);
  set_move_after(30, 120);
  add_move_zone("Ankh-Morpork");
  add_move_zone("sek");
  add_enter_commands("#get_heart");
  add_combat_action(100, "maintenance", ({ "maintain_self" }) );
  add_combat_action(70, "fighting_stuff", ({ "fighting_stuff" }) );
  add_combat_action(50, "reequip", ({ "reequip" }));
}
void reequip(object thing1, object thing2) {
  if(this_object()->query_holding()[0] != rod) {
    do_command( "get yellow rod" );
    do_command( "hold yellow rod" );
  }
}
void fighting_stuff(object thing1, object thing2) {
  if(thing2 != this_object())
    return;
  switch(random(6)) {
  case 5:
    do_command("cast rage on "+thing1->query_name());
    break;
  case 4:
    do_command("cast fear on "+thing1->query_name());
    break;
  case 3:
    do_command("cast paralysis on "+thing1->query_name());
    break;
  case 2:
    do_command("use rod to cast dustdevil");
    break;
  case 1:
    do_command("use rod to cast barrier");
    break;
  default:
    do_command("concentrate on "+thing1->query_name());
    do_command("kick "+thing1->query_name());
    break;
  }
}
void maintain_self( object thing1, object thing2 ) {
   if ( thing2 != this_object() )
      return;
   if ( query_gp() < 200 )
      adjust_gp( 200 );
   if ( query_hp() < query_max_hp() / 4 )
     do_command( "use rod to cast sanctuary" );
   if ( query_hp() < query_max_hp() / 2 )
     do_command( "cast calm on "+thing1->query_name());
   if ( query_hp() < query_max_hp() )
     do_command( "cast cure medium wounds on kess" );
}
void event_death(object thing) {
  if(thing != this_object()) {
    call_out("get_heart", 3);
  }
}
void get_heart() {
  object corpse;
  if(find_match("corpse", environment()) != ({})) {
    do_command("hold dagger");
    do_command("get heart from corpse");
    do_command("eat heart");
    do_command("hold rod");
  }
}
int adjust_hp(int hp, object attacker) {
  ::adjust_hp(hp, attacker);
  if(hp < -300) {
    init_command("cast cure medium wounds on kess");
    if(!random(3))
      call_out("eek", 0);
  }
}
void eek() {
  do_command("lose all");
  run_away();
}

==================================================
FILE: learning/items/matcher.c
==================================================

inherit "/std/object";
#define CMD 0
#define PAT 1
void add_cmds( object player );
int do_add( string command, string pattern );
int do_remove( int i );
int do_match( object *indirect_obs, string dir_match,
    string *indirect_match, mixed args, string pattern );
string read_msg();
string *cmds = ({});
void setup() {
  set_name( "matcher" );
  set_short( "Tannah's pattern matcher" );
  add_property( "determinate", "" );
  add_alias( "pattern matcher" );
  set_long(
    "This is a very handy wossname, useful for testing patterns you "
    "might like to use in an add_command.\n"
  );
  add_adjective( ({ "handy", "patterned" }) );
  set_weight( 1 );
  set_value( 0 );
  add_property( "no recycling", 1 );
}
void init() {
  add_cmds( this_player() );
}
void add_cmds( object player ) {
  set_read_mess( (: read_msg :) );
  player->add_command( "add", this_object(), "command <word'command'> "
      "with pattern <string:quoted'pattern'>",
      (: do_add( $4[0], $4[1] ) :) );
  player->add_command( "remove", this_object(), "command <number>",
      (: do_remove( $4[0] ) :) );
  if( sizeof( cmds ) ) {
    for( int i = 0; i < sizeof( cmds ); i++ )
      player->add_command( cmds[i][CMD], this_object(), cmds[i][PAT],
          (: do_match :) );
  }
}
int do_add( string command, string pattern ) {
  cmds += ({ ({ command, pattern }) });
  this_player()->remove_object( this_object(), 1 );
  add_cmds( this_player() );
  printf( "You add the command \"%s\" with the pattern \"%s\" to the "
      "pattern matcher.\n", command, pattern );
  return 1;
}
int do_remove( int i ) {
  if( i >= sizeof( cmds ) || i < 0 ) {
    printf( "Invalid command number.\n" );
    return 0;
  }
  printf( "You remove the command \"%s\" with the pattern \"%s\" from "
      "the pattern matcher.\n", cmds[i][CMD], cmds[i][PAT] );
  cmds = cmds[0..i-1] + cmds[i+1..];
  this_player()->remove_object( this_object(), 1 );
  add_cmds( this_player() );
  return 1;
}
int do_match( object *indirect_obs, string dir_match,
    string *indirect_match, mixed args, string pattern ) {
  printf( "Indirect objects: %O\n", indirect_obs );
  printf( "Direct match: %s\n", dir_match );
  printf( "Indirect match: %O\n", indirect_match );
  printf( "Args: %O\n", args );
  printf( "Pattern: \"%s\"\n", pattern );
  return 1;
}
string read_msg() {
  int i;
  string msg;
  msg = "The pattern matcher is currently set to test the following "
        "commands and patterns:\n";
  if( !sizeof( cmds ) ) msg += "  None.\n";
  else for( i = 0; i < sizeof( cmds ); i++ ) {
    msg += sprintf( "[%d] \"%s\", \"%s\"\n", i, cmds[i][CMD],
           cmds[i][PAT] );
  }
  msg += "See 'syntax add' and 'syntax remove' to modify the list.";
  return msg;
  msg += "For further [nearly accurate] information on add_command, "
    "see the files in /w/tannah/learning/add_cmd.\n";
}
void list_cmds() {
  printf( "Commands and patterns added:\n%O\n", cmds );
}

==================================================
FILE: learning/chars/npc_example.c
==================================================

inherit "/obj/monster";
#include <armoury.h>
object comb;
void setup() {
   set_name( "ralph" );
   set_short( "Ralph the spotted giraffe" );
   add_property( "determinate", "" );
   add_adjective( "spotted" );
   set_main_plural("Ralph the spotted giraffes");
   add_plural(( { "ralphs", "giraffes" } ));
   add_alias(( { "giraffe", "Ralph" } ));
   set_long( "This is Ralph the spotted giraffe.  He is just an example in "
             "this file so I won't describe him although I should.  Well, "
             "okay then... He's like any normal giraffe except for his cool "
             "black specs and mop fringe.  He is coolnes personified.\n" );
   add_property( "unique", 1 );
   set_race( "horse" );
   set_guild("wizard");
   set_height( 300 );
   set_weight( 1600 );
   set_gender( 1 );
   set_al( -500 );
     set_level( 15 );
   set_con(18);
   set_dex(18);
   set_str(16);
   set_wis(15);
   set_int(15);
   add_move_zone( "Short" );
   add_move_zone( "Filigree" );
   set_move_after( 50, 60 );
   set_virtual_move(1);
   load_chat( 90, ({
      3, "@grin",
      3, "@high5 $lname$",
      2, "@bless $lname$",
      1, "@moonwalk",
      1, "'Far out man.",
      1, ({
         "'Hey, if it isn't $lname$!",
         "'You're looking cool as usual!"
      }),
      1, ":tells you: Hey my man!  Watcha up to?",
      1, "'That's cool.",
      1, "'Chillin' out here, are we?",
      1, "@ruffle $lname$",
      1, "@wink $lname$",
      2, ":does a really complicated tap dance manoeuvre.",
      1, "'Let's do something wild and crazy...",
      1, ({
         "'Yoho, how's it hangin'?",
         "'I'm in a darn good mood today!"
      }),
      1, ":tells you: Ouch man, where the heck did you find those clothes?"
   }) );
   load_a_chat( 100, ({
     1, "'Wait till Hobbes hears about this!",
     1, "'It's SO uncool to fight!",
     1, "@scream",
     1, "You can't believe you're fighting such a nice creature as Ralph.",
     1, ":seems to wish he was somewhere else."
     }) );
   ARMOURY->request_weapon("meat cleaver", 80+random(20))->move(this_object());
   ARMOURY->request_armour("gigantic dog collar", 100)->move(this_object());
   ARMOURY->request_armour("straw hat", 80)->move(this_object());
   comb=clone_object("/d/am/items/comb");
   comb->move( this_object() );
   init_equip();
}

==================================================
FILE: learning/chars/path.h
==================================================

#include <learning.h>
#define TERRAIN_TUTORIAL HELP +"rooms/terrains/"
