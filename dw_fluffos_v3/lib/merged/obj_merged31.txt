# Total Tokens: 22044
# Total Files Merged: 42
# Total Characters: 73609

_ring.c
==================================================

inherit "obj/armour";
string owner, giver;
void setup() {
   set_name( "ring" );
   set_short( "wedding ring" );
   add_adjective( "wedding" );
   set_long( "This is a wedding ring crafted from the purest gold from the "+
      "mines of Rimward Klatch.\n" );
   set_main_plural( "wedding rings" );
   set_type( "ring" );
   add_property( "shop type", "jewellers" );
   add_property( "no recycling", 1 );
   set_weight( 1 );
   setup_armour( 1000 );
   set_percentage( 100 );
   set_damage_chance( 0 );
   owner = giver = "nobody";
   set_wear_remove_func( file_name( this_object() ), "wear_remove" );
}
void do_inscription() {
   string language;
   object player;
   player = find_player( giver );
   if( !player ) {
      player = find_player( owner );
   }
   language = player->query_default_language();
   set_read_mess( "\"For you, "+ capitalize( owner ) +
         ", with eternal love, "+ capitalize( giver ) +".\"", language );
}
string query_owner() { return owner; }
void set_owner( string word ) {
  owner = lower_case( word );
  do_inscription();
}
string query_giver() { return giver; }
void set_giver( string word ) {
  giver = lower_case( word );
  do_inscription();
}
void wear_remove( int wear ) {
   if( environment() != this_player() )
      return;
   if ( living( environment() )  &&  wear ) {
      if ( (string)this_player()->query_name() != owner )
         write( "The ring feels uncomfortable on your finger.\n" );
      else
         write( "You are warmed anew by "+ capitalize( giver ) +"'s love.\n" );
   }
}
mixed *stats() {
   return ::stats() + ({
      ({ "owner", owner }),
      ({ "giver", giver }),
   });
}
void init_dynamic_arg( mapping args ) {
   if ( args[ "::" ] )
      ::init_dynamic_arg( args[ "::" ] );
   if ( args[ "owner" ] )
      owner = lower_case( args[ "owner" ] );
   if ( args[ "giver" ] )
      giver = lower_case( args[ "giver" ] );
}
mapping query_dynamic_auto_load() {
   return ([
      "::" : ::query_dynamic_auto_load(),
      "owner" : owner,
      "giver" : giver
   ]);
}

==================================================
FILE: misc/oddsnends/beeswax_candle.c
==================================================

inherit "/std/lightable";
void setup() {
   set_name( "candle" );
   set_short( "beeswax candle" );
   add_adjective( "beeswax" );
   set_long( "This is a small candle, like you'd "
         "see on a birthday cake.  It is quite soft and "
         "squidgy.\n" );
   set_fuel_messages( ({
         "It is almost burnt to a stub.", 10,
         "It is more than halfway burnt.", 50,
         "It is not yet halfway burnt.", 85,
	 "It is almost new.", 99,
         "It is new.", 100
         }) );
   set_empty_mess( "is burnt to a stub." );
   set_max_fuel( 900 );
   set_fuel( 900 );
   set_brightness( 60 );
   set_value( 24 );
   set_hold_required( 1 );
   add_property( "no recycling", 1 );
   new_weapon( 10 );
   set_weight( 1 );
   set_hide_cond( 1 );
}

==================================================
FILE: misc/oddsnends/book_end.c
==================================================

inherit "/std/object";
void setup(){
    set_name("end");
    set_short("book end");
    set_main_plural("book ends");
    set_long("A glittering book end wrought in iron.  Just the thing"
	     " for Auntie's Hogswatchday present.\n" );
    set_value(35);
    set_weight(40);
}

==================================================
FILE: misc/oddsnends/bottleopener.c
==================================================

inherit "/std/object";
void setup(){
    set_name("opener");
    set_short("bottle opener");
    add_adjective("bottle");
    set_main_plural("bottle openers");
    set_long("This is a multipurpose bottle opener that "
             "works for left- and right-handed people.\n");
    set_value(15);
    set_weight(5);
}

==================================================
FILE: misc/oddsnends/buffing_cloth.c
==================================================

inherit "/std/object";
void setup(){
    set_name("cloth");
    set_short("buffing cloth");
    set_main_plural("buffing cloths");
    add_adjective( "buffing" );
    set_long("This is a small, soft cloth that might be used for polishing"
	     " metal objects.\n" );
    set_value(32);
    set_weight(2);
}

==================================================
FILE: misc/oddsnends/glass.c
==================================================

#include <volumes.h>
inherit "/obj/vessel";
void setup(){
    set_name("glass");
    set_short("glass");
    set_long("This is a limited edition authentic "
             "scumble measure glass, as produced by the "
             "ancient scumble brewers.  It is very exclusive.\n");
    set_max_volume(VOLUME_HALFPINT);
    set_max_weight(10);
    set_leak_rate(0);
    set_value(30);
    set_weight(5);
    set_stuck(1);
}

==================================================
FILE: misc/oddsnends/hair_brush.c
==================================================

inherit "/std/object";
void setup(){
    set_name("brush");
    set_short("stiff hair brush");
    add_adjective("hair");
    add_adjective("stiff");
    set_long("This is a small brush with rather stiff tines "
             "sticking out from it.  It looks like just the thing to "
             "straighten out your hair after a sandstorm.\n");
    set_value(10);
    set_weight(20);
}

==================================================
FILE: misc/oddsnends/nail.c
==================================================

inherit "/std/object";
void setup(){
    set_name("nail");
    set_short("nail");
    set_main_plural("nails");
    set_long("A typical nail for nailing bits of wood together."
	     "  Quite exciting really.\n" );
    set_value(4);
    set_weight(1);
}

==================================================
FILE: misc/oddsnends/paint_brush.c
==================================================

inherit "/std/object";
void setup(){
    set_name("brush");
    set_short("camel hair brush");
    add_adjective("hair");
    add_adjective("camel");
    add_adjective("paint");
    set_long("This is a small paint brush with fine camel hairs sticking "
             "out.  It looks to be better suited to the finer arts than for"
             " painting wagons with.\n");
    set_value(15);
    set_weight(15);
}

==================================================
FILE: misc/oddsnends/picframe.c
==================================================

inherit "/obj/container";
void setup(){
    set_name("frame");
    set_short("picture frame");
    add_adjective("picture");
    set_long("A lovely gold painted picture frame.\n");
    set_value(20);
    set_weight(30);
    set_max_weight(1);
    set_open();
    set_stuck(1);
}

==================================================
FILE: misc/oddsnends/safety_clip.c
==================================================

inherit "/std/object";
void setup(){
    set_name("clip");
    set_short("safety clip");
    add_adjective("safety");
    set_long("This is a high technology item.  "
             "It is designed to be used as a buckle, and "
             "will safeguard you from much harm if used "
             "properly.\n");
    set_value(25);
    set_weight(2);
}

==================================================
FILE: misc/oddsnends/shoehorn.c
==================================================

inherit "/std/object";
void setup(){
    set_name("horn");
    set_short("shoe horn");
    add_adjective("shoe");
    set_long("A normal shoe horn.\n");
    set_value(10);
    set_weight(5);
}

==================================================
FILE: misc/oddsnends/shoelace.c
==================================================

inherit "/std/object";
void setup(){
    set_name("lace");
    set_short("shoe lace");
    add_adjective("shoe");
    add_alias("shoelace");
    set_main_plural("shoe laces");
    add_plural("shoelaces");
    set_long("A bright yellow coloured shoelace, "
             "just the kind of thing a teenage kid would wear.\n");
    set_value(15);
    set_weight(2);
}

==================================================
FILE: misc/oddsnends/small_keyring.c
==================================================

inherit "/obj/misc/keyring";
void setup(){
    set_name("keyring");
    set_short("small keyring");
    set_main_plural("small keyrings");
    add_adjective( "small" );
    set_long("This is a small keyring, suitable for holding a few "
     "small keys.\n" );
    set_weight(1);
    set_max_weight( 10 );
    set_value( 200 );
}

==================================================
FILE: misc/oddsnends/wedge.c
==================================================

inherit "/std/object";
void setup(){
    set_name("wedge");
    set_short("door wedge");
    add_adjective("door");
    set_main_plural("door wedges");
    set_long("A common wooden door wedge.  "
             "You use them to hold a door open.\n");
    set_value(10);
    set_weight(10);
}

==================================================
FILE: misc/shops/item_shop_safe.c
==================================================

inherit "/obj/baggage";
void set_max_float( int );
int query_max_float();
void setup() {
  set_name( "safe" );
  set_short( "cash safe" );
  set_long( "This safe is used to keep the shop's float in.  It's securely set "
    "in the wall.\n" );
  add_adjective( "float" );
  add_property( "there", "in the wall" );
  set_difficulty( 10 );
  reset_get();
  set_closed();
  set_locked();
  set_key( "non-existent key" );
  add_property( "no recycling", 1 );
  set_pick_skill( "covert.lockpick.safes" );
  set_weight( 2000 );
  set_max_weight( 5000 );
  set_value( 120000 );
}
int pick_unlock( object player ){
  this_object()->set_unlocked();
    return 1;
}
int query_accept_money() {
  return 1;
}

==================================================
FILE: misc/locks/basic_door_lock.c
==================================================

inherit "/obj/misc/lock";
void setup() {
   set_name("lock");
   set_short("basic door lock");
   add_adjective( ({ "basic", "door" }));
   set_long("A basic brass door lock.\n");
   add_property("difficulty", 2);
   set_weight(19);
   set_value(20000);
}
void set_key_number(int num) {
   add_property("key prop", "door_lock_"+num);
   add_property("locktype", "door");
}

==================================================
FILE: misc/locks/basic_furniture_lock.c
==================================================

inherit "/obj/misc/lock";
void setup() {
   set_name("lock");
   set_short("basic furniture lock");
   add_adjective( ({ "basic", "furniture" }));
   set_long("A basic brass furniture lock.\n");
   add_property("difficulty", 1);
   set_weight(19);
   set_value(10000);
}
void set_key_number(int num) {
   add_property("key prop", "furniture_lock_"+num);
   add_property("locktype", "furniture");
}

==================================================
FILE: misc/locks/brass_door_key.c
==================================================

inherit "/std/key";
void set_key_number(int num) {
   set_key("small brass", "door_lock_" + num);
   set_long("A small brass key.  It has a serial number " +
            num + " engraved on it.\n");
   set_value(10);
}
mapping query_static_auto_load() {
   return int_query_static_auto_load();
}
int query_duplicatable_key() {
   return 1;
}

==================================================
FILE: misc/locks/chubby_special_door_lock.c
==================================================

inherit "/obj/misc/lock";
void setup() {
   set_name("lock");
   set_short("chubby special door lock");
   add_adjective( ({ "chubby", "special", "door" }));
   set_long("A chubby special brass door lock.  These high-quality "
                     "locks are made by Grabthroat Shinkicker and Sons.  "
                     "Contrary to popular belief the locks are called "
                     "chubby's not because of their thickness but because "
                     "Grabthroat's real name is Charles and his "
                     "nickname is Chubby.\n");
   add_property("difficulty", 8);
   set_weight(19);
   set_value(160000);
}
void set_key_number(int num) {
   add_property("key prop", "door_lock_"+num);
   add_property("locktype", "door");
}

==================================================
FILE: misc/locks/chubby_standard_door_lock.c
==================================================

inherit "/obj/misc/lock";
void setup() {
   set_name("lock");
   set_short("chubby standard door lock");
   add_adjective( ({ "chubby", "standard", "door" }));
   set_long("A chubby standard brass door lock.  These "
                     "high-quality "
                     "locks are made by Grabthroat Shinkicker and Sons.  "
                     "Contrary to popular belief the locks are called "
                     "chubby's not because of their thickness but because "
                     "Grabthroat's real name is Charles and his "
                     "nickname is Chubby.\n");
   add_property("difficulty", 6);
   set_weight(19);
   set_value(80000);
}
void set_key_number(int num) {
   add_property("key prop", "door_lock_"+num);
   add_property("locktype", "door");
}

==================================================
FILE: misc/locks/chubby_ultra_door_lock.c
==================================================

inherit "/obj/misc/lock";
void setup() {
   set_name("lock");
   set_short("chubby ultra door lock");
   add_adjective( ({ "ultra", "chubby", "door" }));
   set_long("A chubby ultra brass door lock.  These high-quality "
                     "locks are made by Grabthroat Shinkicker and Sons.  "
                     "Contrary to popular belief the locks are called "
                     "chubby's not because of their thickness but because "
                     "Grabthroat's real name is Charles and his "
                     "nickname is Chubby.\n");
   add_property("difficulty", 10);
   set_weight(19);
   set_value(300000);
}
void set_key_number(int num) {
   add_property("key prop", "door_lock_"+num);
   add_property("locktype", "door");
}

==================================================
FILE: misc/locks/flimsy_door_lock.c
==================================================

inherit "/obj/misc/lock";
void setup() {
   set_name("lock");
   set_short("flimsy door lock");
   add_adjective( ({ "flimsy", "door" }));
   set_long("A flimsy brass door lock.\n");
   add_property("difficulty", 1);
   set_weight(19);
   set_value(10000);
}
void set_key_number(int num) {
   add_property("key prop", "door_lock_"+num);
   add_property("locktype", "door");
}

==================================================
FILE: misc/locks/furniture_key.c
==================================================

inherit "/std/key";
void set_lock_number(int num) {
   set_key("small furniture", "furniture_lock_" + num);
   set_long("A small key, it looks like it would be "
            "suitable for a piece of furniture.\n");
   set_value(10);
}
void set_key_number( int num ){
  set_lock_number(num);
}
mapping query_static_auto_load() {
   return int_query_static_auto_load();
}
int query_duplicatable_key() {
   return 1;
}

==================================================
FILE: misc/locks/standard_door_lock.c
==================================================

inherit "/obj/misc/lock";
void setup() {
   set_name("lock");
   set_short("standard door lock");
   add_adjective( ({ "standard", "door" }));
   set_long("A standard brass door lock.\n");
   add_property("difficulty", 4);
   set_weight(19);
   set_value(40000);
}
void set_key_number(int num) {
   add_property("key prop", "door_lock_"+num);
   add_property("locktype", "door");
}

==================================================
FILE: misc/locks/standard_furniture_lock.c
==================================================

inherit "/obj/misc/lock";
void setup() {
   set_name("lock");
   set_short("standard furniture lock");
   add_adjective( ({ "standard", "furniture" }));
   set_long("A standard brass furniture lock.\n");
   add_property("difficulty", 2);
   set_weight(19);
   set_value(10000);
}
void set_key_number(int num) {
   add_property("key prop", "furniture_lock_"+num);
   add_property("locktype", "furniture");
}

==================================================
FILE: misc/papers/paper_file.c
==================================================

inherit "/obj/misc/paper";
string file_name;
void create() {
  seteuid(getuid());
  ::create();
}
void set_file_name(string fname) {
  file_name = fname;
}
string query_file_name() {
  return file_name;
}
mixed *query_read_mess() {
  return read_file(file_name);
}
void init() {
  this_player()->add_command("read", this_object());
  ::init();
}

==================================================
FILE: misc/player_shop/mgr_book.c
==================================================

#include "player_shop.h"
inherit "/std/book";
private string _office;
void setup() {
    set_name( "book" );
    add_alias( "handbook" );
    set_short( "manager handbook");
    set_main_plural( "manager handbooks" );
    add_adjective( "manager" );
    set_weight( 5 );
    set_value( 5 );
    set_no_pages( 11 );
    add_property( "no recycling", 1 );
}
private string cap_name(string name)
{
   if (test_player(name))
      return PLAYER_HANDLER->query_cap_name(name);
   else return capitalize(name);
}
void set_office( string office ) {
   _office = office;
   if ( !query_property( "office" ) ) {
      add_property( "office", office );
   }
   set_long( "This is a handbook for Managers of "+ office->query_shop_name()+
     ", "+ office->query_place()+ ".  It covers those aspects of "
     "the managers' job not covered by the staff handbook.\n"
     "You may <read book>, <open book to page #> and "
     "<turn a page of book>.\n" );
    set_open_page( 1 );
    set_read_mess( "\n"
      "                            TABLE OF CONTENTS                    Page 1\n"
      "                    .o0o.o0o.o0o.o0o.o0o.o0o.o0o.o0o.\n\n"
      "       Introduction............................................2\n"
      "       The job.................................................3\n"
      "       The way things work.....................................4\n"
      "       Specific commands.......................................5-7\n"
      "       Hiring new employees....................................8-9\n"
      "       Disciplinary procedures.................................10-11\n",
      "common", 100 );
    set_open_page( 2 );
    set_read_mess( "\n"
      "                               Introduction                      Page 2\n"
      "                           -=-=-=-=-==-=-=-=-=-\n\n"
      " This handbook has been written specifically for managers to detail\n"
      " your role in the shop.  You will find details of commands specific\n"
      " to managers, and a more detailed explanation of the workings of the\n"
      " shop.  This book is to be treated as a confidential document, and its\n"
      " contents only to be discussed with other managers.\n",
      "common", 100 );
    set_open_page( 3 );
    set_read_mess( "\n"
      "                                 The Job                         Page 3\n"
      "                               -=-=-=-=-=-\n\n"
      " It is the responsibility of managers to ensure the smooth operation\n"
      " of the shop.  This includes staff motivation, advertising, pay and\n"
      " staffing levels, accounts, discipline and personnel.\n"
      " Motivation and advertisements are left to the judgement of managers,\n"
      " whilst the personnel issues should follow strict guidelines detailed\n"
      " later.\n\n"
      " As you should be aware, since you now hold the highest position in the\n"
      " store, there is nothing to work towards regarding your promotion.  You\n"
      " are paid at a higher rate, however, so there are still benefits to be\n"
      " obtained from carrying out the more 'mundane' tasks within the shop.\n\n"
      " Finally, managers are allowed to \"retire\" and continue in an advisory\n"
      " capacity.  Whilst having very limited functional control over the\n"
      " shop, retired managers are still able to keep their badge, and use\n"
      " the notice board and \"memo\" facility.\n",
      "common", 100 );
    set_open_page( 4 );
    set_read_mess( "\n"
      "                           The way things work                   Page 4\n"
      "                         -=-=-=-=-=-=-=-=-=-=-=-\n\n"
      " On being hired, employees are paid according to the amount of work\n"
      " they do.  Along with their pay, they accumulate points towards\n"
      " promotion in the shop.  The pay and points depend on the amount of\n"
      " work done, and not on the amount of time spent in the shop.  Precisely,\n"
      " employees receive a set amount per transaction, with a maximum of one\n"
      " paid transaction every minute.\n"
      " Each employee's status is reviewed every 3 DW days, their points added,\n"
      " and their pay awarded.  This pay is transferred into their bank account\n"
      " every month, and a written confirmation of the amount is sent.\n"
      " Employees are paid according to their status.  This is done in a ratio\n"
      " of 2:3:4 so that managers will be paid twice as much as employees, with\n"
      " supervisors halfway in between.  The bonuses are calculated in the same\n"
      " way.\n",
      "common", 100 );
    set_open_page( 5 );
    set_read_mess( "\n"
      "                              Specific commands                  Page 5\n"
      "                           -=-=-=-=-=-=-=-=-=-=-=-\n\n"
      " There are a number of additional commands once promotion to manager\n"
      " is gained.  The majority of these are rather self-explanatory, and\n"
      " so will only be covered briefly.  The remainder merit an explanation.\n\n"
      " accounts - Check the current value of the accounts\n"
      " list - As in the main office, with the addition of baddies & applicants\n"
      " mail - Yes, you now have access to your mail from the managers' office\n"
      " memo - Send a memo to the other managers of the shop\n"
      " retire - The alternative to resignation\n"
      " view - View a person's record with this shop.  This is extremely useful\n"
      "        when deciding on disciplinary matters, or before hiring applicants\n"
      " query - Check the current settings for maximum number of employees and\n"
      "         pay rates\n"
      " project - Gives a projection of the months' pay packet based on the\n"
      "           employees' activity so far, and also the projected bonus amounts\n"
      "           based on the current value of the bonus fund.  Useful when setting\n"
      "           these values\n"
      " transfer - Transfer money between two accounts                (Continued...)\n",
      "common", 100 );
    set_open_page( 6 );
    set_read_mess( "\n"
      "                                                                 Page 6\n\n"
      " set - This command sets the maximum number of employees (speaks for\n"
      "       itself), or the base pay rate.  The base pay rate is the amount\n"
      "       that each employee will receive per transaction.  This rate is\n"
      "       then adjusted accordingly for supervisors and managers.\n"
      "       Changing this amount will not affect transactions already made\n"
      "       by employees, but will affect all subsequent transactions.\n"
      " buy/sell - These commands are used to buy and sell storeroom cabinets.\n"
      "            Cabinets are sold for 50% of the buying price, so make sure\n"
      "            you really do want a cabinet before buying it as they can be\n"
      "            expensive.\n"
      " (un)ban - These commands are used to ban or unban a person from the shop.\n"
      "           A person can be banned automatically, and will also be unbanned\n"
      "           automatically after 28 days.  If, however, you wish to unban\n"
      "           someone sooner, you may do so with this command.\n"
      " vote - Allows you to vote for, against, or abstain on an applicant.  This\n"
      "        will be your only chance to vote on this applicant, so make sure it\n"
      "        is the right decision.\n"
      " check - Allows you to check your current votes               (Continued...)\n",
      "common", 100 );
    set_open_page( 7 );
    set_read_mess( "\n"
      "                                                                 Page 7\n\n"
      " leave - Allows you to place an employee on leave for up to 14 days\n"
      " commend - Allows you to commend an outstanding employee.  This will\n"
      "           place an entry in their employment record, and award them\n"
      "           extra promotion points.\n"
      " warn - Officially reprimand an employee.  Will place an entry in their\n"
      "        record, and deduct promotion points.\n"
      " suspend - Suspend an employee's bonus entitlement for a specified\n"
      "           number of months following the current month.\n"
      " demote - Demote a supervisor to employee.  Will start them off as if\n"
      "          they were a new employee, but with their employment record\n"
      "          reflecting their history.\n"
      " fire - Terminate someone's employment with this shop.\n",
      "common", 100 );
    set_open_page( 8 );
    set_read_mess( "\n"
      "                            Hiring new employees                Page 8\n"
      "                        -=-=-=-=-=-=-=-=-=-=-=-=-=-\n\n"
      " This is a brief description of the process involved in hiring a\n"
      " new employee.\n\n"
      " 1) Prospective employees \"apply\" in the shop and a mail is sent\n"
      "    to each manager.  The application is saved and viewable from\n"
      "    within the managers' office.\n"
      " 2) Managers check the list in the office which will show applicants\n"
      "    waiting for employment, applicants yet to confirm their offer,\n"
      "    and new applicants yet to be voted upon (with votes so far).\n"
      " 3) Managers \"vote\" on each prospective employee.  Only one vote\n"
      "    per employee per manager is allowed, and the first vote counts.\n"
      " 4) As soon as the number of votes for employment equals 50% of the\n"
      "    current manager base, the candidate is accepted.  If votes against\n"
      "    exceeds 50%, the candidate is rejected.\n"
      " 5) If 50% hasn't been reached after 7 days, then the candidate is\n"
      "    hired/rejected on the basis of votes received so far.  (Continued...)\n",
      "common", 100 );
    set_open_page( 9 );
    set_read_mess( "\n"
      "                                                                Page 9\n\n"
      " 6) The approved candidate has 7 days from being accepted to confirm\n"
      "    their offer, otherwise they are removed from the list.\n"
      " 7) Once confirmed, the employee is kept advised of their current\n"
      "    position in the waiting list, and hired as soon as a position\n"
      "    becomes vacant in the shop.\n"
      " 8) The candidate can \"cancel\" their application at any time until\n"
      "    they are hired.\n\n"
      " Since the candidates are hired in order of being accepted, please make\n"
      " sure you vote for the oldest applications first.\n",
      "common", 100 );
    set_open_page( 10 );
    set_read_mess( "\n"
      "                           Disciplinary procedures              Page 10\n"
      "                         -=-=-=-=-=-=-=-=-=-=-=-=-=-\n\n"
      " This section is intended as a guide to disciplinary procedures.  It\n"
      " is ultimately down to managers to set their own policies within the\n"
      " shop.\n"
      " The first step in any action is to verbally warn an employee before\n"
      " taking any formal action.  This avoids any unpleasant comebacks on\n"
      " the manager involved.\n"
      " The next stage is either a warning, or suspending an employee's bonus.\n"
      " Whilst a warning reduces an employee's promotion points, bonuses can\n"
      " be suspended indefinitely.\n"
      " If the employee is a supervisor, the next stage is probably demotion.\n"
      " Following demotion, or if the employee is not a supervisor, dismissal\n"
      " may be the only course of action open to you.\n"
      " It is important to check the employee's history before taking any\n"
      " action as this will allow you to see what action has already been\n"
      " taken, and when.                                       (Continued...)\n",
      "common", 100 );
    set_open_page( 11 );
    set_read_mess( "\n"
      "                                                                Page 11\n\n"
      " Again, it is the responsibility of managers to develop a policy as\n"
      " to what merits disciplinary action.  A few guidelines are set out in\n"
      " the staff handbook, but more can be added.\n\n"
      " Finally, if there are any changes that need making to this, or indeed\n"
      " the staff handbook, please let me know.  I am open to comments and\n"
      " suggestions on content as well as shop policy.\n"
      " (c) "+ cap_name(CREATOR)+ " 2001",
      "common", 100 );
    set_open_page( 0 );
}
void init () {
   set_open_page( 0 );
   if ( !_office || _office == "" ) {
      if ( !query_property( "office" ) ) {
         return;
      }
      _office = query_property( "office" );
      set_office( _office );
   }
   if ( !_office->query_manager( environment( this_object() )->query_name() ) &&
     !_office->query_retired( environment( this_object() )->query_name() ) &&
     !environment( this_object() )->query_creator() ) {
      return;
   }
   ::init();
}

==================================================
FILE: misc/player_shop/shop_badge.c
==================================================

#include <player_shop.h>
inherit "/obj/armour";
private int do_badge(string);
private int do_chat(string);
private int get_properties();
private string cap_name(string);
private string _office,
_title,
_channel,
_owner;
private int _echo;
void setup()
{
    set_name("badge");
    set_short("employee badge");
    add_adjective("employee");
    add_adjective("tin");
    add_adjective("small");
    set_main_plural("employee badges");
    set_weight(1);
    set_value(0);
    set_type("badge");
    setup_armour(640);
    set_damage_chance(5);
    set_wear_remove_func(file_name(this_object()),
      "wear_remove_badge");
    add_property("no recycling", 1);
    add_extra_look(this_object());
    if (!query_property("office") || !query_property("owner"))
    {
        return;
    }
    _office = query_property("office");
    _owner = query_property("owner");
    _echo = query_property("echo");
    _title = _office->shop_very_short();
    _channel = _office->query_channel();
    set_long( "This is a small tin badge which marks " +
      cap_name(_owner) + " as an employee of "+
      _office->query_shop_name()+ ", "+ _office->query_place()+ ".\n");
    add_adjective(_channel);
}
private string cap_name(string name)
{
    if (test_player(name))
        return PLAYER_HANDLER->query_cap_name(name);
    else return capitalize(name);
}
void init()
{
    object tp;
    if (!_office || !_owner)
    {
        if (!get_properties()) return;
        set_long("This is a small tin badge which marks "+
          cap_name(_owner) + " as an employee of "+
          _office->query_shop_name()+ ", "+ _office->query_place()+ ".\n");
        add_adjective(_channel);
    }
    tp = this_player();
    if (!_office->query_employee(tp->query_name()) &&
      !_office->query_retired(tp->query_name()) &&
      !tp->query_creator())
    {
        return;
    }
    add_command("badge", ({ "help", "echo" }), (: do_badge($5) :));
    add_command("h"+ _channel, "", (: do_badge("hist") :));
    add_command(_channel+"?", "", (: do_badge("who") :));
    add_command(_channel, "<string'text'>", (: do_chat($4[0]) :));
    add_command(_channel+"@", "<string'text'>", (: do_chat("@"+$4[0]) :));
}
private int do_badge(string args)
{
    if (!_office || !_owner)
    {
        if (!get_properties()) return 1;
    }
    add_succeeded_mess("");
    if (args == "who")
    {
        tell_object(this_player(),
          "The following employees from "+ _office->query_shop_name()+
          " are logged on: \n" + _office->badge_list());
        return 1;
    }
    else if (args == "hist")
    {
        string result = "$P$"+ _channel+ " channel$P$\n";
        mixed *hist = HISTORY_HANDLER->query_chat_history(lower_case(_channel));
        tell_object(this_player(),
          "You ask the badge for the last few chats on the "+ _channel+
          " channel\n");
        if (!arrayp(hist) || !sizeof(hist))
        {
            tell_object(this_player(),
              "The badge mutters that nothing has been said on this channel, "
              "or it is not being remembered.\n");
            return 1;
        }
        result += implode(map(hist, (: "$I$5=$C$" + $1[0] + $1[1] +
              "%^RESET%^" :)), "\n" );
        tell_object(this_player(), result);
    }
    else if (args == "echo")
    {
        if (_echo)
        {
            tell_object(this_player(), "Local echo now off.\n");
            _echo = 0;
        }
        else
        {
            tell_object(this_player(), "Local echo now on.\n");
            _echo = 1;
        }
        add_property("echo", _echo);
    }
    else
    {
        string result = sprintf("Commands for this badge:\n\n"
          "   %-13s - chat a message to the other employees\n"
          "   %-13s - emote a message to the other employees\n"
          "   %-13s - list employees logged on\n"
          "   h%-12s - show recent chat history\n"
          "   badge echo    - Turn local echo on/off\n\n"
          "You can also set your preferred chat colour using the \"colour "
          "shopchat <colour>\" command.\n", _channel, _channel + "@",
          _channel + "?", _channel, _channel);
        tell_object(this_player(), result);
    }
    return 1;
}
private int do_chat(string wisp)
{
    string sender;
    object *things, tp;
    add_succeeded_mess("");
    if (!_office || !_owner)
    {
        if (!get_properties()) return 1;
    }
    tp = this_player();
    if (!tp->query_property(_channel+ "_on"))
    {
        return notify_fail("You are not wearing the " + _channel+
          " badge!\n");
    }
    if (tp->query_property("gagged"))
    {
        return notify_fail("You have been gagged!  You cannot chat until "
          "your gag is removed.  Perhaps you should talk to a creator about "
          "this.\n");
    }
    if (!tp->query_creator())
    {
        wisp = replace_string(wisp, "%^", "");
    }
    if (!wisp || ( wisp == "" ) || wisp == "@")
    {
        return notify_fail("Chat what?\n");
    }
    if (environment(this_object()) != tp)
    {
        return notify_fail("You're too far from the badge to whisper into "
          "it.\n");
    }
    tell_object(tp,  "You whisper into the badge.\n");
    sender = tp->query_cap_name();
    if (tp->query_name() == CREATOR && tp->query_invis())
    {
        sender = tp->query_short();
    }
    wisp = replace(wisp, sprintf("%c", 7), "!");
    things = children(BADGE);
    if (_echo)
    {
        things -= ({find_object(BADGE)});
    }
    else
    {
        things -= ({this_object(), find_object(BADGE)});
    }
    things->receive(_channel ,sender, wisp);
    if (wisp[0] == '@')
    {
        if (wisp[1] == ''')
      {
         HISTORY_HANDLER->add_chat_history(_channel, sender, wisp[1..1000]);
      }
      else
      {
         HISTORY_HANDLER->add_chat_history(_channel, sender+ " ", wisp[1..1000]);
      }
   }
   else
   {
      HISTORY_HANDLER->add_chat_history(_channel, sender +": ", wisp);
   }
   return 1;
}
string extra_look(object thing)
{
   object tp;
   tp = this_player();
   if (!_office || !_owner)
   {
      if (!get_properties()) return "";
   }
   if (!_office->query_employee(tp->query_name()) &&
      !_office->query_retired(tp->query_name()) && !tp->query_creator())
   {
      return "";
   }
   return "You can get a list of commands by typing \"badge help\"\n";
}
private int get_properties()
{
   if (!query_property("office") || !query_property("owner"))
   {
      tell_object(environment(), "This badge is broken.  "
         "Please claim another.\n");
      move("/room/rubbish");
      return 0;
   }
   _office = query_property("office");
   _owner = query_property("owner");
   _echo = query_property("echo");
   _title = _office->shop_very_short();
   _channel = _office->query_channel();
   return 1;
}
string query_channel() { return copy(_channel); }
void receive(string channel, string sender, string text)
{
   object owner = environment();
   string *ignoring, prev_ob;
   if (!_office || !_owner)
   {
      if (!get_properties()) return;
   }
   prev_ob = base_name(previous_object());
   if (prev_ob != BADGE && prev_ob != _office->query_shop_front()
      && prev_ob != "/d/am/square/emporium/TARNACH/consumables")
   {
      LOG_ERROR("shop_badge.c", "receive("+channel+","+sender+","+text+")");
      return;
   }
   if (!owner || (!living(owner)))
   {
      return;
   }
   if (!_office->query_employee(owner->query_name()) &&
      !_office->query_retired(owner->query_name()) &&
      !owner->query_creator())
   {
      return;
   }
   ignoring = owner->query_property("ignoring");
   if (ignoring && member_array(lower_case(sender), ignoring) != -1)
   {
      return;
   }
   if (channel != _channel || !owner->query_property(_channel+ "_on"))
   {
      return;
   }
   if (text[0] == '@')
   {
      if (text[1] == ''')
      {
         text = "["+ lower_case( _channel )+ "] "+ sender + text[1..1000];
      }
      else
      {
         text = "["+ lower_case( _channel )+ "] "+ sender +" "+ text[1..1000];
      }
   }
   else
   {
      text = "["+ lower_case( _channel )+ "] "+ sender +": "+ text;
   }
   tell_object(owner, owner->colour_event("shopchat", "%^CYAN%^") +
      "$I$5=$C$"+ text + "%^RESET%^\n");
   return;
}
void set_props(string path, string owner)
{
   if (!path || path == "")
   {
      return;
   }
   if (previous_object() && previous_object() != find_object(path))
   {
      LOG_ERROR("shop_badge.c", "set_props("+path+","+owner+")");
      return;
   }
   set_long("This is a small tin badge which marks " +
      cap_name( owner ) + " as an employee of "+
      path->query_shop_name()+ ", "+ path->query_place()+ ".\n");
   add_property("office", path);
   add_property("owner", owner);
   _office = path;
   _owner = owner;
   _title = _office->shop_very_short();
   _channel = _office->query_channel();
   add_adjective( _channel );
}
void wear_remove_badge(object thing)
{
   if (!_office || !_owner)
   {
      if (!get_properties()) return;
   }
   if (thing)
   {
      int level;
      string start;
      if (!living(thing))
      {
         return;
      }
if (thing->query_creator())
{
thing->add_property(_channel+ "_on", 1);
return;
}
      level = _office->query_employee(thing->query_name());
      if (!level || level == -1)
      {
         if (_office->query_retired(thing->query_name()))
         {
            start = "Retired manager of ";
         }
         else return;
      }
      else if (level & MANAGER)
      {
         start = "Manager of ";
      }
      else if (level & SUPERVISOR)
      {
         start = "Supervisor of ";
      }
      else
      {
         start = "Employee of ";
      }
      thing->add_property(_channel+ "_on", 1);
      thing->set_title(_title, start + _office->query_shop_name());
      return;
   }
   thing = previous_object()->query_worn_by();
   if (thing)
   {
      thing->remove_property(_channel+ "_on");
      thing->remove_title(_title);
   }
}

==================================================
FILE: misc/player_shop/shop_cabinet.c
==================================================

#include <move_failures.h>
inherit "/std/container";
private mapping _stock = ([]);
private nosave string _save_file = "";
private nosave int _call_save = 0;
private void do_save();
void create()
{
   do_setup++;
   ::create();
   do_setup--;
   if (!do_setup)
   {
      this_object()->setup();
      this_object()->reset();
   }
}
object *add_items(object *items, object player)
{
   object *failed = ({});
   foreach( object item in items )
   {
      if (item->move(this_object()) != MOVE_OK)
      {
         failed += ({ item });
      }
   }
   if (sizeof(failed))
   {
      failed->move(player);
   }
   remove_call_out(_call_save);
   _call_save = call_out((: do_save() :), 1);
   return failed;
}
void dest_me()
{
   if (remove_call_out(_call_save) != -1)
   {
      do_save();
   }
   ::dest_me();
}
private void do_load()
{
   if (_save_file)
   {
      if (file_size(_save_file + ".o") > 0)
      {
         unguarded((: restore_object, _save_file :));
         if (sizeof(_stock))
         {
            init_dynamic_arg(_stock,0);
         }
      }
   }
}
private void do_save()
{
   if (_save_file && _save_file != "")
   {
#ifdef DEBUG
      debug_printf("Saving cabinet data to %s.\n", _save_file);
#endif
      _stock = query_dynamic_auto_load();
      unguarded((: save_object, _save_file :));
   }
}
object *remove_items(object *items, object player)
{
   object *failed = ({});
   foreach(object item in items)
   {
      if (item->move(player) != MOVE_OK)
      {
         failed += ({ item });
      }
   }
   if (sizeof(failed))
   {
      failed->move(environment(player));
   }
   remove_call_out(_call_save);
     _call_save = call_out((: do_save() :), 1);
   return failed;
}
void set_save_file(string filename)
{
   _save_file = filename;
   do_load();
}

==================================================
FILE: misc/player_shop/shop_chart.c
==================================================

#include <player_shop.h>
#include <money.h>
inherit "/std/object";
private nosave string _office;
void setup()
{
   set_name("chart");
   set_short("items chart");
   add_adjective("items");
   reset_get();
}
string long(string word, int dark)
{
   mapping list = _office->query_list_mapping();
   string chart, *items = sort_array(keys(list),1);
   if (!m_sizeof(list))
   {
      return "There are no items on the list.\n";
   }
   chart = sprintf("\n%-2s  %-25s  %-3s  %-5s  %-4s  %-4s  %-3s  %-4s  %-8s\n",
      "no", "items", "max", "stock", "avst", "avsl", "buy", "sell", "cabinets");
   chart += sprintf("%-2s  %-25s  %-3s  %-5s  %-4s  %-4s  %-3s  %-4s  %-8s\n",
      "--", "-----", "---", "-----", "----", "----", "---", "----", "--------");
   for (int i = 0; i < sizeof( items ); i++)
   {
      reset_eval_cost();
      chart += sprintf("%2d  %-25s  %3d  %5d  %4d  %4d  %3d  %4d  %8s\n",
         i + 1, items[i], list[items[i]][CHART_MAX],
         _office->query_stock(items[i]), list[items[i]][CHART_AVE],
         list[items[i]][CHART_AVESALE], list[items[i]][CHART_BUY],
         list[items[i]][CHART_SELL],
         implode(list[items[i]][CHART_CAB], (: $1+","+$2 :), "")[1..]);
   }
   return sprintf("%s%s", ::long(word,dark), chart);
}
void set_office(string office)
{
   _office = office;
   set_long("This chart lists the items of interest to the shop.  All "
      "prices are in "+ pluralize(MONEY_HAND->smallest_in(_office->
      query_place()))+ ".\n");
}

==================================================
FILE: misc/player_shop/shop_notice.c
==================================================

inherit "/std/object";
private nosave string _office, _stock_policy;
private nosave int _type = 0;
void setup()
{
   set_name("notice");
   set_short("policy notice");
   set_long("");
   add_adjective("policy");
   reset_get();
}
string long(string word, int dark)
{
   mapping policies= _office->get_policies(_type);
   int i = 1;
   string display;
   if (!_type)
   {
      display = sprintf("This is the list of shop's policies.  The policies "
         "on this notice are definitive and final.  This shop deals strictly "
         "in %s.  Items that do not fit this description should not be "
         "stocked.\n\n", "%^BOLD%^"+ _stock_policy+ "%^RESET%^");
   }
   else
   {
      display = "This is the list of management policies.\n\n";
   }
   if (!m_sizeof(policies))
   {
      return display;
   }
   foreach(string policy in m_indices(policies))
   {
      if(_office->query_manager(this_player()->query_name()) ||
         _office->query_retired(this_player()->query_name()) ||
         this_player()->query_creator())
      {
         display += sprintf("%d [%s]. %s\n", i++, policy,
            policies[policy][0]);
      }
      else
      {
         display += sprintf("%d. %s\n", i++, policies[policy][0]);
      }
   }
   return display;
}
void set_office(string office)
{
   _office = office;
   _stock_policy = _office->get_stock_policy();
}
void set_type(int type) { _type = type; }

==================================================
FILE: misc/player_shop/shopping_bag.c
==================================================

#include <move_failures.h>
#include <player_shop.h>
inherit "/obj/baggage";
void setup()
{
   set_name("bag");
   set_short("shopping bag");
   add_adjective("shopping");
   set_main_plural("shopping bags");
   set_long("This is a small paper shopping bag, designed to "
      "hold a number of small items.  It doesn't look very sturdy.\n");
   set_value(3);
   set_transparent();
   add_property("no recycling",1);
   set_weight(1);
   set_max_weight(MAX_BAG_WEIGHT);
}
void change_condition()
{
   adjust_cond(-(10 + random(10)));
}
int test_add(object thing, int flag)
{
   if (sizeof(all_inventory()) >= MAX_BAG_ITEMS)
   {
      tell_object(this_player(), "The bag can only hold "+
         query_num(MAX_BAG_ITEMS)+ " items.\n");
      return 0;
   }
   if (!query_cond()) set_cond(20);
   call_out((: change_condition() :), 1);
   return ::test_add(thing,flag);
}
int test_remove(object thing, int flag, mixed dest)
{
   if (!query_cond()) set_cond(20);
   call_out((: change_condition() :), 1);
   return ::test_remove(thing,flag,dest);
}

==================================================
FILE: misc/player_shop/staff_book.c
==================================================

#include <player_shop.h>
inherit "/std/book";
private string _office = "";
void setup()
{
   set_name( "book" );
   add_alias( "handbook" );
   set_short( "staff handbook");
   set_main_plural( "staff handbooks" );
   add_adjective( "staff" );
   set_weight( 5 );
   set_value( 5 );
   set_no_pages( 12 );
   add_property( "no recycling", 1 );
}
private string cap_name(string name)
{
   if (test_player(name))
      return PLAYER_HANDLER->query_cap_name(name);
   else return capitalize(name);
}
void set_office( string office )
{
   _office = office;
   if ( !query_property( "office" ) )
   {
      add_property( "office", office );
   }
   set_long( "This is a handbook for staff of "+
     office->query_shop_name()+ ", " + office->query_place()+
     ".  It covers all aspects of the job.\n"
     "You may <read book>, <open book to page #> and "
     "<turn a page of book>.\n" );
   set_open_page( 1 );
   set_read_mess( "\n"
     "                            TABLE OF CONTENTS                    Page 1\n"
     "                    .o0o.o0o.o0o.o0o.o0o.o0o.o0o.o0o.\n\n"
     "       Introduction............................................2-4\n"
     "       The job.................................................5-6\n"
     "       The office..............................................6-7\n"
     "       The counter.............................................8\n"
     "       The storeroom...........................................9\n"
     "       The shopkeeper..........................................10\n"
     "       Promotion and pay.......................................11\n"
     "       Termination of employment...............................12\n\n",
     "common", 100 );
   set_open_page( 2 );
   set_read_mess( "\n"
     "                               Introduction                      Page 2\n"
     "                           -=-=-=-=-==-=-=-=-=-\n\n"
     " Welcome to "+ office->query_shop_name()+ ".\n"
     " This is a player-run shop, designed to operate interactively with its\n"
     " employees with minimal input from creators.\n"
     " Players are able to sell items to and buy them from the shop, just like\n"
     " a regular shop, but prices should be set such that it is advantageous\n"
     " to deal with us,  rather than some other general shop.\n\n"
     " A list of items in which the shop deals is maintained in the shop's\n"
     " office, where a chart shows the buying and selling prices of items,\n"
     " as well as how many are in stock, the maximum number that the shop\n"
     " will keep in stock and the average number that has recently been in\n"
     " stock; the stock itself is saved over a reboot.        (Continued...)",
     "common", 100 );
   set_open_page( 3 );
   set_read_mess( "\n"
     "                                                                 Page 3\n\n"
     " The most important feature of the shop is that it is run by players,\n"
     " with a non-player employee who stands in when there are no player\n"
     " employees about.  Players who work faithfully for the shop will be\n"
     " promoted to supervisor and then to manager, as well as receiving a\n"
     " regular wage which increases with employment level.\n\n"
     " As well as hiring new employees, managers are also responsible for\n"
     " firing employees who break trust.  Supervisors (and managers) are\n"
     " responsible for keeping the shop running efficiently by adding new\n"
     " items to those in which the shop deals, by adjusting selling and\n"
     " buying prices and inventory limits to reflect supply and demand and\n"
     " by removing items in which it is no longer reasonable to deal.\n\n"
     " Supervisors are also given access to the shop's log books which\n"
     " contain details of everything that happens.           (Continued...)",
     "common", 100 );
   set_open_page( 4 );
   set_read_mess( "\n"
     "                                                                 Page 4\n\n"
     " Finally, while it is intended, and hoped, that the shop will run\n"
     " autonomously under player control, it is inevitable that problems\n"
     " will arise from time to time which cannot be solved by the shop's\n"
     " player managers and supervisors.  Should such problems arise, please\n"
     " don't hesitate to contact myself or another creator.\n"
     " Enjoy your time with "+ _office->query_shop_name()+ ".\n "+
     cap_name( _office->query_creator() )+ " (caretaker)\n", "common", 100 );
   set_open_page( 5 );
   set_read_mess( "\n"
     "                                 The Job                         Page 5\n"
     "                               -=-=-=-=-=-\n\n"
     " It is the responsibility of employees to ensure that the shop is\n"
     " kept as fully stocked as possible.  This may be achieved by buying\n"
     " items from players, or by collecting the items yourself.  Although\n"
     " you are not expected to come running to the shop every time a\n"
     " customer walks in, once you are clocked in, you should not leave\n"
     " the shop until you clock out again.\n\n"
     " All of the commands that are available to the shop's employees\n"
     " should be obvious from the various rooms of the shop; those available\n"
     " in the office are described by giving the command %^B_RED%^office%^RESET%^.\n"
     " Possibly the most important command is %^B_RED%^log%^RESET%^, which must be "
     "used to record\n"
     " each transaction.  All activity within the shop is logged, and so it is\n"
     " vital to record each sale and purchase in the correct manner so that the\n"
     " shop's supervisors and managers can see what happened when they examine\n"
     " the logs.  Examples of the \"log\" command are given in the section\n"
     " dealing with the counter.\n",
     "common", 100 );
   set_open_page( 6 );
   set_read_mess( "\n"
     "                               The Office                          Page 6\n"
     "                             -=-=-=-==-=-=-\n\n"
     " The office of the shop is the nerve-centre.  This is where you can\n"
     " obtain most of your information, and is where you clock in and out.\n"
     " A description of the \"office\" commands you can use from here is\n"
     " given below.\n\n"
     " clock - Clock in or out of work.  You are only paid for the work\n"
     "         you do whilst you are clocked in.\n"
     " claim - Claim a staff badge, a copy of this book, or your monthly\n"
     "         bonus.  The badge itself has some nifty functions - look\n"
     "         at one for further information.\n"
     " list - List the employees of the shop, and find out your current\n"
     "        standing for promotion.  This shows the percentage of points\n"
     "        you have achieved towards your next promotion.\n"
     " bank - Change, or check your banking details.  Your pay can be paid\n"
     "        into the bank of your choice.  Your bonus is given in cash when\n"
     "        you \"claim\" it.\n"
     " promotion - Allows you to specify whether to be automatically promoted\n"
     "             or not.  If not, you will not be promoted once gaining the\n"
     "             required points until you specify otherwise.\n"
     " resign - End your employment with the shop.             (Continued...)\n",
     "common", 100 );
   set_open_page( 7 );
   set_read_mess( "\n"
     "                                                                 Page 7\n\n"
     " Supervisors receive two additional commands - \"chart\" and \"logs\".\n"
     " The \"logs\" command allows a supervisor to review the logs, whilst the\n"
     " \"chart\" command allows them to add and remove items from the shop's\n"
     " list, set the maximum stock level, buy & sell prices, and assign them\n"
     " to a cabinet.  If an item is not assigned to a cabinet, it cannot be\n"
     " stored.  The \"check\" command allows supervisors to check which items\n"
     " are allocated to each cabinet.\n"
     " It is important to note that an item can be assigned to more than one\n"
     " cabinet, and that a cabinet can be assigned more than one item.  It is\n"
     " the supervisor's responsibility to ensure that items are judiciously\n"
     " assigned to ensure that the most efficient use is made of the available\n"
     " storage space.\n"
     " To view details of items stocked by the shop, simply \"look\" at the\n"
     " chart in the office.\n\n"
     " In addition, if there is no notice board in the shop, employees may use\n"
     " the \"memo\" command to send a mail to all the employees of the shop.\n",
     "common", 100 );
   set_open_page( 8 );
   set_read_mess( "\n"
     "                               The Counter                        Page 8\n"
     "                             -=-=-=-=-=-=-=-\n\n"
     " The counter houses the shop's cash register, and allows employees to\n"
     " \"log\" transactions.  There is also a \"calc\"ulator for use in those\n"
     " difficult situations.  All monies entering or exiting the register are\n"
     " logged, so if you are tempted, please bear in mind that supervisors can\n"
     " see exactly who took that $1000 from the till ;-)\n\n"
     " The log command can be confusing, so the following examples have been\n"
     " provided.  All entries are made from the point of view of the shop with\n"
     " the syntax: %^B_RED%^log shop bought|sold <quantity> <item> for <amount>%^RESET%^.\n"
     " Examples:\n\n"
     " A customer sells 5 gizmos to the shop at 20 pence each. The log entry is:\n"
     " %^B_RED%^log shop bought 5 gizmos for 100p%^RESET%^ (or $1 instead of 100p)\n\n"
     " A customer buys 20 elephants from the shop at 10 pence each.\n"
     " The log entry is:\n"
     " %^B_RED%^log shop sold 20 elephants for 200p%^RESET%^ (or $2 instead of 200p)\n\n"
     " If you do happen to make an error whilst logging a transaction, you\n"
     " may use the \"correction\" facility to note the error.  This will\n"
     " not erase the error, but will clarify that an error has been made.\n"
     " The syntax is the same as that of \"log\".\n\n"
	  " Please note that these are examples only, and you may be using a different\n"
	  " currency.\n\n",
     "common", 100 );
   set_open_page( 9 );
   set_read_mess( "\n"
     "                               The Storeroom                      Page 9\n"
     "                             -=-=-=-=-=-=-=-=-\n\n"
     " The storeroom, unsurprisingly, is where the shop's stock is stored.\n"
     " The stock itself is stored in several store cabinets, located in this\n"
     " room.  Each cabinet has a maximum stock capacity of "+ STOCK_PER_CABINET+ ".\n"
     " There are three commands available for dealing with the stock:\n\n"
     "   add - add items to the stock\n"
     "   remove - remove items from the stock\n"
     "   list - list all stock, or individual items\n\n"
     " These commands can be used relative to the whole stock, or by an\n"
     " individual cabinet.  For example, to add 10 beans to the stock, you\n"
     " could let the storeroom decide where to put the items by saying:\n"
     "   \"add 10 beans\"\n"
     " or specify a cabinet in which to place the beans:\n"
     "   \"add 10 beans to cabinet 1\"\n"
     " Generally, it is easier to use the first syntax and let the storeroom\n"
     " decide things for you.  Be aware that it will not let you place an item\n"
     " in the wrong cabinet, or in a cabinet that is full.\n"
     " For more information, see \"syntax <command>\"\n\n", "common", 100 );
    set_open_page( 10 );
    set_read_mess( "\n"
     "                              The Shopkeeper                     Page 10\n"
     "                           -=-=-=-=-=-=-=-=-=-\n\n"
     " With regard to the shopkeeper, when you leave the shop for other\n"
     " activities, it is important to clock out in order that they can be\n"
     " summoned from their home to staff the shop.  Conversely, when you clock\n"
     " in for work, say to them that you'll take over, and they will return\n"
     " home. Please also make sure that the cash register always contains\n"
     " plenty of the lowest denomination coins as, for religious reasons,\n"
     " they are incapable of handling the larger denominations of coinage.\n",
     "common", 100 );
   set_open_page( 11 );
   set_read_mess( "\n"
     "                              Promotion and pay                  Page 11\n"
     "                           -=-=-=-=-=-=-=-=-=-=-=-\n\n"
     " Promotion within the shop depends entirely on how much work an\n"
     " employee does.  Once an employee has done the required amount,\n"
     " they will be promoted automatically unless they have requested\n"
     " otherwise.  When you are promoted to supervisor, you will gain\n"
     " access to the shop's logs and also be able to add/remove items\n"
     " from the chart as well as adjust the buy/sell and maximum stock\n"
     " level of those items.  After even more work, the dedicated employees\n"
     " will be promoted to manager.\n"
     " Pay is also based on the amount of work that you do.  You will be\n"
     " paid each month directly into your bank account at whichever bank\n"
     " you specify in the office.  As a supervisor or manager, you will\n"
     " enjoy a higher rate of pay.\n"
     " Managers are responsible for allocating funds towards the monthly\n"
     " bonus fund.  This fund will be divided up between employees at the\n"
     " end of each month as long as those employees have been employed for\n"
     " the full month, and have not had their bonus suspended.\n"
     " It is up to each individual to claim their bonus during that month.\n"
     " All unclaimed bonuses will be added to the next month's fund.\n",
     "common", 100 );
   set_open_page( 12 );
   set_read_mess( "\n"
     "                         Termination of employment                Page 12\n"
     "                      -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n\n"
     " If you no longer wish to work at the shop then you can resign from\n"
     " your position.  This can be done from the shop office.  If you do\n"
     " resign, please remember to return your employee badge.\n\n"
     " Managers have the power to fire employees for breach of trust.\n"
     " Reasons for dismissal include (but are not restricted to):\n"
     "     Dishonesty (Stealing items or cash from the shop)\n"
     "     Inactivity (Not working in the shop for prolonged periods)\n"
     "     The killing of any employee on duty\n"
     "     The killing of anybody whilst on duty\n"
     "     Not returning to the shop whilst on duty\n"
     "     Teleporting into or encoding the location of employee areas\n\n"
     " If you are fired without good reason, then you can appeal to any\n"
     " manager.  Bear in mind though, that all decisions taken with regard\n"
     " to the hiring and firing of employees will normally have been\n"
     " discussed by the managers beforehand and will usually have been\n"
     " preceded by a warning.\n", "common", 100 );
   set_open_page( 0 );
}
void init ()
{
   set_open_page( 0 );
   if ( !_office || _office == "" )
   {
      if ( !query_property( "office" ) )
      {
         return;
      }
      _office = query_property( "office" );
      set_office( _office );
   }
   if ( !_office->query_employee( environment( this_object() )->query_name() ) &&
     !_office->query_retired( environment( this_object() )->query_name() ) &&
     !environment( this_object() )->query_creator() )
   {
      return;
   }
   ::init();
}

==================================================
FILE: misc/traps/fast_acting_needle_trap.c
==================================================

inherit "/obj/misc/trap";
void setup() {
   set_name("trap");
   set_weight(1);
   set_short("fast-acting needle trap");
   add_adjective(({ "fast-acting", "fast", "acting", "needle" }));
   set_long("This is a needle trap suitable for rigging inside "
            "the lock of a door. It uses a small needle that "
            "will inject a fast acting poison into anyone "
            "clumsily picking "
            "the lock.\n");
   make_trap(250, "pick",
             "Hidden inside the lock is a small mechanism "
             "which, if touched by an clumsily wielded tool "
             "will cause a small needle to swing out and poison "
             "an unwary thief.\n",
             ({"A small needle swings out of the lock injecting "
                 "poison.\n",
                 "A small needle sings out of the lock.\n" }),
             500);
   set_value(80000);
}

==================================================
FILE: misc/traps/gas_trap.c
==================================================

inherit "/obj/misc/trap";
void setup() {
   set_name("trap");
   set_weight(1);
   set_short("gas trap");
   add_adjective("gas");
   set_long("This is a gas trap suitable for rigging inside "
            "the lock of a door. It uses a small ampule of "
            "poison gas that is ejected by someone attempting "
            "to pick the lock.\n");
   make_trap(300, "pick",
             "Hidden inside the lock is a small ampule which, "
             "if touched by an unwary tool would trigger a "
             "puff of poisonous gas.",
             ({"A small cloud of gas puffs out of the lock.\n",
                 "A small cloud of gas puffs out of the lock.\n"}),
             ({"/std/effects/poisons/poison_gas", 600}));
   set_value(120000);
}

==================================================
FILE: misc/traps/leg_trap.c
==================================================

inherit "/obj/misc/trap";
void setup() {
   set_name("trap");
   set_weight(1);
   set_short("leg trap");
   add_adjective("leg");
   set_long("This trap has a trigger suitable for rigging inside "
            "the lock of a door. It uses a small portion of the floor "
            "in front of the door to conceal a blunt leg trap that will "
            "shatter the femurs of any clumsy thief that attempt to "
            "pass through.\n");
   make_trap(350, "pick",
             "Hidden inside the lock is a trigger that leads down to a "
             "concealed panel on the floor. Carefully lifting the panel "
             "you see a vicious blunt man trap, designed to break any "
             "unskilled questionable entrant.\n",
             ({"A small click is heard, and the floor beneath your feet "
               "snaps away to reveal a leg trap which snaps together "
               "violently, shattering both your legs at once!\n",
               "A small click is heard and the jaws of a man trap burst out "
               "of the ground below " + this_player()->query_short() + "'s "
               "feet and shatters both of their legs!\n" }),
             ({ "/std/effects/disease/broken_leg", ({ "left", "right"}) }));
   set_value(1000000);
}

==================================================
FILE: misc/traps/needle_trap.c
==================================================

inherit "/obj/misc/trap";
void setup() {
   set_name("trap");
   set_weight(1);
   set_short("needle trap");
   add_adjective("needle");
   set_long("This is a needle trap suitable for rigging inside "
            "the lock of a door. It uses a small needle that "
            "will inject poison into anyone clumsily picking "
            "the lock.\n");
   make_trap(200, "pick",
             "Hidden inside the lock is a small mechanism "
             "which, if touched by an clumsily wielded tool "
             "will cause a small needle to swing out and poison "
             "an unwary thief.\n",
             ({"A small needle swings out of the lock injecting "
                 "poison.\n",
                 "A small needle sings out of the lock.\n" }),
             ({ "/std/effects/poisons/spider_venom", 30 }));
   set_value(20000);
}

==================================================
FILE: misc/traps/powder_trap.c
==================================================

inherit "/obj/misc/trap";
void setup() {
   set_name("trap");
   set_weight(1);
   set_short("anthrax trap");
   add_adjective("anthrax");
   set_long("This is a anthrax trap suitable for rigging inside "
            "the lock of a door. It uses a small envelope that "
            "will open in the face of anyone clumsily picking "
            "the lock.\n");
   make_trap(200, "pick",
             "Hidden inside the lock is a small envelope "
             "which, if touched by an clumsily wielded tool "
             "will open up and infect an unwary thief.\n",
             ({"A small envelope opens up and a puff of powder "
                "explodes into your face, which you inadvertantly "
                "inhale. The envelope has \"Congratulations! You've "
                "Been Infected With Anthrax!\" written in bold "
                "cheery letters.\n",
                 "A cloud of powder puffs out of the lock.\n" }),
             ({ "/std/effects/disease/common_cold", 6000 }));
   set_value(10000);
}

==================================================
FILE: misc/buckets/.bucket_small.ob_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/vessel.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/misc/buckets/bucket_small.ob#1" );
  call_other( clone, "set_name",  "bucket"  );
  call_other( clone, "set_short",  "small bucket"  );
  call_other( clone, "set_long",  "This is a small metal bucket.  It is not very shiny.\n"  );
  call_other( clone, "set_main_plural",  "small buckets"  );
  call_other( clone, "add_adjective",  "small"  );
  call_other( clone, "add_plural",  "buckets"  );
  call_other( clone, "set_stuck",  1  );
  call_other( clone, "set_leak_rate",  0  );
  call_other( clone, "set_max_volume",  3000  );
  call_other( clone, "set_max_weight",  30  );
  call_other( clone, "set_full_weight",  30  );
  call_other( clone, "set_value",  85  );
  call_other( clone, "set_weight",  10  );
  call_other( clone, "set_material",  "metal" );
   return clone;
}

==================================================
FILE: monster/cabbage.c
==================================================

inherit "/obj/monster";
#define SCATHE "/cmds/guild-race/magic/scathe"
#define LANCE "/obj/spells/mental_lance"
#include <config.h>
#ifndef __DISTRIBUTION_LIB__
#include <special_day.h>
#endif
#include <move_failures.h>
#include <armoury.h>
object query_owner();
void check_env();
void zap_cabbage();
string long_desc();
int eaten;
string owner_name, owner_short, language;
object owner;
void setup() {
  set_name( "cabbage" );
  set_short( "cabbage" );
  set_long( "A small cute looking cabbage.\n" );
  set_race( "cabbage" );
  set_level( 1 );
  add_respond_to_with( ({ ({ "@hug", "@snuggle", "@cuddle", "@nestle",
    "@snuffle", "@smooch", "@fondle", "@huggle", "@squeeze", "@wuffle"
    "@hop", "@lick", "@snog", "@fluff", "@nuzzle" }), "you" }),
    "#respond_nice");
  add_respond_to_with( ({ ({ "@skick", "@spunch", "@sburn", "@jump", }),
    "you" }), "#respond_nasty");
#ifndef __DISTRIBUTION_LIB__
  if (SPECIAL_DAY_HANDLER->query_special_day() == CABBAGE_DAY) {
    add_property( "player", 1 );
    set_get();
  }
#endif
}
void init() {
  ::init();
  this_player()->add_command("eat", this_object(), "<direct:object'cabbage'>" );
  call_out( "check_env", 3 );
}
void set_owner( object thing ) {
  if (!objectp( thing ) )
    return;
  set_long( (: long_desc :) );
  owner = thing;
  owner_name  = owner->query_name();
  owner_short = owner->query_short();
  language = owner->query_default_language();
  add_language( language );
  set_language( language );
  load_chat(30, ({
    1, "@roll up",
    1, "@purr",
    1, ":$V$0=ruffles its,ruffle their$V$ fronds.",
    1, ":$V$0=looks,look$V$ green.",
    3, "#soul_owner",
    1, "@roll over",
    1, "#check_env" }) );
  check_env();
}
string long_desc() {
  if ( owner && environment( owner ) == environment() ) {
    return "This small, cute-looking cabbage stares adoringly at "
      + owner->the_short() + ".\n";
  }
  return "This small, cute-looking cabbage is looking off into the "
    "distance.  It is obviously hopelessly lost.\n";
}
void respond_nice( object souler ) {
  if ( !souler->query_visible(this_object()) )
    return;
  if ( owner && souler == owner) {
    do_command("nestle " + souler->query_name() );
  } else {
    do_command("peer curiously " + souler->query_name() );
  }
}
void respond_nasty( object souler ) {
  if ( !souler->query_visible(this_object()) )
    return;
  if ( owner && souler == owner) {
    do_command("gasp");
    do_command("cry");
  } else {
    do_command( "sburn " + souler->query_name() + " dreams");
  }
}
int do_eat() {
  if ( this_player() != owner || eaten) {
    this_player()->add_failed_mess( this_object(), "You cannot eat this "
      "cabbage!\n" );
  return -1;
  }
  if( this_player()->query_property("dead") ) {
    this_player()->add_failed_mess( this_object(), "You are dead.  You "
      "cannot eat.\n" );
  }
#ifndef __DISTRIBUTION_LIB__
    if (SPECIAL_DAY_HANDLER->query_special_day() == CABBAGE_DAY) {
      this_player()->add_failed_mess(this_object(), "This is *my* day, "
      "how can you even think of eating me, your faithful cabbage!\n" );
      return -1;
    }
#endif
  this_player()->add_succeeded_mess( this_object(),
    ({ "The cabbage lovingly and "
       "adoringly purrs quietly as you viciously rip off its fronds and "
       "eat it.  It dies looking wonderingly into your face.\n",
       "$N $V $D.\n" }) );
    this_player()->add_effect("/std/effects/object/cabbage", 150);
    call_out("zap_cabbage", 2 );
    return 1;
}
void zap_cabbage() {
  if ( environment() ) {
    all_inventory()->move( environment() );
  }
  if ( owner ) {
    do_command( "unfollow " + owner_name );
  }
  eaten = 1;
  owner = 0;
  owner_name = 0;
  owner_short = 0;
  move( "/room/rubbish" );
}
int attack_by(object ob) {
  if( ( !query_owner() || ob == query_owner() ) &&
        base_name( previous_object() ) == LANCE )
    call_out( "coleslaw", 2 );
  ob->stop_fight(this_object());
  tell_object(ob, "The cabbage is a terrible pacifist.\n");
}
int attack_ob(object ob) {
  ob->stop_fight(this_object());
  tell_object(ob, "The cabbage is a terrible pacifist.\n");
}
int adjust_hp(int number, object attacker) {
  return 0;
}
void soul_owner() {
  string *souls = ({ "snuggle ", "nestle ", "stare dreamily ", "snuffle " });
  if(!owner)
    return;
  if ( environment() != environment( owner ) ) {
    do_command( "sniffle sadly" );
    return;
  }
  if ( !owner->query_visible(this_object()) )
    return;
  do_command( souls[random(sizeof(souls))] + owner_name );
}
void check_env() {
  object my_env, owner_env, *caterpillars;
  if ( !owner_name )
    return;
  my_env = environment();
    if ( !my_env ) {
        return;
    }
  if ( owner_name && !owner ) {
    do_command( "cry" );
    do_command( "'Woe is me! Where art thou, " + owner_short + "?" );
    call_out("zap_cabbage", 1);
    return;
  }
  owner_env = environment( owner );
  if ( !owner_env ) {
    return;
  }
  if ( file_name( my_env ) == "/room/rubbish" ) {
    return;
  }
  if ( this_object()->query_property( "dead" ) ) {
    return;
  }
  if (my_env == owner) {
    return ;
  }
  if (owner_env == my_env) {
    return ;
  }
  if (owner_env->query_mirror_room() == my_env) {
    return ;
  }
  caterpillars = match_objects_for_existence( "caterpillar", ({ owner_env }) );
  if ( my_env != owner_env && !sizeof(caterpillars)) {
    move( owner_env, "$N appear$s with a squelch.",
      "$N disappear$s with a squelch." );
    do_command( "follow " + owner_name );
  }
}
object query_owner() {
    return owner;
}
int query_theft_command() {
    return -1;
}
void coleslaw() {
  object ob;
  tell_room( environment(), the_short() + " explodes in a shower of "
      "fronds.\n" );
  ob = ARMOURY->request_object("coleslaw", 100);
  if (ob) {
     ob->move( environment() );
  }
  zap_cabbage();
}

==================================================
FILE: monster/cockroach.c
==================================================

inherit "/obj/monster";
void setup() {
   set_name("cockroach");
   set_short("cockroach");
   set_race("cockroach");
   set_level( random( 1 + random( 3 ) ) );
   set_main_plural("cockroaches");
   add_alias( "roach" );
   add_plural( "roaches" );
   add_adjective("dirty");
   set_long("This is a huge dirty great big cockroach, the size of your "
            "hand at least.  It waves it feelers at you and looks "
            "horrible and black.  Not only can cockroaches survive "
            "a nuclear blast, they can survive in Ankh-Morpork!\n");
   load_chat( 5, ({
         10, ":scuttles around a bit.",
         10, ":cleans its feelers.",
         10, ":rushes around in circles.",
         1,  ":jerks off in a strange direction.",
      }) );
   set_wimpy( 30 );
   load_a_chat( 50, ({
         1, ":oozes horrible white stuff.",
         1, ":makes a sort of scraping noise."
      }) );
}
