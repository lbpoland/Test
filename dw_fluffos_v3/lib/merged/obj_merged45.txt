# Total Tokens: 9317
# Total Files Merged: 23
# Total Characters: 31128

clocks/owl_clock.c
==================================================

inherit "/std/room/furniture/clock";
void setup() {
  set_name("clock");
  set_short("owl clock");
  add_adjective("owl");
  set_long("This is a wooden clock carved roughly into the shape of an owl.  "
    "The tail twitches back and forth, somewhat like a pendulum, and the owl's "
    "eyes roll cheerfully left and right with each tick of the clock.  A small "
    "set of tiles, strung on a metal rod and affixed to the owl's feet, tells "
    "the date.\n"+
    "According to the clock it is ");
  set_allowed_positions(({}));
  set_allowed_room_verbs((["hanging" : "hangs" ]));
  set_weight(50);
  set_value(42000);
  add_property("no recycling", 1);
  set_chimes(2, "The owl clock opens its beak and hoots twice.\n");
  set_chimes(1, "The owl clock opens its beak and hoots once.\n");
  set_show_date();
}
void chime(string mess) {
  int *co_ords;
  if(environment(this_object())) {
    co_ords = (int *)environment(this_object())->query_co_ord();
    "/obj/handlers/broadcaster"->broadcast_event(users(), co_ords,
                                                 mess, 20, 1, 0 );
    tell_room(environment(this_object()), mess);
  }
}

==================================================
FILE: furnitures/bathroom/bath.c
==================================================

inherit "/std/room/furniture/bath";
void setup() {
  set_name("bathtub");
  set_short("cast iron bathtub");
  add_adjective(({"cast", "iron"}));
  add_alias( ({ "tub", "bath" }) );
  set_long("The white porcelain sparkles on this cast iron bathtub, it looks "
           "heavy but large enough for a couple of people to have a nice "
           "bath in.\n");
  set_allowed_positions( ({"sitting", "standing", "lying" }) );
  set_allowed_room_verbs((["sitting" : "sits", "standing" : "stands" ]));
  set_weight(350);
  set_value(14000);
}

==================================================
FILE: furnitures/sofas/red_futon.c
==================================================

inherit "/std/room/furniture/basic";
int folded;
int do_unfold(object ob);
int do_fold(object ob);
void setup() {
    folded = 0;
    set_name( "futon" );
    set_short( "traditional red futon" );
    add_adjective( ({ "traditional", "red" } ));
    add_alias( "couch" );
    add_alias( "sofa" );
    set_long( "This red mattressed futon is made of a pad of tufted "
        "cotton batting covered with red cotton cloth, set in a "
        "lacquered oaken frame.  The frame allows the futon to rest "
        "comfortably a few inches above the ground, its hard mattress "
        "a must for those craving a little punishment combined with "
        "a good night's sleep.  It looks comfortable and is the perfect "
        "thing to have if you are into the whole minimalistic trend "
        "for your home.\n");
    set_allowed_positions(({"sitting", "lying", "kneeling", "meditating"}));
    set_allowed_room_verbs((["sitting" : "sits" ]));
    set_weight(150);
    set_value(650000);
    add_extra_look( this_object() );
}
void init() {
    add_command("unfold", "<indirect:object'futon'>" );
    add_command("fold", "<indirect:object'futon'>" );
    ::init();
}
int do_unfold(object ob) {
    if(folded ) {
        add_failed_mess("$D is already folded.\n", ({ }) );
        return 0;
    }
    add_succeeded_mess("$N $V $D back into a sofa.\n", ({ }) );
    folded = 1;
    return 1;
}
int do_fold(object ob) {
    if(!folded) {
        add_failed_mess("$D is already folded.\n", ({ }) );
	    return 0;
    }
    add_succeeded_mess("$N $V $D out into a bed.\n", ({ }) );
    folded = 0;
    return 1;
}
string extra_look() {
    if(!folded) {
        return "The futon has been folded out into a bed.\n";
    }
    return "The futon is folded into a sofa.\n";
}

==================================================
FILE: furnitures/beds/foot_bed.c
==================================================

#include <forn.h>
inherit "/std/room/furniture/basic";
void setup(){
  set_name("bed");
  set_short ("duck-footed bed");
  add_alias ("duck-footed");
  set_long(
    "A fairly solid timber bed, with intricate scrollwork around the "
    "headboard.  It is supported by four duck's feet, presumably made from "
    "painted wood.  The dark wood that form its sides is inset with short "
    "strips made from a lighter wood, creating an interestingly random "
    "pattern.\n");
  set_weight( 800 );
  set_value( 100000 );
  set_allowed_positions(({"sitting", "meditating", "lying", "standing",
                          "kneeling", "crouching"}));
  set_allowed_room_verbs((["sitting" : "sits" ]));
}

==================================================
FILE: furnitures/stoves/large_wood_stove.c
==================================================

inherit "/std/room/furniture/fireplace";
void setup() {
    set_name("oven");
    set_short("large wood oven");
    add_adjective( ({ "large", "wood" }) );
    set_long("A tastefully decorated door bears the name 'Wun Chi Puffin' "
        "and a temperature gauge monitors the large wood oven.  "
        "Resting on a smooth base, this range has a thirty-two inch cook "
        "surface and carries six burners and a water reservoir.  A top "
        "mounted nickel trimmed shelf on the back of the stove is "
        "complemented by dual warming shelves.  Subtle and sophisticated, "
        "this stovetop would compliment most tasteful homes.\n");
    set_allowed_room_verbs(([
                            "sitting" : "sits",
                            "squatting" : "squats",
                            "crouching" : "crouches",
                            "resting" : "rests",
                            "lying" : "lies"
                          ]));
    set_weight(495);
    set_max_weight(100);
    set_value(120000);
}

==================================================
FILE: furnitures/wardrobes/golden_ebony_wardrobe.c
==================================================

inherit "/std/room/furniture/storage";
void setup() {
    set_name("wardrobe");
    set_short("golden ebony wood wardrobe");
    add_adjective(({"golden", "ebony", "wood"}));
    set_long("Tall and imposing this wardrobe looms towards the ceiling.  "
        "The crafter obviously gave a great deal of thought to its "
        "construction in selecting different woods to present constrasts "
        "and blends.  The darkest of ebony seems to swallow the light "
        "highlighting minature scrollwork picked out in gold across its "
        "surface, giving way to dusky madrona the spirals and knots give "
        "the impression of smoke curling slowly around the borders of "
        "the doors and around the brass handles.\n");
    set_weight(900);
    set_max_weight(500);
    set_value(740000);
    set_allowed_room_verbs((["squatting" : "squats" ]));
    set_pick_skill("covert.lockpick.doors");
    set_difficulty(4);
}
void init() {
    string key_id;
    object key;
    if(!query_key()) {
        key_id = "furniture_lock_"+random(1000);
        set_key(key_id);
        key = clone_object("/std/key");
        key->set_key("small iron", key_id);
        key->set_long("This small, yet sturdy, key looks like it is for a "
                  "piece of furniture.\n");
        key->move(this_object());
        set_closed();
    }
    ::init();
}

==================================================
FILE: weapons/knives/.black_handled_ceremonial_bronze_knife.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/black_handled_ceremonial_bronze_knife.wep#1" );
  call_other( clone, "set_name", "knife"  );
  call_other( clone, "set_short", "black handled ceremonial bronze knife"  );
  call_other( clone, "add_adjective", ({ "black", "handled", "ceremonial", "bronze" })  );
  call_other( clone, "set_main_plural", "black handled ceremonial bronze knives"  );
  call_other( clone, "add_plural", "knives"  );
  call_other( clone, "set_long", "This is a ceremonial knife, for use in magic rituals.  Its ornate handle is made of ebony and its long bronze blade has been carved with mystic runes.\n"  );
  call_other( clone, "set_weight", 11  );
  call_other( clone, "set_length", 13  );
  call_other( clone, "set_width", 4  );
  call_other( clone, "set_material", "copper"  );
  call_other( clone, "set_value", 1000  );
  call_other( clone, "new_weapon", 2000  );
  call_other( clone, "add_attack", "slash", 70, ({ 10, 2, 20 }), "sharp", "sharp", 0  );
  call_other( clone, "add_attack", "stab", 40, ({ 20, 2, 60 }), "pierce", "pierce", 0 );
   return clone;
}

==================================================
FILE: weapons/knives/.carving_knife.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/carving_knife.wep#1" );
  call_other( clone, "set_name", "knife"  );
  call_other( clone, "set_short", "carving knife"  );
  call_other( clone, "add_adjective", ({ "carving" })  );
  call_other( clone, "add_alias", "utensil"  );
  call_other( clone, "add_plural", "utensils"  );
  call_other( clone, "set_long", "This is a knife such as you might use to carve up your Octeday roast, and then use to substantiate your arguments with your spouse as to who should do the washing up.\n"  );
  call_other( clone, "set_weight", 9  );
  call_other( clone, "set_length", 12  );
  call_other( clone, "set_width", 2  );
  call_other( clone, "set_material", "steel"  );
  call_other( clone, "set_value", 500  );
  call_other( clone, "new_weapon", 2000  );
  call_other( clone, "add_attack", "slash", 70, ({ 10, 2, 20 }), "sharp", "sharp", 0  );
  call_other( clone, "add_attack", "stab", 40, ({ 20, 2, 60 }), "pierce", "pierce", 0 );
   return clone;
}

==================================================
FILE: weapons/knives/.chisel.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/chisel.wep#1" );
  call_other( clone, "set_name", "chisel"  );
  call_other( clone, "set_short", "chisel"  );
  call_other( clone, "set_long", "This is a tool with a sharp edge which is used to shape and cut metal, wood, or stone.\n"  );
  call_other( clone, "set_weight", 11  );
  call_other( clone, "set_length", 6  );
  call_other( clone, "set_width", 3  );
  call_other( clone, "set_material",  "steel"  );
  call_other( clone, "set_value", 300  );
  call_other( clone, "new_weapon", 19200  );
  call_other( clone, "set_damage_chance", 5  );
  call_other( clone, "add_attack", "slash", 30, ({ 10, 3, 10 }), "sharp", "sharp", 0  );
  call_other( clone, "add_attack", "stab", 30, ({ 10, 3, 10 }), "pierce", "pierce", 0 );
   return clone;
}

==================================================
FILE: weapons/knives/.copper_fighting_knife.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/copper_fighting_knife.wep#1" );
  call_other( clone, "set_name", "knife"  );
  call_other( clone, "set_short", "copper fighting knife"  );
  call_other( clone, "set_main_plural", "copper fighting knives"  );
  call_other( clone, "add_adjective", ({ "copper", "fighting" })  );
  call_other( clone, "set_long", "This Djelian copper knife is designed for fighting.  Its straight blade and hilt are undecorated, clean and functional.\n"  );
  call_other( clone, "set_weight", 9  );
  call_other( clone, "set_length", 10  );
  call_other( clone, "set_width", 2  );
  call_other( clone, "set_material", "copper"  );
  call_other( clone, "set_value", 180  );
  call_other( clone, "new_weapon", 32000  );
  call_other( clone, "add_attack", "slash", 100, ({ 10, 5, 15 }), "sharp", "sharp"  );
  call_other( clone, "add_attack", "stab", 50, ({ 10, 2, 20 }), "pierce", "pierce" );
   return clone;
}

==================================================
FILE: weapons/knives/.dagger.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/dagger.wep#1" );
  call_other( clone, "set_name", "dagger"  );
  call_other( clone, "set_short", "dagger"  );
  call_other( clone, "add_adjective", ({ })  );
  call_other( clone, "add_alias", ({ })  );
  call_other( clone, "add_plural", ({ "daggers" })  );
  call_other( clone, "set_long",  "This is a largish looking knife.\n"  );
  call_other( clone, "set_material", "steel"  );
  call_other( clone, "set_weight", 10  );
  call_other( clone, "set_length", 11  );
  call_other( clone, "set_width", 2  );
  call_other( clone, "set_value",  200  );
  call_other( clone, "new_weapon", 12800  );
  call_other( clone, "set_damage_chance", 5  );
  call_other( clone, "add_attack", "slash", 75, ({ 10, 5, 15 }), "sharp", "sharp"  );
  call_other( clone, "add_attack", "stab", 50, ({ 10, 2, 25 }), "pierce", "pierce" );
   return clone;
}

==================================================
FILE: weapons/knives/.howondalandish_throwing_knife.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/howondalandish_throwing_knife.wep#1" );
  call_other( clone, "set_name", "knife"  );
  call_other( clone, "add_adjective", ({ "howondalandish", "throwing" })  );
  call_other( clone, "set_short", "howondalandish throwing knife"  );
  call_other( clone, "set_main_plural", "howondalandish throwing knives"  );
  call_other( clone, "set_long", "From one of the more remote Howondalandish tribes, this knife "   "doesn't look throwable, much less a knife.  From a short handle, "   "spiky steel blades jut out at all angles, sure to deliver a nasty "   "shock to whoever gets hit with it.\n"  );
  call_other( clone, "set_weight", 9  );
  call_other( clone, "set_length", 9  );
  call_other( clone, "set_width", 3  );
  call_other( clone, "set_material", "steel"  );
  call_other( clone, "new_weapon", 200  );
  call_other( clone, "set_damage_chance", 10  );
  call_other( clone, "add_attack", "stab", 60, ({ 40, 3, 30 }), "pierce", "pierce", 0  );
  call_other( clone, "add_attack", "slash", 60, ({ 25, 5, 30 }), "sharp", "sharp", 0  );
  call_other( clone, "set_value", 7000 );
   return clone;
}

==================================================
FILE: weapons/knives/.klatchian_steel_dirk.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/klatchian_steel_dirk.wep#1" );
  call_other( clone, "set_name", "dirk"  );
  call_other( clone, "set_short", "Klatchian steel dirk"  );
  call_other( clone, "add_adjective", ({ "klatchian", "steel" })  );
  call_other( clone, "add_alias", "dagger"  );
  call_other( clone, "add_plural", "daggers"  );
  call_other( clone, "set_long", "This is a very long, curving knife with a wickedly sharp point.  It is made of Klatchian steel.\n"  );
  call_other( clone, "set_weight", 12  );
  call_other( clone, "set_length", 18  );
  call_other( clone, "set_width", 3  );
  call_other( clone, "set_material", "steel"  );
  call_other( clone, "set_value", 400  );
  call_other( clone, "new_weapon", 32000  );
  call_other( clone, "set_damage_chance", 5  );
  call_other( clone, "add_attack", "slash", 75, ({ 10, 5, 20 }), "sharp", "sharp"  );
  call_other( clone, "add_attack", "stab", 50, ({ 10, 2, 27 }), "pierce", "pierce" );
   return clone;
}

==================================================
FILE: weapons/knives/.knife.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/knife.wep#1" );
  call_other( clone, "set_name", "knife"  );
  call_other( clone, "set_short", "knife"  );
  call_other( clone, "add_adjective", ({ "medium-sized", "medium" })  );
  call_other( clone, "set_main_plural", "knives"  );
  call_other( clone, "set_long", "This is a medium-sized knife, the sort of thing someone might keep in a boot to ward off a would-be attacker.  You just have to hope that it's not then used to prepare your dinner.\n"  );
  call_other( clone, "set_weight", 8  );
  call_other( clone, "set_length", 7  );
  call_other( clone, "set_width", 2  );
  call_other( clone, "set_material",  "steel"  );
  call_other( clone, "set_value", 100  );
  call_other( clone, "new_weapon", 9000  );
  call_other( clone, "add_attack",  "slash", 70, ({ 10, 3, 20 }), "sharp", "sharp", 0  );
  call_other( clone, "add_attack",  "stab", 40, ({ 15, 3, 30 }), "pierce", "pierce", 0 );
   return clone;
}

==================================================
FILE: weapons/knives/.letter_opener.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/letter_opener.wep#1" );
  call_other( clone, "set_name", "opener"  );
  call_other( clone, "set_short", "pearl-handled letter opener"  );
  call_other( clone, "add_adjective", ({ "pearl-handled", "pearl", "handled", "letter" })  );
  call_other( clone, "set_main_plural", "pearl-handled letter openers"  );
  call_other( clone, "set_long", "This letter opener has a lovely pearl handle.  It has a pointy blade that could come in handy in a crunch.\n"  );
  call_other( clone, "set_weight", 4  );
  call_other( clone, "set_length", 8  );
  call_other( clone, "set_width", 1  );
  call_other( clone, "set_material", "steel"  );
  call_other( clone, "set_value", 5000  );
  call_other( clone, "new_weapon", 1600  );
  call_other( clone, "set_damage_chance", 8  );
  call_other( clone, "add_attack", "stab", 40, ({ 30, 3, 10 }), "pierce", "pierce", 0 );
   return clone;
}

==================================================
FILE: weapons/knives/.meat_cleaver.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/meat_cleaver.wep#1" );
  call_other( clone, "set_name", "cleaver"  );
  call_other( clone, "set_short", "meat cleaver"  );
  call_other( clone, "add_alias", ({ "utensil", "knife" })  );
  call_other( clone, "add_adjective", "meat"  );
  call_other( clone, "set_main_plural", "meat cleavers"  );
  call_other( clone, "add_plural", ({ "utensils", "knives" })  );
  call_other( clone, "set_long", "This is a butcher's implement for cutting animal carcasses into joints or pieces.  It is a large, rectangular knife and is quite heavy.\n"  );
  call_other( clone, "set_weight", 16  );
  call_other( clone, "set_length",  11  );
  call_other( clone, "set_width", 5  );
  call_other( clone, "set_material",  "steel"  );
  call_other( clone, "set_value", 400  );
  call_other( clone, "new_weapon", 750  );
  call_other( clone, "set_damage_chance", 5  );
  call_other( clone, "add_attack", "slash", 50, ({ 10, 4, 10 }), "sharp", "sharp", 0  );
  call_other( clone, "add_attack", "hack", 90, ({ 20, 3, 20 }), "sharp", "sharp", 0 );
   return clone;
}

==================================================
FILE: weapons/knives/.sharp_butter_knife.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/sharp_butter_knife.wep#1" );
  call_other( clone, "set_name", "knife"  );
  call_other( clone, "set_short", "sharp butter knife"  );
  call_other( clone, "set_main_plural", "sharp butter knives"  );
  call_other( clone, "add_adjective", ({ "sharp", "butter" })  );
  call_other( clone, "add_alias", ({ "utensil" })  );
  call_other( clone, "add_plural", "knives"  );
  call_other( clone, "set_long",  "This is a butter knife that has been sharpened a bit.\n"  );
  call_other( clone, "set_weight",  3  );
  call_other( clone, "set_length",  6  );
  call_other( clone, "set_width",  1  );
  call_other( clone, "set_material",  "steel"  );
  call_other( clone, "set_value",  75  );
  call_other( clone, "new_weapon",  500  );
  call_other( clone, "add_attack",  "slash", 70, ({ 15, 2, 20 }), "sharp", "sharp", 0  );
  call_other( clone, "add_attack",  "stab", 40, ({ 20, 2, 30 }), "pierce", "pierce", 0 );
   return clone;
}

==================================================
FILE: weapons/knives/.silver_sickle.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/silver_sickle.wep#1" );
  call_other( clone, "set_name", "sickle"  );
  call_other( clone, "set_short", "silver sickle"  );
  call_other( clone, "add_adjective", "silver"  );
  call_other( clone, "set_long", "This is a dagger with a crescent shaped blade cast from silver.\n"  );
  call_other( clone, "set_weight", 9  );
  call_other( clone, "set_length", 12  );
  call_other( clone, "set_width", 8  );
  call_other( clone, "set_material",  "silver"  );
  call_other( clone, "set_value",  2000  );
  call_other( clone, "new_weapon", 12800  );
  call_other( clone, "set_damage_chance", 5  );
  call_other( clone, "add_attack",  "slash", 75, ({ 10, 5, 15 }), "sharp", "sharp"  );
  call_other( clone, "add_attack",  "stab", 50, ({ 10, 2, 25 }), "pierce", "pierce" );
   return clone;
}

==================================================
FILE: weapons/knives/.small_copper_knife.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/small_copper_knife.wep#1" );
  call_other( clone, "set_name", "knife"  );
  call_other( clone, "set_short", "small copper knife"  );
  call_other( clone, "set_main_plural", "small copper knives"  );
  call_other( clone, "add_adjective", ({ "small", "copper" })  );
  call_other( clone, "set_long", "This is a small, Djelian, copper knife.  Its straight blade and hilt are undecorated, clean and functional.\n"  );
  call_other( clone, "set_weight", 5  );
  call_other( clone, "set_length", 8  );
  call_other( clone, "set_width", 3  );
  call_other( clone, "set_material",  "copper"  );
  call_other( clone, "set_value", 100  );
  call_other( clone, "new_weapon", 16000  );
  call_other( clone, "add_attack", "slash", 100, ({ 10, 5, 10 }), "sharp", "sharp"  );
  call_other( clone, "add_attack", "stab", 50, ({ 10, 2, 15 }), "pierce", "pierce" );
   return clone;
}

==================================================
FILE: weapons/knives/.small_knife.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/small_knife.wep#1" );
  call_other( clone, "set_name", "knife"  );
  call_other( clone, "set_short", "small knife"  );
  call_other( clone, "add_adjective", ({ "small" })  );
  call_other( clone, "add_alias", "utensil"  );
  call_other( clone, "add_plural", "utensils"  );
  call_other( clone, "set_long", "This small knife might be the sort of thing " "you'd use to peel an apple, slice carrots or " "stab in someone's kidney.  You could say " "that it's a multi-purpose utensil.\n"  );
  call_other( clone, "set_weight", 6  );
  call_other( clone, "set_length", 7  );
  call_other( clone, "set_width", 1  );
  call_other( clone, "set_material",  "steel"  );
  call_other( clone, "set_value", 50  );
  call_other( clone, "new_weapon", 500  );
  call_other( clone, "add_attack", "slash", 70, ({ 5, 2, 20 }), "sharp", "sharp", 0  );
  call_other( clone, "add_attack", "stab", 40, ({ 10, 2, 30 }), "pierce", "pierce", 0 );
   return clone;
}

==================================================
FILE: weapons/knives/.stiletto.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/stiletto.wep#1" );
  call_other( clone, "set_name", "stiletto"  );
  call_other( clone, "set_short", "stiletto"  );
  call_other( clone, "add_alias", "knife"  );
  call_other( clone, "add_adjective", "slender"  );
  call_other( clone, "set_main_plural", "stilettoes"  );
  call_other( clone, "add_plural", "knives"  );
  call_other( clone, "set_long", "This is a slender knife with a dark steel blade, and sharp tip.  "         "It's perfect for slipping between someone's ribs.\n"  );
  call_other( clone, "set_weight", 7  );
  call_other( clone, "set_length", 10  );
  call_other( clone, "set_width", 1  );
  call_other( clone, "set_material",  "steel"  );
  call_other( clone, "set_value", 2000  );
  call_other( clone, "new_weapon",  5000  );
  call_other( clone, "set_damage_chance",  5  );
  call_other( clone, "add_attack",  "stab", 70, ({ 40, 4, 20 }), "pierce", "pierce"  );
  call_other( clone, "add_attack",  "stabstab", 70, ({ 40, 4, 20 }), "pierce", "pierce"  );
  call_other( clone, "set_no_limbs", 1 );
   return clone;
}

==================================================
FILE: weapons/knives/.tanto.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/tanto.wep#1" );
  call_other( clone, "set_name", "tanto"  );
  call_other( clone, "set_short", "tanto"  );
  call_other( clone, "add_alias", "dagger"  );
  call_other( clone, "add_plural", ({"daggers","tantos"})  );
  call_other( clone, "set_main_plural", "tantos"  );
  call_other( clone, "set_long", "This large auriental dagger is an excellent weapon for close-in fighting.  It is short, well crafted and looks pretty durable.\n"  );
  call_other( clone, "set_weight", 9  );
  call_other( clone, "set_length", 10  );
  call_other( clone, "set_width", 3  );
  call_other( clone, "set_material", "steel"  );
  call_other( clone, "set_value", 4000  );
  call_other( clone, "new_weapon", 50000  );
  call_other( clone, "set_damage_chance", 2  );
  call_other( clone, "add_attack", "slash", 75, ({ 0, 2, 40 }), "sharp", "sharp", 0  );
  call_other( clone, "add_attack", "stab", 50, ({ 9, 4, 30 }), "pierce", "pierce", 0 );
   return clone;
}

==================================================
FILE: weapons/knives/.white_handled_ceremonial_bronze_knife.wep_virtual_.c
==================================================

#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/white_handled_ceremonial_bronze_knife.wep#1" );
  call_other( clone, "set_name", "knife"  );
  call_other( clone, "set_short", "white handled ceremonial bronze knife"  );
  call_other( clone, "add_adjective", ({ "white", "handled", "ceremonial", "bronze" })  );
  call_other( clone, "set_main_plural", "white handled ceremonial bronze knives"  );
  call_other( clone, "add_plural", "knives"  );
  call_other( clone, "set_long", "This is a ceremonial knife, for use in magic rituals.  Its ornate handle is made of ivory and its long bronze blade has been carved with mystic runes.\n"  );
  call_other( clone, "set_weight", 11  );
  call_other( clone, "set_length", 18  );
  call_other( clone, "set_width", 3  );
  call_other( clone, "set_material",  "bronze"  );
  call_other( clone, "set_value", 1000  );
  call_other( clone, "new_weapon", 2000  );
  call_other( clone, "add_attack", "slash", 70, ({ 10, 2, 20 }), "sharp", "sharp", 0  );
  call_other( clone, "add_attack", "stab", 40, ({ 20, 2, 60 }), "pierce", "pierce", 0 );
   return clone;
}
