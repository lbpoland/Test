# Total Tokens: 21537
# Total Files Merged: 41
# Total Characters: 71926

.c
==================================================

inherit "/std/races/mustelidae_base";
void setup() {
   set_name( "ferret" );
   set_long( "A small black white and grey animal.\n" );
   set_height( 15 );
   set_weight( 30 );
   set_desc( "small brown meateater" );
   set_stats( ({ -2, 8, -2, -4, -4 }) );
}
void new_set_level( mixed *args ) {
   int level;
   object thing;
   if( sizeof(args) < 2 || !args[1] )
      return;
   level = args[ 0 ];
   thing = args[ 1 ];
   level = 1 + ( 2 * level + random( level ) ) / 8;
   thing->add_ac( "blunt", "blunt", 20 + level / 3 );
   thing->add_ac( "sharp", "sharp", 50 + level );
   thing->add_ac( "pierce", "pierce", 60 + 2 * level );
}
void set_unarmed_attacks( object thing ) {
   int number;
   number = (int)thing->query_skill_bonus( "fighting.combat.melee.unarmed" );
   number = 4 + sqrt( number ) / 2;
   thing->remove_attack( "hands" );
   thing->remove_attack( "feet" );
   thing->remove_attack( "claws" );
   thing->remove_attack( "bite" );
   thing->add_attack( "claws", 50, ({ ( 4 * number ) / 2, 8, 2 * number }),
      "sharp", "unarmed", 0 );
   thing->add_attack( "bite", 100, ({ 2 * number, 10, ( 3 * number ) / 2 }),
      "pierce", "unarmed", 0  );
   thing->tactics( "response dodge" );
}

==================================================
FILE: races/fish.c
==================================================

inherit "/std/races/fish_base";
void setup() {
   set_name( "fish" );
   set_long( "Fish,  yes.  A fish.  Nice generic standard fish thing.\n" );
   set_height( 15 );
   set_weight( 40 );
   set_desc( "a fish, the kind with fins" );
   set_stats( ({ -2, 14, -4, -4, -6 }) );
}
void check_water( object player ) {
   if( !environment( player )->query_water() )
      call_out( "do_drown", 4, player );
}
void do_drown( object player ) {
   int i;
   if( environment( player )->query_water() )
      return;
   tell_room( environment( player ) , player->one_short() + " gasps for "
      "air.\n" );
   i = player->query_max_hp() / 5;
   if( i < 20 ) i = 20;
   player->adjust_hp( -i );
   call_out( "do_drown", 4, player );
}
void start_player( object thing ) {
   ::start_player( thing );
   thing->add_property( "gills", 1 );
   thing->add_property("lives in water", 1);
   thing->add_enter_commands( (: check_water :) );
   thing->set_default_position( ({ "lying" }) );
   thing->return_to_default_position( 0 );
}
void set_unarmed_attacks( object thing ) {
   int number;
   number = (int)thing->query_skill_bonus( "fighting.combat.melee.unarmed" );
   number = 4 + sqrt( number ) / 2;
   thing->remove_attack( "hands" );
   thing->remove_attack( "feet" );
   thing->remove_attack( "bite" );
   thing->add_attack( "bite", 100, ({ 2 * number, 5, number }),
      "pierce", "unarmed", 0 );
   thing->tactics( "response dodge" );
}
int lives_in_water() { return 1; }

==================================================
FILE: races/fish_base.c
==================================================

inherit "/std/races/base";
void create() {
   do_setup++;
   ::create();
   do_setup--;
   set_desc( "your standard fish.  This should not be used since it is a "
      "base race" );
   bits = ({
      "head", "head", ({ 0, 200, 0,
         "left eye", "right eye", "left gill", "right gill" }),
      "left eye", "eye", ({ "head", 1, 0 }),
      "right eye", "eye", ({ "head", 1, 0 }),
      "left gill", "gill", ({ "head", 50, 0 }),
      "right gill", "gill", ({ "head", 50, 0 }),
      "torso", "guts", ({ 0, 800, 0,
         "heart", "liver", "left kidney", "right kidney", "spleen" }),
      "heart", "heart", ({ "guts", 50, 0 }),
      "liver", "liver", ({ "guts", 50, 0 }),
      "left kidney", "kidney", ({ "guts", 25, 0 }),
      "right kidney", "kidney", ({ "guts", 25, 0 }),
      "spleen", "spleen", ({ "guts", 25, 0 }),
      "genitals", "genitals", ({ 0, 10, 0 }),
      "left petral fin", "fin", ({ 0, 100, 0, }),
      "right petral fin", "fin", ({ 0, 100, 0, }),
      "dorsal petral fin", "fin", ({ 0, 100, 0 }),
      "tail", "tail", ({ 0, 150, 0 })
   });
   inedible = ({ "left petral fin", "right petral fin", "dorsal petral fin",
      "tail" });
   unrottable = ({  });
   set_skin( "scales" );
   if( !do_setup )
      this_object()->setup();
}
string *query_target_zones() {
  return ({ "head", "head",
              "body","body", "body", "body", "body", "body",
              "left petral fin", "right petral fin",
              "dorsal fin", "body",
              "body", "body",
              "body", "body",
              "body", "body", "body", "body", "body"
              "body", "body",
              "tail", "tail" });
}
string map_target_zone(string zone) {
  switch(zone) {
  case "head":
    return zone;
  case "arms":
    return (random(2) ? "left " : "right ") + "petral fin";
  case "hands":
    return "dorsal fin";
  case "feet":
    return "tail";
  default:
    return "body";
  }
}
int lives_in_water() { return 1; }

==================================================
FILE: races/fox.c
==================================================

inherit "/std/races/carnivore";
void setup() {
   set_name( "fox" );
   set_long( "A cat-like creature with red fur, hunts small, "
             "animals like mice and rabbits.\n" );
   set_height( 30 );
   set_weight( 400 );
   set_desc( "A small red fox" );
   set_stats( ({ 0, 10, -2, 4, -4 }) );
}
void new_set_level( mixed *args ) {
   int level;
   object thing;
   if( sizeof(args) < 2 || !args[1] )
      return;
   level = args[ 0 ];
   thing = args[ 1 ];
   level = 1 + ( 2 * level + random( level ) ) / 10;
   thing->add_ac( "blunt", "blunt", level );
   thing->add_ac( "sharp", "sharp", 2 + level );
   thing->add_ac( "pierce", "pierce", 2 * level );
}
void set_unarmed_attacks(object thing) {
   int number;
   number = (int)thing->query_skill_bonus( "fighting.combat.melee.unarmed" );
   number = sqrt( number );
   thing->remove_attack( "hands" );
   thing->remove_attack( "feet" );
   thing->remove_attack( "bite" );
   thing->remove_attack( "claws" );
   thing->add_attack( "bite", 100, ({ number / 2, 2, number }),
      "pierce", "unarmed", 0 );
   thing->add_attack( "claws", 150, ({ number / 2, 2, number }),
      "sharp", "unarmed", 0 );
   thing->tactics( "response dodge" );
}

==================================================
FILE: races/frog.c
==================================================

inherit "/std/races/amphibian";
void setup() {
   set_name( "frog" );
   set_long( "Frogs are amphibians" );
   set_height(10);
   set_weight(10);
   set_desc( "an innocent little froggie" );
   add_ac( "blunt", "blunt", 5 );
   add_ac( "pierce", "pierce", 4 );
   add_ac( "sharp", "sharp", 3 );
   add_attack( "bite", 50, ({ 10, 2, 6 }) );
   set_sight( ({ 5, 20, 200, 300 }) );
   set_stats( ({ -4, 10, -4, -4, -6 }) );
}
void start_player( object thing ) {
   ::start_player( thing );
   thing->tactics( "response dodge" );
}

==================================================
FILE: races/gnome.c
==================================================

inherit "/std/races/humanoid";
void setup() {
   set_name( "gnome" );
   set_long( "This is the race for gnomes.\n" );
   set_desc( "a short-looking gnome" );
   set_weight( 25 );
   set_height( 20 );
   set_sight( ({ 0, 5, 150, 200 }) );
   set_stats( ({ -2, 8, 0, 6, 0 }) );
}

==================================================
FILE: races/goat.c
==================================================

inherit "/std/races/ruminant";
void setup() {
   set_name( "goat" );
   set_long( "A cloven-hoofed, horned mammal closely related to the "
      "sheep.\n" );
   set_desc( "a cloven-hoofed, horned mammal" );
   set_weight( 800 );
   set_height( 80 );
   remove_bit( "head" );
   add_bit( "head", "head", ({ 0, 135, 0,
      "left eye", "right eye", "nose", "skull", "tongue", "left ear",
      "right ear", "left horn", "right horn" }) );
   add_bit( "left horn", "horn", ({ "head", 5, 0 }) );
   add_bit( "right horn", "horn", ({ "head", 5, 0 }) );
   inedible += ({ "left horn", "right horn" });
   set_stats( ({ 4, 8, 0, 2, -4 }) );
}
void set_unarmed_attacks( object thing ) {
   thing->remove_attack( "hands" );
   thing->remove_attack( "feet" );
   thing->remove_attack( "standard" );
   thing->remove_attack( "horns" );
   thing->remove_attack( "hoof" );
   thing->add_attack( "horns", 60, ({ 21, 8, 11 }),
      "pierce", "unarmed", 0 );
   thing->add_attack( "hoof", 60, ({ 32, 10, 11 }),
      "blunt", "unarmed", 0 );
   thing->tactics( "response dodge" );
}

==================================================
FILE: races/golem.c
==================================================

inherit "/std/races/humanoid";
#include <armoury.h>
void knock_out( object player, object golem );
void unarmed_hands( int damage, object him, object me, string a_type,
    string a_name );
object make_corpse();
void setup() {
    set_name( "golem" );
    set_long( "Golems are artifical shaped of clay to resemble humanoids and "
        "animated using religious rituals.  If they are actually alive is a "
        "question under constant debate.\n" );
    set_height( 200 );
    set_weight( 40000 );
    set_desc( "a tall, human-shaped creature made of clay" );
    add_property( "no scry", 1 );
    add_ac( "blunt", "pierce", ({150}) );
    add_ac( "pierce", "pierce", ({250}) );
    add_ac( "sharp", "sharp", ({250}) );
    add_ac( "fire", "fire", ({10000}) );
    add_ac( "cold", "cold", ({10000}) );
    add_ac( "acid", "acid", ({10000}) );
    add_ac( "magic", "magic", ({10000}) );
    set_sight( ({ 0, 5, 100, 125 }) );
    set_stats( ({ 30, 10, 0, 40, 0 }) );
}
varargs int query_ac( string type, int damage, string zone, int amount ) {
    object attacker, weapon;
    if( type == "blunt" )
        return amount;
    attacker = (object)previous_object()->query_attacker();
    if( attacker ) {
        weapon = (object)attacker->query_weapon();
        if( weapon && weapon != attacker )
            weapon->adjust_cond( -(int)weapon->query_cond() / 15 );
    }
    return amount;
}
object make_corpse() {
    object corpse, owner;
    owner = previous_object();
    corpse = ARMOURY->request_item( "golem corpse", 100 );
    all_inventory( owner )->move( corpse );
    return corpse;
}
void set_unarmed_attacks( object thing ) {
    if( !thing )
        return;
    thing->remove_attack( "hands" );
    thing->remove_attack( "feet" );
    thing->add_attack( "hands", 75, ({ 50, 10, 15 }),
        "blunt", "unarmed", ({ "unarmed_hands", this_object() }) );
}
void unarmed_hands( int damage, object him, object me, string a_type,
    string a_name ) {
    if( damage > 130 || damage >= him->query_hp() ) {
        damage = 0;
        knock_out( him, me );
    }
}
void knock_out( object player, object golem ) {
    object room, target;
    string *all_exits, *no_doors = ({ });
    string exit;
    int i;
    if( !player || !golem )
        return;
    player->stop_all_fight();
    golem->stop_fight( player );
    if( !( room = environment( golem ) ) )
        return;
    all_exits = room->query_dest_dir();
    for( i = 0; i < sizeof( all_exits ); i += 2 )
        if( !room->query_door( all_exits[i], "door" ) )
            no_doors += ({ all_exits[i + 1]  });
    target = load_object( no_doors[ random( sizeof( no_doors ) ) ] );
    tell_object( player,
        golem->the_short() + "' blow lifts you off your feet and hurls "
        "you through the air.\n"
        "You see the world race past you and then the ground approaching very "
        "fast.\n" );
    if( target ) {
        exit = all_exits[ member_array( file_name( target ), all_exits ) - 1 ];
        player->move( target,
            "$N come$s flying through the air from $F in a high arc and "
            "thump$s onto the ground.",
            "$N is lifted off " + player->query_possessive() + " feet by " +
            golem->the_short() + "'s blow and sail$s out of the room "
            "to the " + exit + "." );
    } else
        tell_room( room,
            player->the_short() + " is lifted off " +
            player->query_possessive() + " feet by " +
            golem->the_short() + "'s blow and smashes to the "
            "ground.\n", ({player}) );
    player->set_position( "lying on the ground unconscious" );
    player->add_property( "passed out", 1, ( 150 + random( 150 ) ) );
}
int stone_skinned() {
    return 1;
}

==================================================
FILE: races/guppy.c
==================================================

inherit "/std/races/fish_base";
void setup() {
   set_name( "guppy" );
   set_long( "Fish,  yes.  A fish.  Nice generic standard fish thing.\n" );
   set_height( 15 );
   set_weight( 40 );
   set_desc( "a beautiful looking guppy" );
   set_stats( ({ -2, 14, -4, -4, -6 }) );
}
void start_player( object thing ) {
   ::start_player( thing );
   thing->add_property( "gills", 1 );
   thing->tactics( "response dodge" );
}
int lives_in_water() { return 1; }

==================================================
FILE: races/hare.c
==================================================

inherit "/std/races/lagomorpha_base";
void setup() {
   set_name( "hare" );
   set_long( "This is a hare with long ears.\n" );
   set_height( 50 );
   set_weight( 100 );
   set_desc( "a large and meaty hare" );
   set_stats( ({ -2, 8, -4, -4, -6 }) );
}
void new_set_level( mixed *args ) {
   int level;
   object thing;
   if( sizeof(args) < 2 || !args[1] )
      return;
   level = args[ 0 ];
   thing = args[ 1 ];
   thing->add_ac( "blunt", "blunt", level );
   thing->add_ac( "sharp", "sharp", 2 + level );
   thing->add_ac( "pierce", "pierce", 2 * level );
}
void set_unarmed_attacks( object thing ) {
   int number;
   number = (int)thing->query_skill_bonus( "fighting.combat.melee.unarmed" );
   number = sqrt( number ) / 6;
   thing->remove_attack( "hands" );
   thing->remove_attack( "feet" );
   thing->remove_attack( "bite" );
   thing->add_attack( "bite", 75, ({ 0, 3, 5 }),
      "pierce", "unarmed", 0 );
   thing->tactics( "response dodge" );
   thing->tactics( "attitude defensive" );
}

==================================================
FILE: races/hedgehog.c
==================================================

inherit "/std/races/carnivore";
void setup() {
   set_name( "hedgehog" );
   set_long( "A snail and worm eating little bugger.\n" );
   set_height( 30 );
   set_weight( 150 );
   set_desc( "A small spiny hedgehog" );
   set_stats( ({ 2, -2, -4, -2, -6 }) );
}
void new_set_level( mixed *args ) {
   int level;
   object thing;
   if( sizeof(args) < 2 || !args[1] )
      return;
   level = args[ 0 ];
   thing = args[ 1 ];
   level = 1 + ( 2 * level + random( level ) ) / 10;
   thing->add_ac( "blunt", "blunt", level );
   thing->add_ac( "sharp", "sharp", 2 + level );
   thing->add_ac( "pierce", "pierce", 2 * level );
}
void set_unarmed_attacks( object thing ) {
   int number;
   number = (int)thing->query_skill_bonus( "fighting.combat.melee.unarmed" );
   number = sqrt( number );
   thing->remove_attack( "hands" );
   thing->remove_attack( "feet" );
   thing->remove_attack( "bite" );
   thing->remove_attack( "claws" );
   thing->add_attack( "bite", 100, ({ number / 2, 2, number }),
      "pierce", "unarmed", 0 );
   thing->add_attack( "claws", 150, ({ number / 2, 2, number }),
      "sharp", "unarmed", 0 );
   thing->tactics( "response dodge" );
}

==================================================
FILE: races/hippo.c
==================================================

inherit "/std/races/ruminant";
void setup() {
   set_name( "elephant" );
   set_long( "This is an elephant.  A large creature with a thick grey "
      "hide.  He seems to weigh a lot so don't let him step on your "
      "toe.\n" );
   set_height( 280 );
   set_weight( 100000 );
   set_desc( "an elephant that looks back at you with small nice eyes" );
   remove_bit( "nose" );
   remove_bit( "head" );
   add_bit( "head", "head", ({ 0, 135, 0,
      "left eye", "right eye", "skull", "tongue", "left ear", "right ear",
      "tusk", "tusks", "trunk" }) );
   add_bit( "tail", "tail", ({ 0, 15, 0 }) );
   add_bit( "tusk", "tusk", ({ "head", 20, ({"/std/bit_set", 1}),
      "tusks" }) );
   add_bit( "tusks", "tusks", ({ "head", 40, ({"/std/bit", 2}) }) );
   add_bit( "trunk", "trunk", ({ "head", 30, 0 }) );
   inedible += ({ "tail", "tusk", "tusks" });
   unrottable += ({ "tusk", "tusks" });
   add_ac( "blunt", "blunt", ({ 40, 20}) );
   add_ac( "pierce", "pierce", ({ 30, 20 }) );
   add_ac( "sharp", "sharp", ({ 50, 20 }) );
   add_ac( "acid", "acid", 20 );
   add_ac( "fire", "fire", 20 );
   set_stats( ({ 10, -6, -4, 16, -2 }) );
}
void set_unarmed_attacks( object thing ) {
   thing->remove_attack( "hands" );
   thing->remove_attack( "tusks" );
   thing->remove_attack( "crush" );
   thing->remove_attack( "ram" );
   thing->add_attack( "tusks", 20, ({75, 5, 30}),
      "pierce", "unarmed", 0 );
   thing->add_attack( "crush", 10, ({100, 5, 50}),
      "blunt", "unarmed", 0 );
   thing->add_attack_message( "crush", "unarmed", ({
     0, "$N stand$s on $p hind legs and attempt$s to crash down on $I",
      100, "$N stand$s on $p hind legs and crash$es down stricking $I "
       "a glancing blow ",
      150, "$N stand$s on $p hind legs and crash$es down on $I, crushing "
            "$P $z",
      350, "$N stand$s on $p hind legs and crash$es down on $I, crushing "
            "$P $z into a bloody mess" }) );
   thing->add_attack( "ram", 10, ({50, 3, 20}),
      "blunt", "unarmed", 0 );
   thing->add_attack_message( "ram", "unarmed", ({
     0, "$N charge$s at $I",
      100, "$N charge$s $I and strike$s $I",
      150, "$N charge$s $I and strike$s $P $z hard, making $I stagger "
            "around",
      350, "$N charge$s $I and strike$s $I to the ground.  $I "
            "stumbles around a little groggily" }) );
   thing->add_attack( "trunk", 20, ({50, 3, 20}),
      "blunt", "unarmed", 0 );
   thing->add_attack_message( "trunk", "unarmed", ({
     0, "$N swing$s $p trunk at $I",
      100, "$N swing$s $p trunk at $I, hitting $P $z hard",
      150, "$N swing$s $p trunk, which thumps forcefully into $P $z",
      350, "$N swing$s $p trunk at $I, knocking $I down.  $I "
            "gets up groggily" }) );
}

==================================================
FILE: races/horse.c
==================================================

inherit "/std/races/base";
void setup() {
   set_name( "horse" );
   set_long( "A large hoofed mammal.  Surprise.\n" );
   set_height( 200 );
   set_weight( 7000 );
   bits= ({
      "head", "head", ({ 0, 120, 0,
         "left eye", "right eye", "skull", "brain", "left ear",
         "right ear", "tongue" }),
      "left eye", "eye", ({ "head", 2, 0 }),
      "right eye", "eye", ({ "head", 2, 0 }),
      "skull", "cranium", ({ "head", 45, 0, "teeth" }),
      "brain", "brain", ({ "head", 20, 0 }),
      "left ear", "ear", ({"head", 4, 0 }),
      "right ear", "ear", ({"head", 4, 0 }),
      "teeth", "teeth", ({ "skull", 5, ({"/std/bit_set", 1}) }),
      "tooth", "tooth", ({ "teeth", 1, ({"/std/bit", 18}) }),
      "tongue", "tongue", ({ "head", 9, 0 }),
      "neck", "neck", ({ 0, 120, 0 }),
      "torso", "body", ({ 0, 400, 0,
         "heart", "liver", "left kidney", "right kidney", "left lung",
         "right lung", "spleen", "intestine", "pancreas" }),
      "heart", "heart", ({ "torso", 35, 0 }),
      "liver", "liver", ({ "torso", 35, 0 }),
      "left kidney", "kidney", ({ "torso", 20, 0 }),
      "right kidney", "kidney", ({ "torso", 20, 0 }),
      "left lung", "lung", ({ "torso", 35, 0 }),
      "right lung", "lung", ({ "torso", 35, 0 }),
      "spleen", "spleen", ({ "torso", 20, 0 }),
      "intestine", "gut", ({ "torso", 75, 0 }),
      "pancreas", "pancreas", ({ "torso", 20, 0 }),
      "left front leg", "leg", ({ 0, 140, 0, "left front hoof" }),
      "left front hoof", "hoof", ({ "left front leg", 20, 0 }),
      "right front leg", "leg", ({ 0, 140, 0, "right front hoof" }),
      "right front hoof", "hoof", ({ "right front leg", 20, 0 }),
      "left rear leg", "leg", ({ 0, 160, 0, "left rear hoof" }),
      "left rear hoof", "hoof", ({ "left rear leg", 20, 0 }),
      "right rear leg", "leg", ({ 0, 160, 0, "right rear hoof" }),
      "right rear hoof", "hoof", ({ "right rear leg", 20, 0 }),
      "tail", "tail", ({ 0, 15, 0 }),
      "skin", "skin", ({ 0, 175, 0 })
   });
   inedible = ({ "skull", "left front hoof", "right front hoof",
      "left rear hoof", "right rear hoof", "tail", "teeth", "tooth" });
   unrottable = ({ "skull", "left front hoof", "right front hoof",
      "left rear hoof", "right rear hoof", "teeth", "tooth" });
   set_desc( "a large, hairy quadruped.  It looks like a horse" );
   add_ac( "blunt", "blunt", 50 );
   add_ac( "sharp", "sharp", 20 );
   add_ac( "pierce", "pierce", 20 );
   set_skin( "skin" );
   set_stats( ({ 4, 4, -2, 6, -2 }) );
}
void set_unarmed_attacks( object thing ) {
   int number;
   number = (int)thing->query_skill_bonus( "fighting.combat.melee.unarmed" );
   number = sqrt( number );
   thing->remove_attack( "hands" );
   thing->remove_attack( "feet" );
   thing->remove_attack( "chew" );
   thing->remove_attack( "hoof" );
   thing->add_attack( "chew", 50, ({ number, 2, number }),
      "sharp", "unarmed", 0 );
   thing->add_attack( "hoof", 70, ({ number / 2, 5, number }),
      "blunt", "unarmed", 0 );
   thing->tactics( "response dodge" );
}

==================================================
FILE: races/human.c
==================================================

inherit "/std/races/humanoid";
void setup() {
   set_long("The human race.  The standard by which all the races are set, "+
           "this is race can be considered the norm.\n");
   set_name("human");
   set_weight(1600);
   set_height(175);
   add_ac( "blunt", "blunt", 3 );
   add_ac( "pierce", "pierce", 2 );
   add_ac( "sharp", "sharp", 2 );
   set_sight( ({ 5, 25, 200, 300 }) );
}
string query_desc( object thing ) {
  if ( (int)thing->query_gender() == 1 )
    return "He is a strapping young human lad.\n";
  if ( (int)thing->query_gender() == 2 )
    return "She is a strapping young human lass.\n";
  return "It is a strapping young human.\n";
}
void set_unarmed_attacks( object thing ) {
   int number;
   number = (int)thing->query_skill_bonus( "fighting.combat.melee.unarmed" );
   number = 4 + sqrt( number );
   thing->remove_attack( "hands" );
   thing->remove_attack( "feet" );
   thing->add_attack( "hands", 75, ({ 2 * number, 5, number }), "blunt",
         "unarmed", "unarmed_hands" );
   thing->add_attack( "feet", 25, ({ 3 * number, 7, number }), "blunt",
         "unarmed", 0 );
}
string temperature_effects(object thing, int temperature) {
  string temperature_str;
  switch(temperature/3) {
  case 101 .. 1000:
    thing->dest_hide_shadow();
    tell_object( thing, "The heat is just too much for you.\n" );
    tell_room( environment( thing ), "Sweating profusely and turning "
               "a nasty red-purple colour "+
               (string)thing->the_short() +" expires.\n", thing );
    thing->do_death();
    temperature_str = "";
    break;
  case 81 .. 100:
    temperature_str = "close to death from extreme heatstroke";
    thing->adjust_tmp_wis(-1);
    thing->adjust_tmp_int(-1);
    break;
  case 51 .. 80:
    temperature_str = "sick from heatstroke";
    if(!random(2))
      thing->adjust_tmp_wis(-1);
    if(!random(2))
      thing->adjust_tmp_int(-1);
    break;
  case 21 .. 50:
    temperature_str = "very hot";
    tell_object(thing, "You feel really hot.\n");
    break;
  case 11 .. 20:
    temperature_str = "rather warm";
    tell_object(thing, "You feel quite warm.\n");
    break;
  case -10 .. 10:
    temperature_str = "";
    break;
  case -20 .. -11 :
    temperature_str = "rather cold";
    tell_object(thing, "You feel quite cold.\n");
    break;
  case -50 .. -21 :
    temperature_str = "very cold";
    tell_object(thing, "You feel cold to your bones.\n");
    break;
  case -80 .. -51 :
    temperature_str = "sick from hypothermia";
    tell_object(thing, "You're so cold you feel your energy being drained.\n");
    if(!random(2))
      thing->adjust_tmp_str(-1);
    if(!random(2))
      thing->adjust_tmp_con(-1);
    break;
  case -100 .. -81 :
    temperature_str = "close to death from extreme hypothermia";
    tell_object(thing, "You're so cold you feel as though you're about to "
                "expire.\n");
    thing->adjust_tmp_str(-1);
    thing->adjust_tmp_con(-1);
    break;
  case -1000 .. -101:
    thing->dest_hide_shadow();
    tell_object( thing, "The cold is just too much for you.\n" );
    tell_room( environment( thing ), "Frost riming "+
               (string)thing->query_possessive() +" skin in a thick crust, "+
               (string)thing->the_short() +" expires.\n", thing );
    thing->do_death();
    temperature_str = "";
    break;
  }
  if(temperature /5 >  10) {
    thing->new_parser("sweat");
    thing->add_effect("/std/effects/other/wetness",
                      temperature);
  } else if(temperature/5 < -10) {
    thing->new_parser("shiver");
    if(temperature < -30 && !random(250))
      thing->add_effect( "/std/effects/disease/common_cold",
                         -(temperature*10));
  }
  return temperature_str;
}

==================================================
FILE: races/humanoid.c
==================================================

inherit "/std/races/base";
void create() {
   do_setup++;
   ::create();
   do_setup--;
   set_desc( "a humanoid-type being.  This should not be used since it is a "
      "base race" );
   bits = ({
      "head", "head", ({ 0, 40, 0,
         "left ear", "right ear", "left eye", "right eye", "nose", "scalp",
         "tongue", "skull" }),
      "left ear", "ear", ({ "head", 1, 0 }),
      "right ear", "ear", ({ "head", 1, 0 }),
      "left eye", "eye", ({ "head", 1, 0 }),
      "right eye", "eye", ({ "head", 1, 0 }),
      "nose", "nose", ({ "head", 1, 0 }),
      "scalp", "scalp", ({ "head", 3, 0 }),
      "tongue", "tongue", ({ "head", 2, 0 }),
      "skull", "skull", ({ "head", 20, 0, "teeth", "brain" }),
      "brain", "brain", ({ "skull", 40, 0 }),
      "teeth", "teeth", ({ "skull", 2, ({"/std/bit_set", 1}), "tooth" }),
      "tooth", "tooth", ({ "teeth", 1, ({"/std/bit", 32}) }),
      "left arm", "arm", ({ 0, 80, 0, "left hand" }),
      "right arm", "arm", ({ 0, 80, 0, "right hand" }),
      "torso", "torso", ({ 0, 400, 0,
         "heart", "liver", "left kidney", "right kidney", "left lung",
         "right lung", "spleen", "rib" }),
      "left hand", "hand", ({ "left arm", 15, 0,
         "left little finger", "left third finger", "left index finger",
         "left ring finger", "left thumb" }),
      "right hand", "hand", ({ "right arm", 15, 0,
         "right little finger", "right third finger", "right index finger",
         "right ring finger", "right thumb" }),
      "left little finger", "finger", ({ "left hand", 1, 0 }),
      "left third finger", "finger", ({ "left hand", 1, 0 }),
      "left index finger", "finger", ({ "left hand", 1, 0 }),
      "left ring finger", "finger", ({ "left hand", 1, 0 }),
      "left thumb", "thumb", ({ "left hand", 1, 0 }),
      "right little finger", "finger", ({ "right hand", 1, 0 }),
      "right third finger", "finger", ({ "right hand", 1, 0 }),
      "right index finger", "finger", ({ "right hand", 1, 0 }),
      "right ring finger", "finger", ({ "right hand", 1, 0 }),
      "right thumb", "thumb", ({ "right hand", 1, 0 }),
      "heart", "heart", ({ "torso", 10, 0 }),
      "liver", "liver", ({ "torso", 5, 0 }),
      "left kidney", "kidney", ({ "torso", 5, 0 }),
      "right kidney", "kidney", ({ "torso", 5, 0 }),
      "left lung", "lung", ({ "torso", 5, 0 }),
      "right lung", "lung", ({ "torso", 5, 0 }),
      "spleen", "spleen", ({ "torso", 5, 0 }),
      "rib", "rib", ({ "torso", 1, ({"/std/bit", 16}) }),
      "genitals", "genitals", ({ 0 , 5, ({"/std/bit_set", 1}), "genitals" }),
      "left leg", "leg", ({ 0, 300, 0, "left foot", "left femur" }),
      "right leg", "leg", ({ 0, 300, 0, "right foot", "right femur" }),
      "left femur", "femur", ({ "left leg", 1, 0 }),
      "right femur", "femur", ({ "right leg", 1, 0 }),
      "left foot", "foot", ({ "left leg", 50, 0,
         "left big toe", "left second toe", "left third toe",
         "left fourth toe", "left little toe" }),
      "right foot", "foot", ({ "right leg", 50, 0,
         "right big toe", "right second toe", "right third toe",
         "right fourth toe", "right little toe" }),
      "right little toe", "toe", ({ "right foot", 1, 0 }),
      "right second toe", "toe", ({ "right foot", 1, 0 }),
      "right third toe", "toe", ({ "right foot", 1, 0 }),
      "right fourth toe", "toe", ({ "right foot", 1, 0 }),
      "right big toe", "toe", ({ "right foot", 1, 0 }),
      "left little toe", "toe", ({ "left foot", 1, 0 }),
      "left second toe", "toe", ({ "left foot", 1, 0 }),
      "left third toe", "toe", ({ "left foot", 1, 0 }),
      "left fourth toe", "toe", ({ "left foot", 1, 0 }),
      "left big toe", "toe", ({ "left foot", 1, 0 }),
      "skin", "skin", ({ 0, 175, 0 })
   });
   inedible = ({ "skull", "teeth", "tooth", "rib", "left femur", "right femur" });
   unrottable = ({ "skull", "teeth", "tooth", "rib", "left femur", "right femur" });
   set_skin( "skin" );
   if( !do_setup )
      this_object()->setup();
}
int query_humanoid() {
   return 1;
}
string *query_target_zones() {
  return ({ "head", "head", "neck",
              "chest", "chest", "chest", "chest", "back",
              "left arm", "left arm", "left hand",
              "stomach", "stomach", "stomach",
              "right arm", "right arm", "right hand",
              "left leg", "left leg", "left foot",
              "right leg", "right leg", "right foot"});
}
string map_target_zone(string zone) {
  switch(zone) {
  case "abdomen":
    return "stomach";
  case "arms":
    return (random(2) ? "left " : "right ") + "arm";
  case "hands":
    return (random(2) ? "left " : "right ") + "hand";
  case "legs":
    return (random(2) ? "left " : "right ") + "leg";
  case "feet":
    return (random(2) ? "left " :"right ") + "foot";
  default:
    return zone;
  }
}

==================================================
FILE: races/imp.c
==================================================

inherit "/std/races/demonic";
void setup() {
   set_long( "This is one of the smaller denizens of the Underworld.\n" );
   set_name( "imp" );
   set_height( 50 );
   set_weight( 400 );
   set_desc( "a crafty-looking imp" );
   set_stats( ({ 2, 8, 2, 2, 2 }) );
}
void new_set_level( mixed *args ) {
   int level;
   object thing;
   if( sizeof(args) < 2 || !args[1] )
      return;
   level = args[ 0 ];
   thing = args[ 1 ];
   thing->add_skill_level( "other.health", level * 4 );
   thing->add_ac( "blunt", "blunt", level / 4 );
   thing->add_ac( "pierce", "pierce", level / 8 );
   thing->add_ac( "sharp", "sharp", level / 6 );
}
void set_unarmed_attacks( object thing ) {
   int number;
   number = (int)thing->query_skill_bonus( "fighting.combat.melee.unarmed" );
   number = 6 + sqrt( number );
   thing->remove_attack( "hands" );
   thing->remove_attack( "feet" );
   thing->add_attack( "hands", 75, ({ 2 * number, 8, number }),
      "blunt", "unarmed", 0 );
   thing->add_attack( "feet", 25, ({ 3 * number, 10, number }),
      "blunt", "unarmed", 0 );
   thing->tactics( "response dodge" );
}

==================================================
FILE: races/insect.c
==================================================

inherit "/std/races/insect_base";
void setup() {
   set_name( "insect" );
   set_long( "A nondescript insect.\n" );
   set_height( 5 );
   set_weight( 2 );
   set_desc( "a nondescript insect" );
   set_stats( ({ -6, 4, -6, -6, -6 }) );
}
int query_eat( string type ) {
   return ( member_array( type, inedible ) == -1 );
}
void new_set_level( mixed *args ) {
   int level;
   object thing;
   if( sizeof(args) < 2 || !args[1] )
      return;
   level = args[ 0 ];
   thing = args[ 1 ];
   thing->add_skill_level( "other.health", level * 2 );
   thing->add_ac( "blunt", "blunt", level / 2 );
   thing->add_ac( "pierce", "pierce", level / 4 );
   thing->add_ac( "sharp", "sharp", level / 3 );
}
int query_dark( int light ) { return 0; }
void set_unarmed_attacks( object thing ) {
   int number;
   number = (int)thing->query_skill_bonus( "fighting.combat.melee.unarmed" );
   number = 4 + sqrt( number );
   thing->remove_attack( "hands" );
   thing->remove_attack( "feet" );
   thing->remove_attack( "bite" );
   thing->add_attack( "bite", 75, ({ 3 * number, 10, number }),
      "pierce", "unarmed", 0 );
   thing->tactics( "response dodge" );
}

==================================================
FILE: races/insect_base.c
==================================================

inherit "/std/races/base";
void create() {
   do_setup++;
   ::create();
   do_setup--;
   set_desc( "your standard insect.  This should not be used since it is a "
      "base race" );
   bits = ({
      "head", "head", ({ 0, 200, 0,
         "left feeler", "right feeler", "brain", "left eye", "right eye",
         "mandible" }),
      "left feeler", "feeler", ({ "head", 10, 0 }),
      "right feeler", "feeler", ({ "head", 10, 0 }),
      "brain", "brain", ({ "head", 50, 0 }),
      "left eye", "eye", ({ "head", 10, 0 }),
      "right eye", "eye", ({ "head", 10, 0 }),
      "mandible", "mouth", ({ "head", 25, 0 }),
      "thorax", "thorax", ({ 0, 500, 0,
         "left front leg", "right front leg", "left middle leg",
         "right middle leg", "left back leg", "right back leg" }),
      "left front leg", "leg", ({ "thorax", 50, 0 }),
      "right front leg", "leg", ({ "thorax", 50, 0 }),
      "left middle leg", "leg", ({ "thorax", 50, 0 }),
      "right middle leg", "leg", ({ "thorax", 50, 0 }),
      "left back leg", "leg", ({ "thorax", 50, 0 }),
      "right back leg", "leg", ({ "thorax", 50, 0 }),
      "abdomen", "abdomen", ({ 0, 500, 0 })
   });
   inedible = ({ "mandible" });
   unrottable = ({ "mandible" });
   set_skin( "carapace" );
   if( !do_setup )
      this_object()->setup();
}
string *query_target_zones() {
  return ({ "head", "head",
              "thorax","thorax", "thorax", "thorax", "thorax", "thorax",
              "left front leg", "left front leg",
              "left middle leg", "left middle leg",
              "right front leg", "right front leg",
              "right middle leg", "right middle leg",
              "abdomen", "abdomen", "abdomen", "abdomen", "abdomen",
              "left back leg", "left back leg",
              "right back leg", "right back leg" });
}
string map_target_zone(string zone) {
  switch(zone) {
  case "neck":
  case "chest":
    return "thorax";
  case "arms":
  case "hands":
    return (random(2) ? "left " : "right ") +
      (random(2) ? "front " : "middle ") + "leg";
  case "feet":
  case "legs":
    return (random(2) ? "left " : "right ") + "rear leg";
  default:
    return zone;
  }
}

==================================================
FILE: races/jellyfish.c
==================================================

inherit "/std/races/base";
#define STINGEFFECT "/std/effects/disease/jellyfish_sting"
void setup() {
   set_name( "jellyfish" );
   set_long( "A jelly-like blob with tendrils.\n" );
   set_height( 15 );
   set_weight( 20 );
   set_desc( "a jelly-like blob with tendrils." );
   bits = ({
      "tendril", "tendril", ({ 0, 1, ({ "/std/bit", 10 }) }),
      "bell", "bell", ({ 0, 10, 0 })
   });
   inedible = ({ "bell", "tendril" });
   unrottable = ({ });
   set_skin( "exocuticule" );
   add_ac( "acid", "acid", 100 );
   add_ac( "poison", "poison", 100 );
   add_ac( "blunt", "blunt", 75 );
   add_ac( "sharp", "sharp", 25 );
   add_ac( "pierce", "pierce", 25 );
   set_stats( ({ -5, -5, -5, -5, -5 }) );
}
void set_unarmed_attacks( object thing ) {
   int number;
   number = (int)thing->query_skill_bonus( "fighting.combat.melee.unarmed" );
   number = 2 + (sqrt( number ) / 10);
   thing->remove_attack( "hands" );
   thing->remove_attack( "feet" );
   thing->remove_attack( "tendrils" );
   thing->add_attack( "tendrils", 100, ({ number, 10, number }),
      "blunt", "blunt", ({ "sting", this_object() }) );
   thing->add_attack_message( "tendrils", "blunt", ({
      20, "$N brush$es $P $z with $p tendrils",
      60, "$N slap$s $P $z with $p tendrils",
      100, "$N knock$s $I with $p tendrils",
      140, "$N thwack$s $I with $p tendrils",
      180, "$N smack$s $p tendrils into $P $z",
      220, "$N wallop$s $I with $p tendrils",
      0, "$N hammer$s $I with $p tendrils" }) );
}
void start_player( object thing ) {
   ::start_player( thing );
   thing->add_property( "gills", 1 );
   thing->add_property("lives in water", 1);
}
int lives_in_water() { return 1; }
void sting( int damage, object him, object me, string atype, string aname ) {
   him->add_effect(STINGEFFECT, damage);
}

==================================================
FILE: races/lagomorpha_base.c
==================================================

inherit "/std/races/base";
void create() {
   do_setup++;
   ::create();
   do_setup--;
   set_desc( "a generic lagomorph animal.  It shouldn't be used since "
      "this is just a base race" );
   bits = ({
      "head", "head", ({ 0, 40, 0,
         "left eye", "right eye", "left ear", "right ear", "skull" }),
      "left eye", "eye", ({ "head", 1, 0 }),
      "right eye", "eye", ({ "head", 1, 0 }),
      "left ear", "ear", ({ "head", 20, 0 }),
      "right ear", "ear", ({ "head", 20, 0 }),
      "skull", "skull", ({ "head", 20, 0, "brain", "teeth" }),
      "brain", "brain", ({ "skull", 10, 0 }),
      "teeth", "teeth", ({ "skull", 5, ({"/std/bit_set", 1}), "tooth" }),
      "tooth", "tooth", ({ "teeth", 1, ({"/std/bit", 20}) }),
      "torso", "torso", ({ 0, 100, 0,
         "heart", "liver", "left kidney", "right kidney", "spleen",
         "right lung", "left lung", "intestine" }),
      "heart", "heart", ({ "torso", 15, 0 }),
      "liver", "liver", ({ "torso", 15, 0 }),
      "left kidney", "kidney", ({ "torso", 10, 0 }),
      "right kidney", "kidney", ({ "torso", 10, 0 }),
      "spleen", "spleen", ({ "torso", 10, 0 }),
      "right lung", "lung", ({ "torso", 15, 0 }),
      "intestine", "gut", ({ "torso", 100, 0 }),
      "genitalia", "genitalia", ({ 0, 5, 0 }),
      "left front leg", "leg", ({ 0, 100, 0, "left front paw" }),
      "left front paw", "paw", ({ "left front leg", 30, 0 }),
      "right front leg", "leg", ({ 0, 100, 0, "right front paw" }),
      "right front paw", "paw", ({ "right front leg", 30, 0 }),
      "left rear leg", "leg", ({ 0, 300, 0, "left rear paw" }),
      "left rear paw", "paw", ({ "left rear leg", 50, 0 }),
      "right rear leg", "leg", ({ 0, 300, 0, "right rear paw" }),
      "right rear paw", "paw", ({ "right rear leg", 50, 0 }),
      "tail", "tail", ({ 0, 25, 0 }),
      "skin", "skin", ({ 0, 175, 0 })
   });
   inedible = ({ "skull", "teeth", "tooth", "tail", "skin" });
   unrottable = ({ "skull", "teeth", "tooth" });
   set_skin( "fur" );
   if( !do_setup )
      this_object()->setup();
}
string *query_target_zones() {
  return ({ "head", "head", "neck",
              "chest", "back", "back", "back", "lower back",
              "left front leg", "left front leg", "left front paw",
              "stomach", "stomach", "tail",
              "right front leg", "right front leg", "right front paw",
              "left rear leg", "left rear leg", "left rear paw",
              "right rear leg", "right rear leg", "right rear paw"});
}
string map_target_zone(string zone) {
  switch(zone) {
  case "chest":
    return random(4) ? "back" : "chest";
  case "abdomen":
    return random(4) ? "stomach" : "lower back";
  case "arms":
    return (random(2) ? "left " : "right ") + "front leg";
  case "hands":
    return (random(2) ? "left " : "right ") + "front paw";
  case "legs":
    return (random(2) ? "left " : "right ") + "rear leg";
  case "feet":
    return (random(2) ? "left " :"right ") + "rear paw";
  default:
    return zone;
  }
}

==================================================
FILE: races/light.c
==================================================

inherit "/std/races/base";
void setup() {
   set_name( "light" );
   set_long( "A small sphere of magical blue light.\n" );
   set_weight( 1 );
   set_height( 1 );
   set_desc( "a small ball of blue light hovering in the air." );
   bits = ({ });
   inedible = ({ });
   unrottable = ({ });
   add_ac( "fire", "fire", 1000 );
   add_ac( "sound", "sound", 1000 );
   add_ac( "acid", "acid", 1000 );
   add_ac( "gas", "gas", 1000 );
   add_ac( "mental", "mental", 100 );
   set_stats( ({ 0, 14, -6, -6, -6 }) );
}
void start_player( object thing ) {
   ::start_player( thing );
   thing->tactics( "response dodge" );
}
int lives_in_water() { return 1; }

==================================================
FILE: races/lion.c
==================================================

inherit "/std/races/carnivore";
void setup() {
   set_name( "lion" );
   set_long( "A carnivorous mammal.  This is the real thing though, not "
         "your domesticated house cat, but the king of its kind.  It leaps "
         "over the ground in huge bounding strides, power that other cats "
         "can only dream about.\n" );
   set_height( 150 );
   set_weight( 3500 );
   set_desc( "a rather large lion, bounding vigorously towards you" );
   add_bit( "bile duct", "duct", ({ "torso", 1, 0 }) );
   set_stats( ({ 6, 10, -4, 10, -4 }) );
}
void new_set_level( mixed *args ) {
   int level;
   object thing;
   if( sizeof(args) < 2 || !args[1] )
      return;
   level = args[ 0 ];
   thing = args[ 1 ];
   thing->add_ac( "blunt", "blunt", level );
   thing->add_ac( "sharp", "sharp", 2 + level );
   thing->add_ac( "pierce", "pierce", 2 * level );
}
void set_unarmed_attacks( object thing ) {
   int number;
   number = (int)thing->query_skill_bonus( "fighting.combat.melee.unarmed" );
   number = sqrt( number );
   thing->remove_attack( "hands" );
   thing->remove_attack( "feet" );
   thing->remove_attack( "claws" );
   thing->remove_attack( "bite" );
   if( number < 10 )
      number = 10;
   thing->add_attack( "claws", 100, ({ number, 10, number }),
      "sharp", "unarmed", 0 );
   thing->add_attack( "bite", 75, ({ 3 * number, number / 2, number }),
      "pierce", "unarmed", 0 );
   thing->tactics( "response dodge" );
}

==================================================
FILE: races/lobster.c
==================================================

inherit "/std/races/base";
void setup() {
    set_name( "lobster" );
    set_long( "A cranky lobster.\n" );
    set_height( 10 );
    set_weight( 18 );
    set_desc( "a cranky lobster" );
    bits = ({
        "head", "head", ({ 0, 200, 0,
            "left antenna", "right antenna", "left antennule", "right "
            "antennule", "brain", "left eye", "right eye", "left eyestalk",
            "right eyestalk", "jaw", "skull" }),
        "left antenna", "antenna", ({ "head", 2, 0 }),
        "right antenna", "antenna", ({ "head", 2, 0 }),
        "left antennule", "antennule", ({ "head", 1, 0 }),
        "right antennule", "antennule", ({ "head", 1, 0 }),
        "brain", "brain", ({ "head", 50, 0 }),
        "skull", "skull", ({ "head", 50, 0 }),
        "left eye", "eye", ({ "head", 5, 0 }),
        "right eye", "eye", ({ "head", 5, 0 }),
        "left eyestalk", "eyestalk", ({ "head", 2, 0 }),
        "right eyestalk", "eyestalk", ({ "head", 2, 0 }),
        "jaw", "mouth", ({ "head", 25, 0 }),
        "carapace", "carapace", ({ 0, 25, 0 }),
        "thorax", "thorax", ({ 0, 500, 0,
            "left cheliped", "right cheliped", "left second leg",
            "right second leg", "left third leg", "right third leg", "left "
            "fourth leg", "right fourth leg", "left back leg", "right back "
            "leg", "heart", "hepatopancreas", "intestine", "stomach" }),
        "left cheliped", "cheliped", ({ "thorax", 75, 0 }),
        "right cheliped", "cheliped", ({ "thorax", 75, 0 }),
        "left second leg", "leg", ({ "thorax", 50, 0 }),
        "right second leg", "leg", ({ "thorax", 50, 0 }),
        "left third leg", "leg", ({ "thorax", 50, 0 }),
        "right third leg", "leg", ({ "thorax", 50, 0 }),
        "left fourth leg", "leg", ({ "thorax", 50, 0 }),
        "right fourth leg", "leg", ({ "thorax", 50, 0 }),
        "left back leg", "leg", ({ "thorax", 50, 0 }),
        "right back leg", "leg", ({ "thorax", 50, 0 }),
        "heart", "heart", ({ "thorax", 50, 0 }),
        "hepatopancreas", "hepatopancreas", ({ "thorax", 10, 0 }),
        "intestine", "intestine", ({ "thorax", 30, 0 }),
        "stomach", "stomach", ({ "thorax", 30, 0 }),
        "apron", "apron", ({ 0, 100, 0, "left pleopod", "right pleopod" }),
        "left pleopod", "pleopod", ({ "apron", 20, 0 }),
        "right pleopod", "pleopod", ({ "apron", 20, 0 })
    });
    inedible = ({ "jaw", "carapace", "skull" });
    unrottable = ({ "jaw", "carapace", "skull" });
    set_skin( "shell" );
    set_stats( ({ -6, 4, -6, -4, -6 }) );
}
int query_eat( string type ) {
   return ( member_array( type, inedible ) == -1 );
}
void new_set_level( mixed *args ) {
   int level;
   object thing;
   if( sizeof(args) < 2 || !args[1] )
      return;
   level = args[ 0 ];
   thing = args[ 1 ];
   thing->add_skill_level( "other.health", level * 2 );
   thing->add_ac( "blunt", "blunt", level / 2 );
   thing->add_ac( "pierce", "pierce", level / 4 );
   thing->add_ac( "sharp", "sharp", level / 3 );
}
void set_unarmed_attacks( object thing ) {
    int number;
    number = (int)thing->query_skill_bonus( "fighting.combat.melee.unarmed" );
    number = 4 + sqrt( number );
    thing->remove_attack( "hands" );
    thing->remove_attack( "feet" );
    thing->remove_attack( "pincers" );
    thing->add_attack( "pincers", 100, ({ number, 10, number }),
        "unarmed", "unarmed", 0 );
    thing->add_attack_message( "pincers", "unarmed", ({
       20, "$N bat$s $I with $p pincer.\n",
       60, "$N nip$s $P $z with $p pincer.\n",
       100, "$N scratch$es $I deeply with $p pincer.\n",
       140, "$N cut$s $P $z deeply with $p pincer.\n",
       180, "$N dig$s $p pincer into $P $z.\n",
       220, "$N gouge$s $I with $p pincer.\n",
       0, "$N slice$s $P $z up with $p pincer.\n" }) );
   thing->tactics( "response dodge" );
}
int lives_in_water() { return 1; }

==================================================
FILE: races/luggage.c
==================================================

inherit "/std/races/base";
void setup() {
   set_name( "luggage" );
   set_long( "A sapient pearwood luggage.\n" );
   set_desc( "a nice set of luggage" );
   set_height( 75 );
   set_weight( 5000 );
   bits = ({
      "trunk", "trunk", ({ 0, 400, 0 }),
      "lid", "lid", ({ 0, 1000, 0 }),
      "leg", "leg", ({ 0, 5, ({"/std/bit", 50}) })
   });
   inedible = ({ "trunk", "lid" });
   unrottable = ({ "trunk", "lid" });
   set_skin( "casing" );
   add_ac( "blunt", "blunt", 25 );
   add_ac( "pierce", "pierce", 25 );
   add_ac( "sound", "sound", 1000 );
   add_ac( "gas", "gas", 1000 );
   set_stats( ({ 10, 6, -2, 10, -2 }) );
}
void set_unarmed_attacks( object thing ) {
   int number;
   number = (int)thing->query_skill_bonus( "fighting.combat.melee.unarmed" );
   number = 4 + sqrt( number ) / 2;
   thing->remove_attack( "hands" );
   thing->add_attack( "feet", 75, ({ 5 * number, 10, number }), "blunt",
      "unarmed", 0 );
   thing->tactics( "response dodge" );
}

==================================================
FILE: races/mole.c
==================================================

inherit "/std/races/rodent_base";
void setup() {
  set_name( "mole" );
  set_long( "Any insectivore of the family Talpidae, which includes moles, "
     "shrew moles, and desmans.  They have no ears and tiny eyes, and live "
     "in small burrows.\n" );
  set_height( 30 );
  set_weight( 10 );
  set_desc( "This is a blind and deaf mole." );
  set_sight( ({ -100, -60, 40, 60 }) );
  set_stats( ({ -2, 2, -6, -2, -6 }) );
}
void set_unarmed_attacks( object thing ) {
  int number;
  number = (int)thing->query_skill_bonus( "fighting.combat.melee.unarmed" );
  number = sqrt( number ) / 6;
  thing->remove_attack( "hands" );
  thing->remove_attack( "feet" );
  thing->remove_attack( "bite" );
  thing->remove_attack( "claws" );
  thing->add_attack( "bite", 75, ({ 0, 3, number }),
    "pierce", "unarmed", 0 );
  thing->add_attack( "claws", 50, ({ 10, 5, number / 2 }),
    "sharp", "unarmed", 0 );
  thing->tactics( "response dodge" );
}

==================================================
FILE: races/moose.c
==================================================

inherit "/std/races/ruminant";
void setup() {
   mixed *new_head;
   set_name( "moose" );
   set_long( "The moose is a large woodland animal.\n" );
   set_height( 200 );
   set_weight( 7000 );
   set_desc( "a large, hairy quadruped reminding you very much of a moose" );
   new_head = query_bit( "head" );
   new_head[ 2 ] += ({ "left horn", "right horn" });
   remove_bit( "head" );
   add_bit( "head", "head", new_head[ 2 ] );
   add_bit( "left horn", "horn", ({ "head", 20, 0 }) );
   add_bit( "right horn", "horn", ({ "head", 20, 0 }) );
   add_bit( "tail", "tail", ({ 0, 15, 0 }) );
   inedible += ({"left horn", "right horn", "tail" });
   unrottable += ({ "left horn", "right horn" });
   add_ac( "blunt", "blunt", 50 );
   add_ac( "pierce", "pierce", 20 );
   add_ac( "sharp", "sharp", 20 );
   set_stats( ({ 4, -2, -4, 8, -4 }) );
}
void set_unarmed_attacks( object thing ) {
   thing->remove_attack( "hands" );
   thing->remove_attack( "feet" );
   thing->remove_attack( "standard" );
   thing->remove_attack( "chew" );
   thing->remove_attack( "hoof" );
   thing->add_attack( "chew", 20, ({ 40, 8, 10 }),
      "sharp", "unarmed", 0 );
   thing->add_attack( "hoof", 50, ({ 60, 10, 40 }),
      "blunt", "unarmed", 0 );
   thing->tactics( "response dodge" );
}

==================================================
FILE: races/mouse.c
==================================================

inherit "/std/races/rodent_base";
void setup() {
   set_name( "mouse" );
   set_long( "Any of numerous small rodents (as of the genus Mus) with "
      "pointed snout, rather small ears, elongated body and slender "
      "tail.\n" );
   set_height( 10 );
   set_weight( 5 );
   set_desc( "a little mouse, scurrying about for food." );
   set_stats( ({ -4, 8, -4, -4, -6 }) );
}
void new_set_level( mixed *args ) {
   int level;
   object thing;
   if( sizeof(args) < 2 || !args[1] )
      return;
   level = args[ 0 ];
   thing = args[ 1 ];
   thing->add_ac( "blunt", "blunt", level );
   thing->add_ac( "sharp", "sharp", 2 + level );
   thing->add_ac( "pierce", "pierce", 2 * level );
}
void set_unarmed_attacks( object thing ) {
   int number;
   number = (int)thing->query_skill_bonus( "fighting.combat.melee.unarmed" );
   number = sqrt( number ) / 6;
   thing->remove_attack( "hands" );
   thing->remove_attack( "feet" );
   thing->remove_attack( "bite" );
   thing->remove_attack( "claws" );
   thing->add_attack( "bite", 75, ({ 0, 3, number }),
      "pierce", "unarmed", 0 );
   thing->add_attack( "claws", 50, ({ 0, 5, number / 2 }),
      "sharp", "unarmed", 0 );
   thing->tactics( "response dodge" );
}

==================================================
FILE: races/mustelidae.c
==================================================

inherit "/std/races/mustelidae_base";
void setup() {
   set_name( "mustelidae" );
   set_long( "The typical weasel like animal.\n" );
   set_height( 15 );
   set_weight( 30 );
   set_desc( "small brown meateater" );
   set_stats( ({ -2, 8, -2, -4, -4 }) );
}
void new_set_level( mixed *args ) {
   int level;
   object thing;
   if( sizeof(args) < 2 || !args[1] )
      return;
   level = args[ 0 ];
   thing = args[ 1 ];
   level = 2 + ( 2 * level + random( level ) ) / 8;
   thing->add_ac( "blunt", "blunt", 20 + level / 3 );
   thing->add_ac( "sharp", "sharp", 50 + level );
   thing->add_ac( "pierce", "pierce", 60 + 2 * level );
}
void set_unarmed_attacks( object thing ) {
   int number;
   number = (int)thing->query_skill_bonus( "fighting.combat.melee.unarmed" );
   number = 4 + sqrt( number ) / 2;
   thing->remove_attack( "hands" );
   thing->remove_attack( "feet" );
   thing->remove_attack( "claws" );
   thing->remove_attack( "bite" );
   thing->add_attack( "claws", 50, ({ ( 4 * number ) / 2, 8, 2 * number }),
      "sharp", "unarmed", 0 );
   thing->add_attack( "bite", 100, ({ 2 * number, 10, ( 3 * number ) / 2 }),
      "pierce", "unarmed", 0 );
   thing->tactics( "response dodge" );
}

==================================================
FILE: races/mustelidae_base.c
==================================================

inherit "/std/races/base";
void create() {
   do_setup++;
   ::create();
   do_setup--;
   set_desc( "the usual mustelidae.  This should not be used as it is a "
      "base race" );
   bits = ({
      "head", "head", ({ 0, 40, 0,
         "left eye", "right eye", "left ear", "right ear", "skull",
         "tongue", "nose" }),
      "left eye", "eye", ({ "head", 1, 0 }),
      "right eye", "eye", ({ "head", 1, 0 }),
      "left ear", "ear", ({ "head", 1, 0 }),
      "right ear", "ear", ({ "head", 1, 0 }),
      "skull", "skull", ({ "head", 20, 0, "brain", "teeth" }),
      "brain", "brain", ({ "skull", 20, 0 }),
      "teeth", "teeth", ({ "skull", 1, ({"/std/bit_set", 1}), "tooth" }),
      "tooth", "tooth", ({ "teeth", 1, ({"/std/bit", 20}) }),
      "tongue", "tongue", ({ "head", 2, 0 }),
      "nose", "nose", ({ "head", 1, 0 }),
      "torso", "torso", ({ 0, 350, 0,
         "heart", "liver", "left kidney", "right kidney", "left lung",
         "right lung", "spleen", "intestine" }),
      "heart", "heart", ({ "torso", 10, 0 }),
      "liver", "liver", ({ "torso", 5, 0 }),
      "left kidney", "kidney", ({ "torso", 5, 0 }),
      "right kidney", "kidney", ({ "torso", 5, 0 }),
      "left lung", "lung", ({ "torso", 10, 0 }),
      "right lung", "lung", ({ "torso", 10, 0 }),
      "spleen", "spleen", ({ "torso", 5, 0 }),
      "intestine", "gut", ({ "torso", 15, 0 }),
      "genitals", "genitals", ({ 0, 5, 0 }),
      "left front leg", "leg", ({ 0, 5, 0 }),
      "right front leg", "leg", ({ 0, 5, 0 }),
      "left rear leg", "leg", ({ 0, 5, 0 }),
      "right rear leg", "leg", ({ 0, 5, 0 }),
      "tail", "tail", ({ 0, 5, 0 }),
      "skin", "skin", ({ 0, 175, 0 })
   });
   inedible = ({ "skull", "teeth", "tooth", "tail", "skin" });
   unrottable = ({ "skull", "teeth", "tooth" });
   set_skin( "fur" );
   if( !do_setup )
      this_object()->setup();
}

==================================================
FILE: races/panda.c
==================================================

inherit "/std/races/carnivore";
void setup() {
   set_name( "panda" );
   set_desc( "a black and white fluffy panda" );
   set_height( 200 );
   set_weight( 8000 );
   set_stats( ({ 6, 4, -2, 8, -4 }) );
}
void new_set_level( mixed *args ) {
   int level;
   object thing;
   if( sizeof(args) < 2 || !args[1] )
      return;
   level = args[ 0 ];
   thing = args[ 1 ];
   level = 2 + ( 2 * level + random( level ) ) / 8;
   thing->add_ac( "blunt", "blunt", 20 + level / 3 );
   thing->add_ac( "sharp", "sharp", 50 + level );
   thing->add_ac( "pierce", "pierce", 60 + 2 * level );
}
void set_unarmed_attacks( object thing ) {
   int number;
   number = (int)thing->query_skill_bonus( "fighting.combat.melee.unarmed" );
   number = 4 + sqrt( number ) / 2;
   thing->remove_attack( "hands" );
   thing->remove_attack( "feet" );
   thing->remove_attack( "claws" );
   thing->remove_attack( "bite" );
   thing->add_attack( "claws", 100, ({ 2 * number, 10, number }),
      "sharp", "unarmed", 0 );
   thing->add_attack( "bite", 50, ({ 3 * number, 8, number }),
      "pierce", "unarmed", 0 );
   thing->tactics( "response dodge" );
   thing->tactics( "attitude offensive" );
}

==================================================
FILE: races/parrot.c
==================================================

inherit "/std/races/bird_base";
void setup() {
   set_name( "parrot" );
   set_long( "This is a vicious, evil-looking parrot with a glint of mischief "
      "in its eye.\n" );
   set_weight( 25 );
   set_height( 20 );
   set_desc( "an ordinary parrot" );
   add_ac( "feather_blow", "blunt", 10 );
   add_ac( "feather_slash", "sharp", 2 );
   add_ac( "feather_pierce", "pierce", 2 );
   set_stats( ({ 0, 8, -6, -4, -6 }) );
}
void set_unarmed_attacks( object thing ) {
   int number;
   number = (int)thing->query_skill_bonus( "fighting.combat.melee.unarmed" );
   number = sqrt( number / 4 ) + ( thing->query_weight() / 20 );
   thing->remove_attack( "hands" );
   thing->remove_attack( "feet" );
   thing->remove_attack( "beak" );
   thing->remove_attack( "claws" );
   thing->add_attack( "beak", 50, ({ number / 2, 2, number / 2 }),
      "pierce", "unarmed", 0 );
   thing->add_attack( "claws", 75, ({ number, 5, number / 2 }),
      "sharp", "unarmed", 0 );
   thing->tactics( "response dodge" );
}

==================================================
FILE: races/penguin.c
==================================================

inherit "/std/races/bird_base";
void setup() {
   set_name( "penguin" );
   set_long( "Penguins are always rather formal.\n" );
   set_weight( 600 );
   remove_bit( "gizzard" );
   set_stats( ({ 2, 8, -4, -4, -6 }) );
}
string query_desc( object ob ) {
   return "Penguins are always rather formally dressed.\n";
}

==================================================
FILE: races/pig.c
==================================================

inherit "/std/races/ruminant";
void setup() {
   set_name( "pig" );
   set_long( "A domesticated mammal, of the swine family.\n" );
   set_desc( "a domesticated mammal, of the swine family" );
   set_weight( 1200 );
   set_height( 50 );
   remove_bit( "nose" );
   remove_bit( "head" );
   remove_bit( "left front leg" );
   remove_bit( "right front leg" );
   remove_bit( "left rear leg" );
   remove_bit( "right rear leg" );
   add_bit( "head", "head", ({ 0, 135, 0,
      "left eye", "right eye", "snout", "skull", "tongue", "left ear",
      "right ear" }) );
   add_bit( "snout", "snout", ({ "head", 12, 0 }) );
   add_bit( "left front trotter", "trotter", ({ 0, 180, 0, "left front hoof" }) );
   add_bit( "right front trotter", "trotter", ({ 0, 180, 0, "right front hoof" }) );
   add_bit( "left rear trotter", "trotter", ({ 0, 180, 0, "left rear hoof" }) );
   add_bit( "right rear trotter", "trotter", ({ 0, 180, 0, "right rear hoof" }) );
   add_bit( "chop", "chop", ({ 0, 1, 0 }) );
   add_bit( "tail", "tail", ({ 0, 1, 0 }) );
   inedible += ({ "left front trotter", "right front trotter",
      "left rear trotter", "right rear trotter" });
   unrottable += ({ "left front trotter", "right front trotter",
      "left rear trotter", "right rear trotter" });
   set_stats( ({ 2, 0, -2, 4, -4 }) );
}
void set_unarmed_attacks( object thing ) {
   thing->remove_attack( "hands" );
   thing->remove_attack( "feet" );
   thing->remove_attack( "standard" );
   thing->remove_attack( "hoof" );
   thing->add_attack( "hoof", 60, ({ 32, 10, 11 }),
      "blunt", "unarmed", 0 );
   thing->tactics( "response dodge" );
}

==================================================
FILE: races/rabbit.c
==================================================

inherit "/std/races/lagomorpha_base";
void setup() {
   set_name( "rabbit" );
   set_long( "A small furry and fluffy rabbit.\n" );
   set_height( 30 );
   set_weight( 25 );
   set_desc( "a cute and fluffy little bunny" );
   set_stats( ({ -3, 8, -4, -5, -6 }) );
}
void new_set_level( mixed *args ) {
   int level;
   object thing;
   if( sizeof(args) < 2 || !args[1] )
      return;
   level = args[ 0 ];
   thing = args[ 1 ];
   thing->add_ac( "blunt", "blunt", level );
   thing->add_ac( "sharp", "sharp", 2 + level );
   thing->add_ac( "pierce", "pierce", 2 * level );
}
void set_unarmed_attacks( object thing ) {
   int number;
   number = (int)thing->query_skill_bonus( "fighting.combat.melee.unarmed" );
   number = sqrt( number ) / 7;
   thing->remove_attack( "hands" );
   thing->remove_attack( "feet" );
   thing->remove_attack( "bite" );
   thing->add_attack( "bite", 75, ({ 1, 3, 4 }),
      "pierce", "unarmed", 0 );
   thing->tactics( "response dodge" );
   thing->tactics( "attitude defensive" );
}

==================================================
FILE: races/raptor.c
==================================================

inherit "/std/races/bird_base";
void setup() {
   set_name( "raptor" );
   set_long( "A carnivorous bird (as a hawk or falcon) that feeds wholly on "
      "meat taken by hunting.\n" );
   set_height( 65 );
   set_weight( 200 );
   set_desc( "a sharp-eyed raptor" );
   remove_bit( "gizzard" );
   set_stats( ({ 0, 14, -4, 2, -6 }) );
}
void new_set_level( mixed *args ) {
   int level;
   object thing;
   if( sizeof(args) < 2 || !args[1] )
      return;
   level = args[ 0 ];
   thing = args[ 1 ];
   level = 2 * level + random( level );
   thing->add_ac( "blunt", "blunt", level );
   thing->add_ac( "pierce", "pierce", level / 4 );
   thing->add_ac( "sharp", "sharp", level / 4 );
}
void set_unarmed_attacks( object thing ) {
   int number;
   number = (int)thing->query_skill_bonus( "fighting.combat.melee.unarmed" );
   number = sqrt( number ) / 2;
   thing->remove_attack( "hands" );
   thing->remove_attack( "feet" );
   thing->remove_attack( "beak" );
   thing->remove_attack( "claws" );
   thing->add_attack( "beak", 50, ({ number / 2, 2, number / 2 }),
      "pierce", "unarmed", 0 );
   thing->add_attack( "claws", 75, ({ number, 5, number / 2 }),
      "sharp", "unarmed", 0 );
   thing->tactics( "response dodge" );
}

==================================================
FILE: races/rat.c
==================================================

inherit "/std/races/rodent_base";
void setup() {
   set_name( "rat" );
   set_long( "A rodent of the genus Rattus, distinguished from a mouse "
      "by its larger size and by structural details, as of the teeth.\n" );
   set_height( 15 );
   set_weight( 10 );
   set_desc( "a vicious-looking rat, scurrying about for food." );
   set_stats( ({ -4, 8, -2, -4, -4 }) );
}
void new_set_level( mixed *args ) {
   int level;
   object thing;
   if( sizeof(args) < 2 || !args[1] )
      return;
   level = args[ 0 ];
   thing = args[ 1 ];
   thing->add_ac( "blunt", "blunt", level );
   thing->add_ac( "sharp", "sharp", 2 + level );
   thing->add_ac( "pierce", "pierce", 2 * level );
}
void set_unarmed_attacks( object thing ) {
   int number;
   number = (int)thing->query_skill_bonus( "fighting.combat.melee.unarmed" );
   number = sqrt( number );
   thing->remove_attack( "hands" );
   thing->remove_attack( "feet" );
   thing->remove_attack( "bite" );
   thing->remove_attack( "claws" );
   thing->add_attack( "bite", 75, ({ 3*number, 3, number }),
      "pierce", "unarmed", 0 );
   thing->add_attack( "claws", 50, ({ 3*number, 5, number / 2 }),
      "sharp", "unarmed", 0 );
   thing->tactics( "response dodge" );
}

==================================================
FILE: races/reptile.c
==================================================

inherit "/std/races/reptile_base";
void setup() {
   set_name( "reptile" );
   set_long( "A normal reptile, wiv scales on.\n" );
   set_weight( 1000 );
   set_height( 20 );
   set_desc( "your standard reptile" );
   set_stats( ({ -2, 2, -4, -2, -6 }) );
}
void set_unarmed_attacks( object thing ) {
   int number;
   number = (int)thing->query_skill_bonus( "fighting.combat.melee.unarmed" );
   number = sqrt( number );
   thing->remove_attack( "hands" );
   thing->remove_attack( "feet" );
   thing->remove_attack( "chew" );
   thing->remove_attack( "tail" );
   thing->add_attack( "chew", 75, ({ 3 * number, number / 2, number }),
      "sharp", "unarmed", 0 );
   thing->add_attack( "tail", 75, ({ number, 5, number }),
      "blunt", "unarmed", 0 );
   thing->tactics( "response dodge" );
   thing->tactics( "attitude offensive" );
}

==================================================
FILE: races/reptile_base.c
==================================================

inherit "/std/races/base";
void create() {
   do_setup++;
   ::create();
   do_setup--;
   set_desc( "your standard reptile.  This should not be used as it is a "
      "base race" );
   bits = ({
      "head", "head", ({ 0, 50, 0,
         "left eye", "right eye", "skull", "tongue", "snout" }),
      "left eye", "eye", ({ "head", 2, 0 }),
      "right eye", "eye", ({ "head", 2, 0 }),
      "skull", "skull", ({ "head", 50, 0, "brain", "teeth" }),
      "brain", "brain", ({ "skull", 25, 0 }),
      "teeth", "teeth", ({ "skull", 5, ({"/std/bit_set", 1}), "tooth" }),
      "tooth", "tooth", ({ "teeth", 1, ({"/std/bit", 48}) }),
      "tongue", "tongue", ({ "head", 10, 0 }),
      "snout", "snout", ({ "head", 10, 0 }),
      "neck", "neck", ({ 0, 50, 0 }),
      "torso", "body", ({ 0, 400, 0,
         "heart", "liver", "left kidney", "right kidney", "left lung",
         "right lung", "spleen", "intestine", "pancreas" }),
      "heart", "heart", ({ "torso", 15, 0 }),
      "liver", "liver", ({ "torso", 15, 0 }),
      "left kidney", "kidney", ({ "torso", 10, 0 }),
      "right kidney", "kidney", ({ "torso", 10, 0 }),
      "left lung", "lung", ({ "torso", 15, 0 }),
      "right lung", "lung", ({ "torso", 15, 0 }),
      "spleen", "spleen", ({ "torso", 10, 0 }),
      "intestine", "gut", ({ "torso", 100, 0 }),
      "pancreas", "pancreas", ({ "torso", 10, 0 }),
      "left front leg", "leg", ({ 0, 180, 0, "left front foot" }),
      "left front foot", "foot", ({ "left front leg", 27, 0 }),
      "right front leg", "leg", ({ 0, 180, 0, "right front foot" }),
      "right front foot", "foot", ({ "right front leg", 27, 0 }),
      "left rear leg", "leg", ({ 0, 180, 0, "left rear foot" }),
      "left rear foot", "foot", ({ "left rear leg", 27, 0 }),
      "right rear leg", "leg", ({ 0, 180, 0, "right rear foot" }),
      "right rear foot", "foot", ({ "right rear leg", 27, 0 }),
      "tail", "tail", ({ 0, 100, 0 }),
      "skin", "skin", ({ 0, 175, 0 })
   });
   inedible = ({ "skull", "left front foot", "right front foot",
      "left rear foot", "right rear foot", "tail", "teeth", "tooth",
      "skin" });
   unrottable = ({ "skull", "teeth", "tooth" });
   set_skin( "scales" );
   if( !do_setup )
      this_object()->setup();
}

==================================================
FILE: races/rodent.c
==================================================

inherit "/std/races/rodent_base";
void setup() {
   set_name( "rodent" );
   set_long( "A generic rodent object.\n" );
   set_height( 10 );
   set_weight( 10 );
   set_desc( "a small rodent" );
   set_stats( ({ -4, 8, -4, -4, -6 }) );
}
void new_set_level( mixed *args ) {
   int level;
   object thing;
   if( sizeof(args) < 2 || !args[1] )
      return;
   level = args[ 0 ];
   thing = args[ 1 ];
   level = 1 + ( 2 * args[ 0 ] + random( level ) ) / 10;
   thing->add_ac( "blunt", "blunt", level );
   thing->add_ac( "sharp", "sharp", 2 + level );
   thing->add_ac( "pierce", "pierce", 2 * level );
}
void set_unarmed_attacks( object thing ) {
   int number;
   number = (int)thing->query_skill_bonus( "fighting.combat.melee.unarmed" );
   number = sqrt( number );
   thing->remove_attack( "hands" );
   thing->remove_attack( "feet" );
   thing->remove_attack( "bite" );
   thing->add_attack( "bite", 100, ({ number, 5, number }),
      "pierce", "unarmed", 0 );
   thing->tactics( "response dodge" );
}

==================================================
FILE: races/rodent_base.c
==================================================

inherit "/std/races/base";
void create() {
   do_setup++;
   ::create();
   do_setup--;
   set_desc( "a generic rodent.  It shouldn't be used since this is just a "
      "base race" );
   bits = ({
      "head", "head", ({ 0, 40, 0,
         "left eye", "right eye", "left ear", "right ear", "skull" }),
      "left eye", "eye", ({ "head", 1, 0 }),
      "right eye", "eye", ({ "head", 1, 0 }),
      "left ear", "ear", ({ "head", 10, 0 }),
      "right ear", "ear", ({ "head", 10, 0 }),
      "skull", "skull", ({ "head", 20, 0, "brain", "teeth" }),
      "brain", "brain", ({ "skull", 10, 0 }),
      "teeth", "teeth", ({ "skull", 5, ({"/std/bit_set", 1}), "tooth" }),
      "tooth", "tooth", ({ "teeth", 1, ({"/std/bit", 20}) }),
      "torso", "torso", ({ 0, 600, 0,
         "heart", "liver", "left kidney", "right kidney", "spleen",
         "right lung", "left lung", "intestine" }),
      "heart", "heart", ({ "torso", 15, 0 }),
      "liver", "liver", ({ "torso", 15, 0 }),
      "left kidney", "kidney", ({ "torso", 10, 0 }),
      "right kidney", "kidney", ({ "torso", 10, 0 }),
      "spleen", "spleen", ({ "torso", 10, 0 }),
        "left lung", "lung", ({ "torso", 16, 0 }),
      "right lung", "lung", ({ "torso", 15, 0 }),
      "intestine", "gut", ({ "torso", 100, 0 }),
      "genitalia", "genitalia", ({ 0, 5, 0 }),
      "left front leg", "leg", ({ 0, 100, 0, "left front paw" }),
      "left front paw", "paw", ({ "left front leg", 30, 0 }),
      "right front leg", "leg", ({ 0, 100, 0, "right front paw" }),
      "right front paw", "paw", ({ "right front leg", 30, 0 }),
      "left rear leg", "leg", ({ 0, 100, 0, "left rear paw" }),
      "left rear paw", "paw", ({ "left rear leg", 30, 0 }),
      "right rear leg", "leg", ({ 0, 100, 0, "right rear paw" }),
      "right rear paw", "paw", ({ "right rear leg", 30, 0 }),
      "tail", "tail", ({ 0, 25, 0 }),
      "skin", "skin", ({ 0, 175, 0 })
   });
   inedible = ({ "skull", "teeth", "tooth", "tail", "skin" });
   unrottable = ({ "skull", "teeth", "tooth" });
   set_skin( "fur" );
   if( !do_setup )
      this_object()->setup();
}

==================================================
FILE: races/ruminant.c
==================================================

inherit "/std/races/base";
void create() {
   do_setup++;
   ::create();
   do_setup--;
   set_weight( 800 );
   set_height( 50 );
   set_desc( "a four-legged ruminant.  It shouldn't be used since this is "
      "just a base race" );
   bits = ({
      "head", "head", ({ 0, 100, 0,
         "left eye", "right eye", "nose", "skull", "tongue", "left ear",
         "right ear" }),
      "left eye", "eye", ({ "head", 2, 0 }),
      "right eye", "eye", ({ "head", 2, 0 }),
      "skull", "skull", ({ "head", 40, 0, "brain", "teeth" }),
      "brain", "brain", ({ "skull", 20, 0 }),
      "left ear", "ear", ({"head", 5, 0 }),
      "right ear", "ear", ({"head", 5, 0 }),
      "nose", "nose", ({ "head", 15, 0 }),
      "teeth", "teeth", ({ "skull", 5, ({"/std/bit_set", 1}), "tooth" }),
      "tooth", "tooth", ({ "teeth", 1, ({"/std/bit", 18}) }),
      "tongue", "tongue", ({ "head", 10, 0 }),
      "neck", "neck", ({ 0, 100, 0 }),
      "torso", "chest", ({ 0, 300, 0,
         "heart", "liver", "left kidney", "right kidney", "left lung",
         "right lung", "spleen", "first stomach", "second stomach",
         "third stomach", "fourth stomach", "intestine", "pancreas" }),
      "heart", "heart", ({ "torso", 15, 0 }),
      "liver", "liver", ({ "torso", 15, 0 }),
      "left kidney", "kidney", ({ "torso", 10, 0 }),
      "right kidney", "kidney", ({ "torso", 10, 0 }),
      "left lung", "lung", ({ "torso", 15, 0 }),
      "right lung", "lung", ({ "torso", 15, 0 }),
      "spleen", "spleen", ({ "torso", 10, 0 }),
      "intestine", "gut", ({ "torso", 50, 0 }),
      "pancreas", "pancreas", ({ "torso", 10, 0 }),
      "first stomach", "stomach", ({ "torso", 20, 0 }),
      "second stomach", "stomach", ({ "torso", 20, 0 }),
      "third stomach", "stomach", ({ "torso", 20, 0 }),
      "fourth stomach", "stomach", ({ "torso", 20, 0 }),
      "genitals", "genitals", ({ 0, 5, 0 }),
      "left front leg", "leg", ({ 0, 150, 0, "left front hoof" }),
      "left front hoof", "hoof", ({ "left front leg", 30, 0 }),
      "right front leg", "leg", ({ 0, 150, 0, "right front hoof" }),
      "right front hoof", "hoof", ({ "right front leg", 30, 0 }),
      "left rear leg", "leg", ({ 0, 150, 0, "left rear hoof" }),
      "left rear hoof", "hoof", ({ "left rear leg", 30, 0 }),
      "right rear leg", "leg", ({ 0, 150, 0, "right rear hoof" }),
      "right rear hoof", "hoof", ({ "right rear leg", 30, 0 }),
      "skin", "skin", ({ 0, 175, 0 })
   });
   inedible = ({ "skull", "neck", "genitals", "teeth", "left front hoof",
      "right front hoof", "left rear hoof", "right rear hoof", "tooth",
      "skin" });
   unrottable = ({ "skull", "teeth", "tooth" });
   set_skin( "hide" );
   set_stats( ({ 0, 0, -4, 2, -6 }) );
   if( !do_setup )
      this_object()->setup();
}
string *query_target_zones() {
  return ({ "head", "head", "neck",
              "chest", "back", "back", "back", "lower back",
              "left front leg", "left front leg", "left front hoof",
              "stomach", "stomach", "tail",
              "right front leg", "right front leg", "right front hoof",
              "left rear leg", "left rear leg", "left rear hoof",
              "right rear leg", "right rear leg", "right rear hoof"});
}
string map_target_zone(string zone) {
  switch(zone) {
  case "chest":
    return random(4) ? "back" : "chest";
  case "abdomen":
    return random(4) ? "stomach" : "lower back";
  case "arms":
    return (random(2) ? "left " : "right ") + "front leg";
  case "hands":
    return (random(2) ? "left " : "right ") + "front hoof";
  case "legs":
    return (random(2) ? "left " : "right ") + "rear leg";
  case "feet":
    return (random(2) ? "left " :"right ") + "rear hoof";
  default:
    return zone;
  }
}
