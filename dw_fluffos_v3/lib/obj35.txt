
=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/black_handled_ceremonial_bronze_knife.wep ===
::Name::"knife"
::Short::"black handled ceremonial bronze knife"
::Adjective::({ "black", "handled", "ceremonial", "bronze" })
::Main Plural::"black handled ceremonial bronze knives"
::Plural::"knives"
::Long::"This is a ceremonial knife, for use in magic rituals.  Its
ornate handle is made of ebony and its long bronze blade has been
carved with mystic runes.\n"
::Weight::11
::Length::13
::Width::4
::Material::"copper"
::Value::1000
::Setup::2000
::Attack::"slash", 70, ({ 10, 2, 20 }), "sharp", "sharp", 0
::Attack::"stab", 40, ({ 20, 2, 60 }), "pierce", "pierce", 0


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/emerald_hilted_dagger.wep ===
::Name::"dagger"
::Short::"emerald hilted dagger"
::Adjective::({ "emerald", "hilted" })
::Main Plural::"emerald hilted daggers"
::Plural::"daggers"
::Long::"The short, fairly thick and double edged blade of this dagger looks
pretty much like any other, except that this particular one has an odd green
hue about it.  The hue is augmented by a green stone which resides in the
small pommel of the dagger and appears to glow with its own light.  While the
blade and pommel shine bright green, the handle itself doesn't, in fact the
handle is just a plain, everyday dagger handle with a leather criss-crossed
grip.\n"
::Weight::4
::Length::10
::Width::2
::Material:: "steel"
::Value::10000
::Setup::60000
::Damage Chance::10
::Attack::"slash", 75, ({ 10, 5, 15 }), "sharp", "sharp"
::Attack::"stab", 50, ({ 10, 2, 25 }), "pierce", "pierce"
::$add_immune::"sharp"
::Property::"no recycling", 1


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/sharp_butter_knife.wep ===
::Name::"knife"
::Short::"sharp butter knife"
::Main_plural::"sharp butter knives"
::Adjective::({ "sharp", "butter" })
::Alias::({ "utensil" })
::Plural::"knives"
::Long:: "This is a butter knife that has been sharpened a bit.\n"
::Weight:: 3
::Length:: 6
::Width:: 1
::Material:: "steel"
::Value:: 75
::Setup:: 500
::Attack:: "slash", 70, ({ 15, 2, 20 }), "sharp", "sharp", 0
::Attack:: "stab", 40, ({ 20, 2, 30 }), "pierce", "pierce", 0


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/elegant_stiletto.wep ===
::Name::"stiletto"
::Short::"elegant stiletto"
::Alias::"knife"
::Adjective::({"slender", "elegant", "dragon's","head"})
::Main Plural::"elegant stilettoes"
::Plural::"knives"
::Long::"The blade of this slender knife is made of the finest steel whereas "
   "the handle consists of silver and is crafted into a dragon's head.\n"
::Weight::7
::Length:: 10
::Width:: 1
::Material::"steel"
::Value::4000
::Setup:: 5000
::Attack:: "stab", 70, ({ 45, 5, 20 }), "pierce", "pierce"
#adding two attacks of the same name no longer adds two separate attacks
::Attack::"stabstab", 70, ({ 45, 5, 20 }), "pierce", "pierce"
::No Limbs::1



=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/.carving_knife.wep_virtual_.c ===
#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/carving_knife.wep#1" );
  call_other( clone, "set_name", "knife"  );
  call_other( clone, "set_short", "carving knife"  );
  call_other( clone, "add_adjective", ({ "carving" })  );
  call_other( clone, "add_alias", "utensil"  );
  call_other( clone, "add_plural", "utensils"  );
  call_other( clone, "set_long", "This is a knife such as you might use to carve up your Octeday roast, and then use to substantiate your arguments with your spouse as to who should do the washing up.\n"  );
  call_other( clone, "set_weight", 9  );
  call_other( clone, "set_length", 12  );
  call_other( clone, "set_width", 2  );
  call_other( clone, "set_material", "steel"  );
  call_other( clone, "set_value", 500  );
  call_other( clone, "new_weapon", 2000  );
  call_other( clone, "add_attack", "slash", 70, ({ 10, 2, 20 }), "sharp", "sharp", 0  );
  call_other( clone, "add_attack", "stab", 40, ({ 20, 2, 60 }), "pierce", "pierce", 0 );
   return clone;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/copper_dagger.wep ===
::Name::"dagger" 
::Short::"copper dagger" 
::Main_plural::"copper daggers" 
::Adjective::({ "copper" }) 
::Alias::({  }) 
::Plural::({  }) 
::Long:: "A medium knife with a very thick, curved blade of beaten copper.  It 
is a traditional Djelian weapon; high on convention, low on practicality.\n"
::Length:: 10
::Width:: 2
::Material::"copper"
::Weight:: 40 
::Value:: 100 
::Weapon Skill:: "fighting.combat.melee.sharp" 
::Setup:: 700 
::Attack::"slash", 90, ({ 0, 1, 25 }), "sharp", "sharp"
::Attack::"stab", 90, ({ 0, 1, 25 }), "pierce", "pierce"



=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/small_knife.wep ===
::Name::"knife"
::Short::"small knife"
::Adjective::({ "small" })
::Alias::"utensil"
::Plural::"utensils"
::Long::"This small knife might be the sort of thing "
"you'd use to peel an apple, slice carrots or "
"stab in someone's kidney.  You could say "
"that it's a multi-purpose utensil.\n"
::Weight::6
::Length::7
::Width::1
::Material:: "steel"
::Value::50
::Setup::500
::Attack::"slash", 70, ({ 5, 2, 20 }), "sharp", "sharp", 0
::Attack::"stab", 40, ({ 10, 2, 30 }), "pierce", "pierce", 0


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/.silver_sickle.wep_virtual_.c ===
#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/silver_sickle.wep#1" );
  call_other( clone, "set_name", "sickle"  );
  call_other( clone, "set_short", "silver sickle"  );
  call_other( clone, "add_adjective", "silver"  );
  call_other( clone, "set_long", "This is a dagger with a crescent shaped blade cast from silver.\n"  );
  call_other( clone, "set_weight", 9  );
  call_other( clone, "set_length", 12  );
  call_other( clone, "set_width", 8  );
  call_other( clone, "set_material",  "silver"  );
  call_other( clone, "set_value",  2000  );
  call_other( clone, "new_weapon", 12800  );
  call_other( clone, "set_damage_chance", 5  );
  call_other( clone, "add_attack",  "slash", 75, ({ 10, 5, 15 }), "sharp", "sharp"  );
  call_other( clone, "add_attack",  "stab", 50, ({ 10, 2, 25 }), "pierce", "pierce" );
   return clone;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/klatchian_steel_dirk.wep ===
::Name::"dirk"
::Short::"Klatchian steel dirk"
::Adjective::({ "klatchian", "steel" })
::Alias::"dagger"
::Plural::"daggers"
::Long::"This is a very long, curving knife with a wickedly sharp
point.  It is made of Klatchian steel.\n"
::Weight::12
::Length::18
::Width::3
::Material::"steel"
::Value::400
::Setup::32000
::Damage Chance::5
::Attack::"slash", 75, ({ 10, 5, 20 }), "sharp", "sharp"
::Attack::"stab", 50, ({ 10, 2, 27 }), "pierce", "pierce"


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/carving_knife.wep ===
::Name::"knife"
::Short::"carving knife"
::Adjective::({ "carving" })
::Alias::"utensil"
::Plural::"utensils"
::Long::"This is a knife such as you might use to carve up your Octeday
roast, and then use to substantiate your arguments with your spouse as
to who should do the washing up.\n"
::Weight::9
::Length::12
::Width::2
::Material::"steel"
::Value::500
::Setup::2000
::Attack::"slash", 70, ({ 10, 2, 20 }), "sharp", "sharp", 0
::Attack::"stab", 40, ({ 20, 2, 60 }), "pierce", "pierce", 0


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/bone_knife.wep ===
::Name::"knife"
::Short::"bone knife"
::Main_plural::"bone knives"
::Adjective::({ "bone" })
::Alias::({ })
::Plural::({ })
::Long:: "This, white knife is made of bone and seems like it would
be a handy tool for lots of things.  It looks well used.\n "
::Weight:: 7
::Length:: 10
::Width:: 2
::Material::"bone"
::Value:: 50
::Setup:: 450
::Attack:: "slash", 70, ({ 4, 2, 15 }), "sharp", "sharp", 0
::Attack:: "stab", 40, ({ 9, 2, 30 }), "pierce", "pierce", 0


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/dinner_knife.wep ===
# Pseudopolis Yard Watch-House
# Wirble
# modified July 2002

::Name::"knife"
::Short::"dinner knife"
::Plural::"cutlery"
::Adjective::"dinner"
::Main Plural::"dinner knives"
::Long:: "This is a dinner knife.  Its handle looks stained and a bit rusty, " +
    "but there's no doubt that the blade is rather sharp and quite pointy as " +
    "well.\n"
::Weight::8
::Length::6
::Width::1
::Material:: "metal"
::Value::100
::Setup::2000
::Attack:: "slash", 70, ({ 10, 1, 20 }), "sharp", "sharp", 0
::Attack:: "stab", 40, ({ 15, 1, 20 }), "pierce", "pierce", 0
::Property::"no recycling", 1



=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/ruby_hilted_dagger.wep ===
::Name::"dagger"
::Short::"ruby hilted dagger"
::Adjective::({ "ruby", "hilted" })
::Main Plural::"ruby hilted daggers"
::Plural::"daggers"
::Long::"The short, fairly thick and double edged blade of this dagger looks
pretty much like any other, except that this particular one has an odd sun-
bright red hue about it.  The hue is augmented by a sun-bright red stone which
resides in the small pommel of the dagger and appears to sparkle with its own
light.  While the blade and pommel shine sun-bright red, the handle itself
doesn't, being a deep blood red colour instead, the handle is a plain,
everyday dagger handle with a leather criss-crossed grip.\n"
::Weight::4
::Length::10
::Width::2
::Material:: "steel" 
::Value::10000
::Setup::60000
::Damage Chance::10
::Attack::"slash", 75, ({ 10, 5, 15 }), "sharp", "sharp"
::Attack::"stab", 50, ({ 10, 2, 25 }), "pierce", "pierce"
::$add_immune::"sharp"
::Property::"no recycling", 1


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/.knife.wep_virtual_.c ===
#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/knife.wep#1" );
  call_other( clone, "set_name", "knife"  );
  call_other( clone, "set_short", "knife"  );
  call_other( clone, "add_adjective", ({ "medium-sized", "medium" })  );
  call_other( clone, "set_main_plural", "knives"  );
  call_other( clone, "set_long", "This is a medium-sized knife, the sort of thing someone might keep in a boot to ward off a would-be attacker.  You just have to hope that it's not then used to prepare your dinner.\n"  );
  call_other( clone, "set_weight", 8  );
  call_other( clone, "set_length", 7  );
  call_other( clone, "set_width", 2  );
  call_other( clone, "set_material",  "steel"  );
  call_other( clone, "set_value", 100  );
  call_other( clone, "new_weapon", 9000  );
  call_other( clone, "add_attack",  "slash", 70, ({ 10, 3, 20 }), "sharp", "sharp", 0  );
  call_other( clone, "add_attack",  "stab", 40, ({ 15, 3, 30 }), "pierce", "pierce", 0 );
   return clone;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/state_change/grind.old ===
# $Locker: allana $
#
# $Id: grind.dat,v 1.10 1999/05/10 03:33:45 jeremy Exp allana $
#
# $Log: grind.dat,v $
# Revision 1.10  1999/05/10 03:33:45  jeremy
# I think I fixed up the version problem.
#
# Revision 1.9  1999/04/17 14:07:26  allana
# Changed the factors of a few items to 1.0 to make their
# weight when ground the same as when whole. Much more sane.
#
# Revision 1.8  1999/04/13 14:50:16  allana
# Changed medium alias of wild garlic - Alllananana!
#
# Revision 1.7  1999/02/16 17:01:09  allana
# Added ordinary garlic and removed decay speed from wild garlic.
#
# Revision 1.6  1998/12/04 19:48:24  allana
# updated wild_garlic to have garlic breath effect and a decay speed.
#
# Revision 1.5  1998/10/22 19:25:39  tape
# Aye Teste
#
# Revision 1.4  1998/09/25 06:41:00  macchirton
# Added cabbage. Yum
#
# Revision 1.3  1998/09/23 08:14:25  macchirton
# Addedall theScrogdenstuff
#
# Revision 1.1  1998/08/27 21:27:24  jeremy
# Initial revision
#
#
::item "grind:Clover"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 50.0
::->func:: ({
      (: $2->set_name( "clover" ) :),
      (: $2->set_short( "ground plant" ) :),
      (: $2->add_alias( "plant" ) :),
      (: $2->add_adjective( "ground" ) :),
      (: $2->set_long( "This is some ground plant material.  It looks "
            "like it might have been clover.\n" ) :),
      (: $2->set_medium_alias( "GroundClover" ) :),
      (: $2->set_decay_speed( 0 ) :)
   })
   
::item "grind:CoffeeBean"::
::->result:: "/obj/reagents/coffee.ob"
::->factor:: 5.0
::->func:: ({ })

::item "grind:Yarrow"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 50.0
::->func:: ({
        (: $2->set_name("yarrow") :),
        (: $2->set_short("ground plant") :),
        (: $2->add_alias("plant") :),
        (: $2->add_adjective("ground") :),
        (: $2->set_long("This is some ground plant material.  It looks "
                    "like it might've been yarrow.\n") :),
        (: $2->set_medium_alias("GroundYarrow") :),
        (: $2->add_eat_effect("/std/effects/ingested/cum_poison", 12) :),
        (: $2->add_eat_effect("/std/effects/ingested/basic_healing", 2) :),
        (: $2->set_decay_speed(0) :)
    })

   
::item "grind:Comfrey"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 50.0
::->func:: ({
        (: $2->set_name("comfrey") :),
        (: $2->set_short("ground plant") :),
        (: $2->add_alias("plant") :),
        (: $2->add_adjective("ground") :),
        (: $2->set_long("This is some ground plant material.  It looks "
                    "like it might've been comfrey.\n") :),
        (: $2->set_medium_alias("GroundComfrey") :),
        (: $2->add_eat_effect("/std/effects/ingested/cum_poison", 16) :),
        (: $2->add_eat_effect("/std/effects/ingested/basic_healing", 4) :),
        (: $2->set_decay_speed(0) :)
    })


::item "grind:FloppyMadman"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 1.0
::->func:: ({
   (: $2->set_name( "mushroom" ) :),
   (: $2->set_short( "ground mushroom" ) :),
   (: $2->add_alias( "madman" ) :),
   (: $2->add_adjective( "ground" ) :),
   (: $2->set_long( "This is some ground mushroom.  Judging from the "
      "green tint, it looks like it might've been Floppy Madman.\n" ) :),
   (: $2->set_medium_alias( "GroundFloppyMadman" ) :)
   })
   
   
::item "grind:KlatchianFleabane"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 50.0
::->func:: ({
        (: $2->set_name("fleabane") :),
        (: $2->set_short("ground plant") :),
        (: $2->add_alias("plant") :),
        (: $2->add_adjective("ground") :),
        (: $2->set_long("This is some ground plant material.  It looks "
                    "like it might've been Klatchian fleabane.\n") :),
        (: $2->set_medium_alias("GroundKlatchianFleabane") :),
        (: $2->set_decay_speed(0) :)
    })

::item "grind:GroundKlatchianFleabane"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 1.2
::->func:: ({
        (: $2->set_name("fleabane") :),
        (: $2->set_short("powdered plant") :),
        (: $2->add_alias("plant") :),
        (: $2->add_adjective(({"powdered", "lavender"})) :),
        (: $2->set_long("This is some powdered plant material.  It has "
                    "a slight lavender hue with specs of orange.\n") :),
        (: $2->set_medium_alias("PowderedKlatchianFleabane") :),
        (: $2->set_decay_speed(0) :)
    })

::item "grind:StinkingMayweed"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 50.0
::->func:: ({
        (: $2->set_name("mayweed") :),
        (: $2->set_short("ground plant") :),
        (: $2->add_alias("plant") :),
        (: $2->add_adjective("ground") :),
        (: $2->set_long("This is some ground plant material.  It looks "
                    "like it might've been stinking mayweed.\n") :),
        (: $2->set_medium_alias("GroundStinkingMayweed") :),
        (: $2->set_decay_speed(0) :)
    })

::item "grind:GroundStinkingMayweed"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 1.2
::->func:: ({
        (: $2->set_name("mayweed") :),
        (: $2->set_short("powdered plant") :),
        (: $2->add_alias("plant") :),
        (: $2->add_adjective(({"powdered", "lavender"})) :),
        (: $2->set_long("This is some powdered plant material.  It has "
                    "a brownish green color, as well as a very strong "
                    "odor.\n") :),
        (: $2->set_medium_alias("PowderedStinkingMayweed") :),
        (: $2->set_decay_speed(0) :)
    })
    
::item "grind:Walnut"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 50.0
::->func:: ({
      (: $2->set_name( "walnut" ) :),
      (: $2->set_short( "ground walnut" ) :),
      (: $2->add_adjective( "ground" ) :),
      (: $2->add_plural( "walnuts" ) :),
      (: $2->set_long( "This is a pile of ground walnut.\n" ) :),
      (: $2->set_medium_alias( "GroundWalnut" ) :),
   })


::item "grind:WildGarlic"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 50.0
::->func:: ({
      (: $2->set_name( "garlic" ) :),
      (: $2->set_short( "ground garlic" ) :),
      (: $2->add_alias( "garlic" ) :),
      (: $2->add_adjective( "wild", "ground" ) :),
      (: $2->set_long( "This is some ground plant material.  Judging from the "
         "smell, it must have been wild garlic.\n" ) :),
       (: $2->set_medium_alias( "GroundGarlic" ) :),
      (: $2->add_eat_effect("/std/effects/ingested/garlic_breath", 200) :),
      (: $2->set_decay_speed(0) :)
   })
::item "grind:Parsley"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 50.0
::->func:: ({
        (: $2->set_name("parsley") :),
        (: $2->set_short("ground parsley") :),
        (: $2->add_alias("plant") :),
        (: $2->add_adjective("ground") :),
        (: $2->set_long("This is some ground plant material.  It smells "
                    "like it might've been parsley.\n") :),
        (: $2->set_medium_alias("GroundParsley") :),
        (: $2->add_eat_effect("/std/effects/ingested/breath_fresh", 2) :),
        (: $2->set_decay_speed(0) :)
    })

::item "grind:Sage"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 50.0
::->func:: ({
        (: $2->set_name("sage") :),
        (: $2->set_short("ground sage") :),
        (: $2->add_alias("plant") :),
        (: $2->add_adjective("ground") :),
        (: $2->set_long("This is some ground plant material.  It smells "
                    "like it might've been sage.\n") :),
        (: $2->set_medium_alias("GroundSage") :),
        (: $2->set_decay_speed(0) :)
    })
::item "grind:Rosemary"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 50.0
::->func:: ({
        (: $2->set_name("rosemary") :),
        (: $2->set_short("ground rosemary") :),
        (: $2->add_alias("plant") :),
        (: $2->add_adjective("ground") :),
        (: $2->set_long("This is some ground plant material.  It smells "
                    "like it might've been rosemary.\n") :),
        (: $2->set_medium_alias("GroundRosemary") :),
        (: $2->set_decay_speed(0) :)
    })
::item "grind:Thyme"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 50.0
::->func:: ({
        (: $2->set_name("thyme") :),
        (: $2->set_short("ground thyme") :),
        (: $2->add_alias("plant") :),
        (: $2->add_adjective("ground") :),
        (: $2->set_long("This is some ground plant material.  It smells "
                    "like it might've been thyme.\n") :),
        (: $2->set_medium_alias("GroundThyme") :),
        (: $2->set_decay_speed(0) :)
    })
::item "grind:Basil"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 50.0
::->func:: ({
        (: $2->set_name("basil") :),
        (: $2->set_short("ground basil") :),
        (: $2->add_alias("plant") :),
        (: $2->add_adjective("ground") :),
        (: $2->set_long("This is some ground plant material.  It smells "
                    "like it might've been basil.\n") :),
        (: $2->set_medium_alias("GroundBasil") :),
        (: $2->set_decay_speed(0) :)
    })
::item "grind:Eyebright"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 50.0
::->func:: ({
        (: $2->set_name("eyebright") :),
        (: $2->set_short("ground eyebright") :),
        (: $2->add_alias("plant") :),
        (: $2->add_adjective("ground") :),
        (: $2->set_long("This is some ground plant material.  It looks "
                    "like it might've been eyebright.\n") :),
        (: $2->set_medium_alias("GroundEyebright") :),
        (: $2->set_decay_speed(0) :)
    })
::item "grind:Spider"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 10.0
::->func:: ({
        (: $2->set_name("spider") :),
        (: $2->set_short("ground arachnid") :),
        (: $2->add_alias("arachnid") :),
        (: $2->add_adjective("ground") :),
        (: $2->set_long("This is some ground arachnid.  It looks "
                    "very chitinous.\n") :),
        (: $2->set_medium_alias("GroundSpider") :),
        (: $2->set_decay_speed(0) :)
    })
::item "grind:Fennel"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 50.0
::->func:: ({
        (: $2->set_name("fennel") :),
        (: $2->set_short("ground seeds") :),
        (: $2->add_alias(({"seed", "seeds"})) :),
        (: $2->add_adjective("ground") :),
        (: $2->set_long("This is some ground seeds.  It smells "
                    "like it might've been fennel.\n") :),
        (: $2->set_medium_alias("GroundFennel") :),
        (: $2->set_decay_speed(0) :)
    })



::item "grind:Carrot"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 10.0
::->func:: ({
        (: $2->set_name("carrot") :),
        (: $2->set_short("ground carrot") :),
        (: $2->add_adjective("ground") :),
        (: $2->set_long("This is some ground carrot.  It looks "
                    "very orange.\n") :),
        (: $2->set_medium_alias("GroundCarrot") :),
        (: $2->set_decay_speed(0) :)
    })


::item "grind:BunnyEyeball"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 10.0
::->func:: ({
        (: $2->set_name("eye") :),
          (: $2->add_alias("eyes") :),
        (: $2->set_short("ground eyes") :),
        (: $2->add_adjective("ground") :),
        (: $2->set_long("This is some ground eyes.  It looks "
                    "very bloody.\n") :),
        (: $2->set_medium_alias("GroundBunnyEyeball") :),
        (: $2->set_decay_speed(0) :)
    })
::item "grind:MolassesCookie"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 20.0
::->func:: ({
        (: $2->set_name("crumbs") :),
        (: $2->set_short("molasses cookie crumbs") :),
        (: $2->add_adjective(({"molasses", "cookie"})) :),
        (: $2->set_long("This is some cookie crumbs.  Yum.\n") :),
        (: $2->set_medium_alias("GroundMolassesCookie") :),
        (: $2->set_decay_speed(0) :)
    })
::item "grind:Radish"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 10.0
::->func:: ({
        (: $2->set_name("radish") :),
        (: $2->set_short("ground radish") :),
        (: $2->add_adjective("ground") :),
        (: $2->set_long("This is some ground radish.  It looks "
                    "very orange.\n") :),
        (: $2->set_medium_alias("GroundRadish") :),
        (: $2->set_decay_speed(0) :)
    })
::item "grind:Parsnip"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 10.0
::->func:: ({
        (: $2->set_name("parsnip") :),
        (: $2->set_short("ground parsnip") :),
        (: $2->add_adjective("ground") :),
        (: $2->set_long("This is some ground parsnip.  It looks "
                    "a bit like a pile of pine sawdust.\n") :),
        (: $2->set_medium_alias("GroundParsnip") :),
        (: $2->set_decay_speed(0) :)
    })
::item "grind:Oregano"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 50.0
::->func:: ({
        (: $2->set_name("oregano") :),
        (: $2->set_short("ground oregano") :),
        (: $2->add_adjective("ground") :),
        (: $2->set_long("This is some ground oregano.  It looks "
                    "very Genuan.\n") :),
        (: $2->set_medium_alias("GroundOregano") :),
        (: $2->set_decay_speed(0) :)
    })
::item "grind:Foxglove"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 50.0
::->func:: ({
        (: $2->set_name("foxglove") :),
        (: $2->set_short("ground foxglove") :),
        (: $2->add_adjective("ground") :),
        (: $2->set_long("This is some ground foxglove.  You can tell by the "
             "little purple flowers scattered in with the green stuff.\n") :),
        (: $2->set_medium_alias("GroundFoxglove") :),
        (: $2->set_decay_speed(0) :)
    })
::item "grind:Violet"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 50.0
::->func:: ({
        (: $2->set_name("violet") :),
        (: $2->set_short("ground violet") :),
        (: $2->add_adjective("ground") :),
        (: $2->set_long("This is some ground violets.  It looks very, well, "
             "violet.\n") :),
        (: $2->set_medium_alias("GroundViolet") :),
        (: $2->set_decay_speed(0) :)
    })
::item "grind:Cabbage"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 10.0
::->func:: ({
        (: $2->set_name("cabbage") :),
        (: $2->set_short("shredded cabbage") :),
        (: $2->add_adjective("shredded") :),
        (: $2->set_long("This is some shredded cabbage.  "
             "Hopefully, not a sentinent one.\n") :),
        (: $2->set_medium_alias("GroundCabbage") :),
        (: $2->set_decay_speed(0) :)
    })
::item "grind:Garlic"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 50.0
::->func:: ({
        (: $2->set_name("garlic") :),
        (: $2->set_short("ground garlic") :),
        (: $2->add_adjective("ground") :),
        (: $2->set_long("This is some ground plant material.  Judging from "
           "the smell, it must have been garlic.\n" ) :),
        (: $2->set_medium_alias( "GroundGarlic" ) :),
        (: $2->add_eat_effect("/std/effects/ingested/garlic_breath", 200) :),
        (: $2->set_decay_speed(0) :)
    })
::item "grind:Farlic"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 1.0
::->func:: ({
        (: $2->set_name("farlic") :),
        (: $2->set_short("ground farlic") :),
        (: $2->add_adjective("ground") :),
        (: $2->set_long("This is what was once farlic.  A lesser-known "
           "relative of garlic.\n") :),
       (: $2->set_medium_alias( "GroundFarlic") :),
        (: $2->add_eat_effect("/std/effects/ingested/garlic_breath", 200) :).
        (: $2->set_decay_speed(0) :),
        (: $2->set_weight_unit( ({ 200, 1 }) ) :)
   })


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/state_change/burn.dat ===
## Water just burns off ##

::item "burn:Water"::
::->result:: "/obj/reagents/water.ob"
::->factor:: 1.0
::->func:: ({})

## Achorion purple poison ##

::item "burn:UnheatedAchorionPurple"::
::->factor:: 1.0
::->result:: "/obj/reagents/blackened_mess.ob"
::->func:: ({ (: $2->add_eat_effect( "/std/effects/ingested/poison", 400 ) :) })

::item "burn:UndistilledAchorionPurple"::
::->factor:: 1.0
::->result:: "/obj/reagents/blackened_mess.ob"
::->func:: ({ (: $2->add_eat_effect( "/std/effects/ingested/poison", 400 ) :) })

## Angry poison ##

::item "burn:UndistilledFightClubPoison"::
::->factor:: 1.0
::->result:: "/obj/reagents/blackened_mess.ob"
::->func:: ({ (: $2->add_eat_effect( "/std/effects/ingested/poison", 400 ) :) })

## Hallucinogen poison ##

::item "burn:UndistilledHallucinogenPoison"::
::->factor:: 1.0
::->result:: "/obj/reagents/blackened_mess.ob"
::->func:: ({ (: $2->add_eat_effect( "/std/effects/ingested/poison", 400 ) :) })

## Spider poison ##

::item "burn:UndistilledSpiderPoison"::
::->factor:: 1.0
::->result:: "/obj/reagents/blackened_mess.ob"
::->func:: ({ (: $2->add_eat_effect( "/std/effects/ingested/poison", 400 ) :) })

## Bloat poison ##

::item "burn:UndistilledBlowfishPoison"::
::->factor:: 1.0
::->result:: "/obj/reagents/blackened_mess.ob"
::->func:: ({ (: $2->add_eat_effect( "/std/effects/ingested/poison", 400 ) :) })

## Weak con poison ##

::item "burn:UnheatedWeakConPoison"::
::->factor:: 1.0
::->result:: "/obj/reagents/blackened_mess.ob"
::->func:: ({ (: $2->add_eat_effect( "/std/effects/ingested/poison", 400 ) :) })

## Con poison ##

::item "burn:UnheatedConPoison"::
::->factor:: 1.0
::->result:: "/obj/reagents/blackened_mess.ob"
::->func:: ({ (: $2->add_eat_effect( "/std/effects/ingested/poison", 400 ) :) })

## Confuse poison ##

::item "burn:UnheatedConfusePoison"::
::->factor:: 1.0
::->result:: "/obj/reagents/blackened_mess.ob"
::->func:: ({ (: $2->add_eat_effect( "/std/effects/ingested/poison", 400 ) :) })


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/state_change/base.hdr ===
# $Locker:  $
# 
# $Id: base.hdr,v 1.1 1998/08/27 21:26:50 jeremy Exp $
#
# $Log: base.hdr,v $
# Revision 1.1  1998/08/27 21:26:50  jeremy
# Initial revision
#
#
::#include:: <state_change.h>

::Data:: mapping of class state_change


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/state_change/stir.dat ===
# This is used with the owl feather from Scrogden
::item "featherstir:SageTea"::
::->result:: "/obj/reagents/intelligence_tea.ob"
::->factor:: 0.8
::->func:: ({
    (: $2->add_eat_effect( "/std/effects/ingested/int_bonus" ) :)
  })


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/state_change/thresh.dat ===

::item "thresh:Wheat"::
::->result:: "/obj/food/grains/wheat_berry.food"
::->factor:: 8
::->func:: ({ })


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/state_change/distill.dat ===
## Water just boils off ##
::item "distill:Water"::
::->result:: "/obj/reagents/water.ob"
::->factor:: 1.0
::->func:: ({})

## Achorion purple ##
::item "distill:UndistilledAchorionPurple"::
::->result:: "/obj/reagents/achorion_purple.ob"
::->factor:: 0.01
::->func:: ({ (: $2->add_eat_effect( "/std/effects/poisons/hp_new",
    to_int( $3->query_skill_bonus( "covert.items.poisons" ) ) ) :) })

## Unheated Achorion purple ##
::item "distill:UnheatedAchorionPurple"::
::->result:: "/obj/reagents/achorion_purple.ob"
::->factor:: 0.01
::->func:: ({ (: $2->add_eat_effect( "/std/effects/poisons/hp_new",
    to_int( $3->query_skill_bonus( "covert.items.poisons" ) / 5 ) ) :) })

## Fight Club Poison ##
::item "distill:UndistilledFightClubPoison"::
::->result:: "/obj/reagents/angry_poison.ob"
::->factor:: 0.01
::->func:: ({ (: $2->add_eat_effect( "/std/effects/poisons/angry",
    to_int( $3->query_skill_bonus( "covert.items.poisons" ) ) ) :) })

## Hallucinogen Poison ##
::item "distill:UndistilledHallucinogenPoison"::
::->result:: "/obj/reagents/hallucinogen_poison.ob"
::->factor:: 0.01
::->func:: ({ (: $2->add_eat_effect( "/std/effects/ingested/hallucination",
    to_int( $3->query_skill_bonus( "covert.items.poisons" ) * 10 ) ) :) })

## Spider poison ##

::item "distill:UndistilledSpiderPoison"::
::->result:: "/obj/reagents/spider_poison.ob"
::->factor:: 0.5
::->func:: ({ (: $2->add_eat_effect( "/std/effects/poisons/spider_venom",
    to_int( $3->query_skill_bonus( "covert.items.poisons" ) * 10 ) ) :) })

## Blowfish poison ##

::item "distill:UndistilledBlowfishPoison"::
::->result:: "/obj/reagents/bloat.ob"
::->factor:: 0.5
::->func:: ({ (: $2->add_eat_effect( "/std/effects/poisons/bloat",
    to_int( $3->query_skill_bonus( "covert.items.poisons" ) * 1.5 ) ) :) })

## Snake poison ##

::item "distill:UndistilledSnakePoison"::
::->result:: "/obj/reagents/generic_liquid.ob"
::->factor:: 1.0
::->func:: ({
      (: $2->set_name( "snake_poison" ) :),
      (: $2->set_short( "thick white liquid" ) :),
      (: $2->add_adjective( ({ "thick", "white", "liquid" }) ) :),
      (: $2->set_long( "This is $amount_size$ of some thick white liquid.\n" ) :),
      (: $2->set_medium_alias( "DistilledSnakePoison" ) :),
    })


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/state_change/shake.dat ===
::item "shake:UnshakenBrandyAlexander"::
::->result:: "/obj/reagents/generic_liquid.ob"
::->factor::1.0
::->func:: ({
   (: $2->set_name("alexander") :),
   (: $2->set_short("brandy Alexander") :),
   (: $2->add_adjective( "brandy" ) :),
   (: $2->add_alias( ({ "brandy", "cocktail" }) ) :),
   (: $2->set_long("A creamy brandy Alexander cocktail, full "
             "of brandy, cream and chocolate liqueur goodness.  "
             "It looks perfect.\n") :),
   (: $2->add_eat_effect( "/std/effects/ingested/drunk", 800 ) :),
   (: $2->set_medium_alias( "BrandyAlexander" ) :)
})

::item "shake:UnshakenCosmopilitian"::
::->result:: "/obj/reagents/generic_liquid.ob"
::->factor:: 1.0
::->func:: ({
   (: $2->set_name( "cosmopilitian" ) :),
   (: $2->set_short( "Cosmopilitian" ) :),
   (: $2->add_alias( "cocktail" ) :),
   (: $2->set_long( "The perfect Cosmopilitian cocktail.  For "
             "is it not written, \"Things always look better "
             "through the bottom of an empty glass.\"?\n" ) :),
   (: $2->add_eat_effect( "/std/effects/ingested/drunk", 800 ) :),
   (: $2->set_medium_alias( "Cosmopilitian" ) :),
})

::item "shake:UnshakenMorporkian"::
::->result:: "/obj/reagents/generic_liquid.ob"
::->factor:: 1.0
::->func:: ({
   (: $2->set_name( "morporkian" ) :),
   (: $2->set_short( "Morporkian" ) :),
   (: $2->add_alias( "cocktail" ) :),
   (: $2->set_long( "The perfect Morporkian, in drink form.  "
             "This drink does not contain blood, vomit or "
             "sharp knives.\n" ) :),
   (: $2->add_eat_effect( "/std/effects/ingested/drunk", 800 ) :),
   (: $2->set_medium_alias( "Morporkian" ) :),
})

::item "shake:UnshakenSideCarriage"::
::->result:: "/obj/reagents/generic_liquid.ob"
::->factor:: 1.0
::->func:: ({
   (: $2->set_name( "carriage" ) :),
   (: $2->set_short( "Sidecarriage" ) :),
   (: $2->add_alias( "cocktail" ) :),
   (: $2->add_adjective( "side" ) :),
   (: $2->set_long( "A Sidecarriage cocktail, just "
             "the drink for a smooth ride.\n" ) :),
   (: $2->add_eat_effect( "/std/effects/ingested/drunk", 800 ) :),
   (: $2->set_medium_alias( "SideCarriage" ) :),
})

::item "shake:UnshakenBananaDaiquiri"::
::->result:: "/obj/reagents/generic_liquid.ob"
::->factor:: 1.0
::->func:: ({
   (: $2->set_name( "daiquiri" ) :),
   (: $2->set_short( "Bananana Daiquiri" ) :),
   (: $2->add_alias( "cocktail" ) :),
   (: $2->add_adjective( "bananana" ) :),
   (: $2->set_long( "Mmm, full of mon... ape-y goodness.\n" ) :),
   (: $2->add_eat_effect( "/std/effects/ingested/drunk", 800 ) :),
   (: $2->set_medium_alias( "BananaDaiquiri" ) :),
})

::item "shake:UnshakenShadyLady"::
::->result:: "/obj/reagents/generic_liquid.ob"
::->factor:: 1.0
::->func:: ({
   (: $2->set_name( "lady" ) :),
   (: $2->set_short( "Shady Lady" ) :),
   (: $2->add_alias( "cocktail" ) :),
   (: $2->add_adjective( "shady" ) :),
   (: $2->set_long( "An Shady Lady.  For some reason, this "
                  "cocktail seems a little... distasteful, even though "
                  "it smells delicious.\n" ) :),
   (: $2->add_eat_effect( "/std/effects/ingested/drunk", 800 ) :),
   (: $2->set_medium_alias( "ShadyLady" ) :),
})

::item "shake:UnshakenWellGreasedDwarf"::
::->result:: "/obj/reagents/generic_liquid.ob"
::->factor:: 1.0
::->func:: ({
   (: $2->set_name( "dwarf" ) :),
   (: $2->set_short( "Well Greased Dwarf" ) :),
   (: $2->add_alias( "cocktail" ) :),
   (: $2->add_adjective( ({ "well", "greased" }) ) :),
   (: $2->set_long( "An Well Greased Dwarf.  The cocktail "
                  "seems short, dark and likely to put you in a vile "
                  "temper.\n" ) :),
   (: $2->add_eat_effect( "/std/effects/ingested/drunk", 800 ) :),
   (: $2->set_medium_alias( "WellGreasedDwarf" ) :),
})
 


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/state_change/smelt.dat ===
::item "smelt:RedHotRawIronOre"::
::->result:: "/obj/reagents/generic_ore.ob"
::->factor:: 0.75
::->func:: ({
        (: $2->set_name("ore") :),
        (: $2->set_short("refined iron ore") :),
        (: $2->add_adjective(({"refined", "iron"})) :),
        (: $2->set_long("This is $pile_size$ of refined iron ore, "
                        "$amount_size$.\n" ) :),
        (: $2->set_material("refined iron ore") :),
        (: $2->set_material("refined iron ore") :),
        (: $2->set_medium_alias("RefinedIronOre") :)
    })

::item "smelt:RedHotRefinedIronOre"::
::->result:: "/obj/reagents/generic_ore.ob"
::->factor:: 0.75
::->func:: ({
        (: $2->set_name("bloom") :),
        (: $2->set_short("pig of iron bloom") :),
        (: $2->add_adjective(({"pig", "of", "iron"})) :),
        (: $2->add_property("determinate", "a ") :),
        (: $2->add_alias("pig") :),
        (: $2->add_alias("iron") :),
        (: $2->set_material("iron bloom") :),
        (: $2->set_long("This is a lump of crude iron.\n") :),
        (: $2->set_medium_alias("IronBloom") :),
        (: $2->reset_continuous() :)
    })

::item "hammer:RedHotIronBloom"::
::->result:: "/obj/reagents/generic_ore.ob"
::->factor:: 0.5
::->func:: ({
        (: $2->set_name("ingot") :),
        (: $2->set_short("wrought iron ingot") :),
        (: $2->add_adjective(({"wrought", "iron"})) :),
        (: $2->add_property("determinate", "a ") :),
        (: $2->add_alias("iron") :),
        (: $2->set_material("wrought iron") :),
        (: $2->set_long("This is an ingot of wrought iron.\n") :),
        (: $2->set_medium_alias("WroughtIron") :),
        (: $2->reset_continuous() :)
    })


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/state_change/juice.dat ===
# $Locker:  $
# 
# $Id: juice.dat,v 1.3 2003/03/25 19:13:24 wenda Exp $
#
# $Log: juice.dat,v $
# Revision 1.3  2003/03/25 19:13:24  wenda
# Forcibly released due to inactivity
#
# Revision 1.2  1999/10/24 12:04:54  taffyd
# Added juicable jelly oranges. :P
#
# Revision 1.1  1998/08/27 21:28:18  jeremy
# Initial revision
#
#
::item "juice:snake left eye"::
::->result:: "/obj/reagents/generic_liquid.ob"
::->factor::0.5
::->func:: ({
  (: $2->set_name("liquid") :),
  (: $2->set_short("cloudy yellowish liquid") :),
  (: $2->set_long("This is a cloudy, yellowish liquid, with faint "
      "traces of red swirls.\n") :),
  (: $2->add_adjective(({ "cloudy", "yellowish", "yellow" })) :)
})
::item "juice:JellyOrange"::
::->result:: "/obj/reagents/generic_liquid.ob"
::->factor:: 0.5
::->func:: ({
  (: $2->set_name( "juice" ) :),
  (: $2->set_short( "jelly orange juice" ) :),
  (: $2->add_adjective( ({ "jelly", "orange" }) ) :),
  (: $2->set_long( "This is a delicious looking juice that "
      "appears to have been made from juicing up a jelly orange.\n" ) :),
  (: $2->set_medium_alias( "JellyOrangeJuice" ) :),
})

::item "juice:Apple"::
::->result:: "/obj/reagents/generic_liquid.ob"
::->factor:: 1.0
::->func:: ({
  (: $2->set_name( "juice" ) :),
  (: $2->set_short( "apple juice" ) :),
        (: $2->set_main_plural( "apple juices" ) :),
        (: $2->add_plural( "juices" ) :),
  (: $2->add_adjective( "apple" ) :),
  (: $2->set_long( "This is some transparent golden-brown "
                  "juice made from apples, "
                  "$amount_size$.\n" ) :),
  (: $2->set_medium_alias( "AppleJuice" ) :),
})

::item "juice:LancreBlackheart"::
::->result:: "/obj/reagents/generic_liquid.ob"
::->factor:: 1.0
::->func:: ({
        (: $2->set_name( "blackheart_juice" ) :),
        (: $2->set_short( "apple juice" ) :),
        (: $2->set_main_plural( "apple juices" ) :),
        (: $2->add_plural( "juices" ) :),
        (: $2->add_alias( "juice" ) :),
        (: $2->add_adjective( "apple" ) :),
        (: $2->set_long( "This is some dark, treacly, "
                        "sweet-smelling apple juice, "
                        "$amount_size$.\n" ) :),
        (: $2->set_medium_alias( "BlackheartJuice" ) :),
})

::item "juice:GoldenDisagreeable"::
::->result:: "/obj/reagents/generic_liquid.ob"
::->factor:: 1.0
::->func:: ({
        (: $2->set_name( "disagreeable_juice" ) :),
        (: $2->set_short( "apple juice" ) :),
        (: $2->set_main_plural( "apple juices" ) :),
        (: $2->add_plural( "juices" ) :),
        (: $2->add_alias( "juice" ) :),
        (: $2->add_adjective( "apple" ) :),
        (: $2->set_long( "This is some thin and watery "
                        "sour-smelling apple juice, "
                        "$amount_size$.\n" ) :),
        (: $2->set_medium_alias( "DisagreeableJuice" ) :),
})

::item "juice:GreenBillet"::
::->result:: "/obj/reagents/generic_liquid.ob"
::->factor:: 1.0
::->func:: ({
        (: $2->set_name( "billet_juice" ) :),
        (: $2->set_short( "apple juice" ) :),
        (: $2->set_main_plural( "apple juices" ) :),
        (: $2->add_plural( "juices" ) :),
        (: $2->add_alias( "juice" ) :),
        (: $2->add_adjective( "apple" ) :),
        (: $2->set_long( "This is some evil coloured, "
                        "bitter-smelling apple juice, "
                        "$amount_size$.\n" ) :),
        (: $2->set_medium_alias( "BilletJuice" ) :),
        (: $2->add_eat_effect( "/std/effects/ingested/nausea", 50 ) :),
})


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/state_change/pulverise.dat ===

::item "pulverise:Venom"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 50.0
::->func:: ({
      (: $2->set_name( "venom" ) :),
      (: $2->set_short( "yellow powder" ) :),
      (: $2->add_alias( "powder" ) :),
      (: $2->add_adjective( "yellow" ) :),
      (: $2->set_long( "This is some yellow powder.\n" ) :),
      (: $2->set_medium_alias( "PoisonVenom" ) :),
      (: $2->add_eat_effect("/std/effects/ingested/cum_poison", 16) :),
      (: $2->add_eat_effect("/std/effects/ingested/basic_healing", 4) :),
      (: $2->set_decay_speed( 0 ) :)
   })
   

::item "pulverise:Catalyst"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 50.0
::->func:: ({
        (: $2->set_name("Catalyst") :),
        (: $2->set_short("white powder") :),
        (: $2->add_alias("powder") :),
        (: $2->add_adjective("white") :),
        (: $2->set_long("This is some white powder.\n") :),
        (: $2->set_medium_alias("PoisonCatalyst") :),
        (: $2->add_eat_effect("/std/effects/ingested/cum_poison", 12) :),
        (: $2->add_eat_effect("/std/effects/ingested/basic_healing", 2) :),
        (: $2->set_decay_speed(0) :)
    })

   
::item "pulverise:Fang"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 50.0
::->func:: ({
        (: $2->set_name("fang") :),
        (: $2->set_short("black powder") :),
        (: $2->add_alias("powder") :),
        (: $2->add_adjective("black") :),
        (: $2->set_long("This is some black powder.\n") :),
        (: $2->set_medium_alias("PoisonFang") :),
        (: $2->set_decay_speed(0) :)
    })

::item "pulverise:Leaf"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 50.0
::->func:: ({
        (: $2->set_name("leaf") :),
        (: $2->set_short("green powder") :),
        (: $2->add_alias("powder") :),
        (: $2->add_adjective("green") :),
        (: $2->set_long("This is some green powder.\n") :),
        (: $2->set_medium_alias("PoisonLeaf") :),
        (: $2->set_decay_speed(0) :)
    })


::item "pulverise:SulphurBlock"::
::->result:: "/obj/reagents/sulphur_powder.ob"
::->factor:: 10.0
::->func:: ({})


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/state_change/press.dat ===
## Spider poison gland ##

::item "press:PoisonGlandOfSpider"::
::->result:: "/obj/reagents/generic_liquid.ob"
::->factor:: 0.1
::->func:: ({
      (: $2->set_name( "spider_poison" ) :),
      (: $2->set_short( "pale red liquid" ) :),
      (: $2->add_adjective( ({ "pale", "red", "liquid" }) ) :),
      (: $2->set_long( "This is $amount_size$ of some pale red liquid.\n" ) :),
      (: $2->set_medium_alias( "UndistilledSpiderPoison" ) :),
      (: $2->add_eat_effect( "/std/effects/poisons/spider_venom",
        to_int( $3->query_skill_bonus( "covert.items.poisons" ) / 10 ) ) :),
    })

## Blowfish poison sac ##

::item "press:PoisonSacOfBlowfish"::
::->result:: "/obj/reagents/generic_liquid.ob"
::->factor:: 0.1
::->func:: ({
      (: $2->set_name( "blowfish_poison" ) :),
      (: $2->set_short( "pale brown liquid" ) :),
      (: $2->add_adjective( ({ "pale", "brown", "liquid" }) ) :),
      (: $2->set_long( "This is $amount_size$ of some pale brown liquid.\n" ) :),
      (: $2->set_medium_alias( "UndistilledBlowfishPoison" ) :),
      (: $2->add_eat_effect( "/std/effects/poisons/bloat",
        to_int( $3->query_skill_bonus( "covert.items.poisons" ) / 10 ) ) :),
    })

## Snake poison sac ##

::item "press:PoisonSacOfSnake"::
::->result:: "/obj/reagents/generic_liquid.ob"
::->factor:: 0.1
::->func:: ({
      (: $2->set_name( "snake_poison" ) :),
      (: $2->set_short( "thin white liquid" ) :),
      (: $2->add_adjective( ({ "thin", "white", "liquid" }) ) :),
      (: $2->set_long( "This is $amount_size$ of some thin white liquid.\n" ) :),
      (: $2->set_medium_alias( "UndistilledSnakePoison" ) :),
      (: $2->add_eat_effect( "/std/effects/ingested/poison",
        to_int( $3->query_skill_bonus( "covert.items.poisons" ) ) ) :),
    })



=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/state_change/slice.dat ===
::item "slice:Carrot"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 1.0
::->func:: ({
      (: $2->set_name( "carrot" ) :),
      (: $2->set_short( "sliced carrot" ) :),
      (: $2->add_adjective( "sliced" ) :),
      (: $2->set_long( "This is some sliced carrots, little "
            "orange rings around lighter orange circles.\n" ) :),
      (: $2->set_medium_alias( "SlicedCarrot" ) :),
      (: $2->set_decay_speed( 0 ) :)
   })
   
::item "slice:Cabbage"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 1.0
::->func:: ({
        (: $2->set_name("cabbage") :),
        (: $2->set_short("shredded cabbage") :),
        (: $2->add_adjective("shredded") :),
        (: $2->set_long("This is some shredded cabbage.  "
             "Hopefully, not a sentinent one.\n") :),
        (: $2->set_medium_alias("GroundCabbage") :),
        (: $2->set_decay_speed(0) :)
    })


::item "slice:Rhubarb"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 1.0
::->func:: ({
      (: $2->set_name( "rhubarb" ) :),
      (: $2->set_short( "sliced rhubarb" ) :),
      (: $2->add_adjective( "sliced" ) :),
      (: $2->set_long( "This is some sliced rhubarb, sweet little chunks "
          "perfect for a nice pie.\n" ) :),
      (: $2->set_medium_alias( "SlicedRhubarb" ) :),
      (: $2->set_decay_speed( 0 ) :)
   })

::item "slice:Onion"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 1.0
::->func:: ({
      (: $2->set_name( "onion" ) :),
      (: $2->set_short( "sliced onion" ) :),
      (: $2->add_adjective( "sliced" ) :),
      (: $2->set_long( "This is some finely sliced onions.  How very sad...  "
             "could make a bloke break down and sob...\n" ) :),
      (: $2->set_medium_alias( "SlicedOnion" ) :),
      (: $2->set_decay_speed( 0 ) :)
   })

::item "slice:Parsnip"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 1.0
::->func:: ({
      (: $2->set_name( "parsnip" ) :),
      (: $2->set_short( "sliced parsnip" ) :),
      (: $2->add_adjective( "sliced" ) :),
      (: $2->set_long( "This is some parsnip slices, white and hot.\n" ) :),
      (: $2->set_medium_alias( "SlicedParsnip" ) :),
      (: $2->set_decay_speed( 0 ) :)
   })

::item "slice:Tomato"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 1.0
::->func:: ({
      (: $2->set_name( "tomato" ) :),
      (: $2->set_short( "sliced tomato" ) :),
      (: $2->add_adjective( "sliced" ) :),
      (: $2->set_long( "This is some sliced tomato, perfect for a sandwich, "
          "but needing more slicing for other purposes.\n" ) :),
      (: $2->set_medium_alias( "SlicedTomato" ) :),
      (: $2->set_decay_speed( 0 ) :)
   })

::item "slice:SlicedTomato"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 1.0
::->func:: ({
      (: $2->set_name( "tomato" ) :),
      (: $2->set_short( "chopped tomato" ) :),
      (: $2->add_adjective( "chopped" ) :),
      (: $2->set_long( "This is some chopped tomato, suitable for cooking.\n" ) :),
      (: $2->set_medium_alias( "ChoppedTomato" ) :),
      (: $2->set_decay_speed( 0 ) :)
   })

::item "slice:PeeledPotato"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 1.0
::->func:: ({
      (: $2->set_name( "potato" ) :),
      (: $2->set_short( "potato chunks" ) :),
      (: $2->add_alias(({"potato chunks", "potato chunk", "chunk", "chunks"})) :),
      (: $2->set_long( "These are some potato chunks.  They could do with "
          "some cooking ere they are eaten.\n" ) :),
      (: $2->set_medium_alias( "PotatoChunks" ) :),
      (: $2->set_decay_speed( 0 ) :)
   })

::item "slice:Celery"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 1.0
::->func:: ({
      (: $2->set_name( "celery" ) :),
      (: $2->set_short( "sliced celery" ) :),
      (: $2->add_adjective( "sliced" ) :),
      (: $2->set_long( "This is some sliced celery, perfect for a nice "
          "soup or stew.\n" ) :),
      (: $2->set_medium_alias( "SlicedCelery" ) :),
      (: $2->set_decay_speed( 0 ) :)
   })

::item "slice:Radish"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 1.0
::->func:: ({
      (: $2->set_name( "radish" ) :),
      (: $2->set_short( "sliced radish" ) :),
      (: $2->add_adjective( "sliced" ) :),
      (: $2->set_long( "This is some sliced radish, the decorative vegetable.\n" ) :),
      (: $2->set_medium_alias( "SlicedRadish" ) :),
      (: $2->set_decay_speed( 0 ) :)
   })
::item "slice:Cucumber"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 1.0
::->func:: ({
      (: $2->set_name( "cucumber" ) :),
      (: $2->set_short( "cucumber slices" ) :),
      (: $2->add_alias(({"cucumber slices", "cucumber slice", "slice", "slices"})) :),
      (: $2->add_adjective( "sliced" ) :),
      (: $2->set_long( "These are the remains of a once mighty cucumber, now sliced.  "
          "Tis a great pity.\n" ) :),
      (: $2->set_medium_alias( "SlicedCucumber" ) :),
      (: $2->set_decay_speed( 0 ) :)
   })
::item "slice:Apple"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 1.0
::->func:: ({
      (: $2->set_name( "apple" ) :),
      (: $2->set_short( "sliced apple" ) :),
      (: $2->add_adjective( "sliced" ) :),
      (: $2->set_long( "This is some sliced apple, sweet and delicious.\n" ) :),
      (: $2->set_medium_alias( "SlicedApple" ) :),
      (: $2->set_decay_speed( 0 ) :)
   })
::item "slice:Banana"::
::->result:: "/obj/reagents/generic_solid.ob"
::->factor:: 1.0
::->func:: ({
      (: $2->set_name( "banana" ) :),
      (: $2->set_short( "sliced banana" ) :),
      (: $2->add_adjective( "sliced" ) :),
      (: $2->set_long( "This is some sliced banana.  It would go "
           "down a treat on buttered toast.\n" ) :),
      (: $2->set_medium_alias( "SlicedBanana" ) :),
      (: $2->set_decay_speed( 0 ) :)
   })








