
=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/handlers/autodoc/autodoc_html.c ===
#include <autodoc.h>
#include <config.h>
private string query_func_def(mixed *stuff, string func);
private string query_methods(string *funcs, function data,
                           int prot);
private string query_method_description(mapping docs);
private string create_href(string str);
private string query_method_summary(string *funcs, object file);
private string query_defines(string *defs, mapping docs);
private string query_class_summary(mapping classes);
private string query_classes(mapping classes);
private string query_class_def(mixed *stuff, string name);
private string query_class_description(mapping docs);
void create() {
   seteuid(getuid());
}
void create_html_file(object file, string output) {
   int i;
   mapping stuff;
   string *pub_funcs;
   string *pro_funcs;
   string *defs;
   string *bits;
   string name;
   string bing;
   bits = explode(file->query_file_name(), "/");
   name = bits[sizeof(bits)-1];
   bing = "<html><head><title>";
   bing += "File " + name +
           "\n</title></head><body bgcolor=\"#ffffff\" TEXT=\"#000030\" LINK=\"#4a529c\" VLINK=\"#b57339\">";
   bing += "[ <a href=\"index.html\">Package Index</a></code> | ";
   bing += "<a href=\"index_std.html\">Mudlib Index</a></code> | ";
   bing += "<a href=\"index_eff.html\">Effect Index</a></code> ]<br>";
   stuff = file->query_main_docs();
   if (stuff["main"]) {
      bing += "<h2>File " + file->query_file_name() +
                         "</h2>";
      bing += implode(stuff["main"], " ");
      if (stuff["see"]) {
         bing += "<p><b>See also:</b><br>" +
                            query_multiple_short(
                            map(stuff["see"], (: create_href($1) :)));
      }
      if (stuff["author"]) {
         bing += "<p>Written by " +
                    query_multiple_short(stuff["author"]);
      }
      if (stuff["started"]) {
         bing += "<p>Started " +
                    query_multiple_short(stuff["started"]);
      }
      if (stuff["example"]) {
         if (sizeof(stuff["example"]) > 1) {
            for (i = 0; i < sizeof(stuff["example"]); i++) {
               bing += "<h3>Example " + (i + 1) + "</h3>\n";
               bing += "<pre>"+stuff["example"][i]+"</pre>\n";
            }
         } else {
            bing +=  "<h3>Example</h3>\n<pre>" + stuff["example"][0] +
                             "</pre>\n";
         }
      }
      if (stuff["changed"]) {
         bing += "<h3>Change history</h3>\n<dl>" +
                            implode(map(stuff["changed"], function (string str) {
                   string start;
                   string rest;
                   if (sscanf(str, "%s\n%s", start, rest) == 2) {
                      return "<dt>" + start + "<dd>" + rest;
                   }
                   return "<dd>" + str;
             } ), "\n") + "</dl>\n";
      }
   }
   if (sizeof(file->query_inherits())) {
      bing += "<hr><h2>Inherits</h2>\n";
      bing += "This class inherits the following classes " +
                         query_multiple_short(
               map(keys(file->query_inherits()), (: create_href :)));
   }
   if (sizeof(file->query_includes())) {
      bing += "<hr><h2>Includes</h2>\n";
      bing += "This class includes the following files " +
                         query_multiple_short(
               map(file->query_includes(), (: create_href :)));
   }
   if (sizeof(file->query_class_docs())) {
       bing += query_class_summary(file->query_class_docs());
   }
   pub_funcs = keys(file->query_public_functions());
   pro_funcs = keys(file->query_protected_functions());
   bing += query_method_summary(pub_funcs + pro_funcs, file);
   if (sizeof(pub_funcs)) {
      bing += "<hr><h2>Public Functions</h2>\n";
      bing += "These are functions that everyone can "
                         "access.<p><dl>\n.";
      bing += query_methods(pub_funcs, (: $(file)->query_public_functions()[$1] :),
                    0);
      bing += "</dl>\n";
   }
   if (sizeof(pro_funcs)) {
      bing += "<hr><h2>Protected Functions</h2>\n";
      bing += "These are functions that only "
                         "objects inheriting the class can access.<p>\n";
      bing += query_methods(pro_funcs, (: $(file)->query_protected_functions()[$1] :),
                    1);
      bing +=  "\n";
   }
   if (sscanf(name, "%*s.h") == 1 &&
       sizeof(file->query_define_docs())) {
      defs = sort_array(keys(file->query_define_docs()),
                        (: strcasecmp($1, $2) :));
      bing +=  "<hr><h2>Defines</h2>\n";
      query_defines(defs, file->query_define_docs());
      bing = "";
   }
   if (sizeof(file->query_class_docs())) {
      bing += "<hr><h2>Classes</h2>\n";
      bing += "These are nice data types for dealing with...  Data!"
                         "<p>\n";
      bing += query_classes(file->query_class_docs());
   }
   write_file(output, bing, 1);
   bing = "/www/footer"->www_function(output);
   write_file(output, bing + "</body></html>");
}
void create_html_index_file(string *index, string letter, string output) {
   int i;
   string name;
   string bing;
   bing = "<html><head><title>\nIndex of " + letter +
                      "\n</title></head><body bgcolor=\"#ffffff\" TEXT=\"#000030\" LINK=\"#4a529c\" VLINK=\"#b57339\">\n";
   bing += "<img align=left src=\"" + CONFIG_EXTERNAL_WEB_ADDRESS +
                       "pics/dw4.gif\">\n"
                      "<p align=right><code><a href=\"index.html\">"
                      "Main Index</a></code></p>\n"
                      "<h2>Index of " + letter + "</h2>\n"
                      "<h3><i>Letters can change the world, remove the l "
                      "from world and you have word</i></h3>\n"
                      "<br clear=both>\n"
                      "<hr><dl>\n";
   index = sort_array(index, (: strcasecmp($1[0], $2[0]) ? strcasecmp($1[0], $2[0]) :
                                        strcasecmp($1[1], $2[1]) :) );
   for (i = 0; i < sizeof(index); i++) {
      name = replace(index[i][AUTO_INDEX_FILE_NAME], "/", ".");
      if (name[0] == '.') {
         name = name[1..];
      }
      if (sscanf(index[i][AUTO_INDEX_NAME], "%*s.%*s") == 2) {
         bing += "<dt><img src=\"images/magenta-ball-small.gif\" "
                            "height=6 width=6 alt=\" . \"><b><a href=\"" +
                            name + ".html\">" + index[i][AUTO_INDEX_NAME] +
                            "</a></b>.\n";
      } else {
         bing += "<dt><img src=\"images/magenta-ball-small.gif\" "
                            "height=6 width=6 alt=\" . \"><b><a href=\"" +
                            name + ".html#" + index[i][AUTO_INDEX_NAME] +
                            "\">" + index[i][AUTO_INDEX_NAME] + "</a></b>" +
                            index[i][AUTO_INDEX_ARGS] +
                            "; <a href=\"" + name + ".html\">" +
                            index[i][AUTO_INDEX_FILE_NAME] + "</a>\n";
      }
      if (index[i][AUTO_INDEX_SUMMARY]) {
         bing += "<dd>"+index[i][AUTO_INDEX_SUMMARY]+"\n";
      }
      reset_eval_cost();
   }
   write_file(output, bing + "</dl>", 1);
   write_file(output, "/www/footer"->www_function(output) + "</body></html>");
}
private string bing_cre;
private string bing_eff;
private string bing_index;
void create_main_index(mapping chars, string output_dir) {
   int i;
   string output_index;
   string output_eff;
   string output_cre;
   string *files;
   mixed *stuff;
   string str;
   string fname;
   string *index;
   mapping summaries;
   function write_all;
   string bing_file;
   string fluff;
   summaries = AUTODOC_HANDLER->query_summary_map();
   output_index = output_dir + "index_std.html";
   output_eff = output_dir + "index_eff.html";
   output_cre = output_dir + "index_cre.html";
   bing_cre = "";
   bing_eff = "";
   bing_file = "";
   bing_index = "";
   rm (output_eff);
   rm (output_index);
   rm (output_cre);
   write_all = (: bing_eff += $1,
                  bing_cre += $1,
                  bing_index += $1 :);
   evaluate(write_all, "<html><head><title>\n");
   evaluate(write_all, "" + mud_name() + " autodoc index\n</title></head>\n"
                            "<body bgcolor=\"#ffffff\" TEXT=\"#000030\" "
                             "LINK=\"#4a529c\" VLINK=\"#b57339\">\n");
   bing_index += "<img align=left src=\"" + CONFIG_EXTERNAL_WEB_ADDRESS +
                      "/pics/dw4.gif\">\n"
                      "<h2>" + mud_name() + " Documentation</h2>\n"
                      "<h3><i>Where cabbages evaporate in the sun</i></h3>\n"
                      "<br clear=both>\n";
   bing_eff += "<img align=left src=\"" + CONFIG_EXTERNAL_WEB_ADDRESS +
                      "/pics/dw4.gif\">\n"
                      "<h2>" + mud_name() + " Effect Documentation</h2>\n"
                      "<h3><i>Where your consequences are vanquished</i></h3>\n"
                      "<br clear=both>\n";
   bing_cre += "<img align=left src=\"" + CONFIG_EXTERNAL_WEB_ADDRESS +
                      "pics/dw4.gif\">\n"
                      "<h2>" + mud_name() + " Creator Documentation</h2>\n"
                      "<h3><i>Blue fluff?  No red and scruffy!</i></h3>\n"
                      "<br clear=both>\n";
   evaluate(write_all, "<h2>Function index</h2>\n");
   files = AUTODOC_HANDLER->query_files();
   files = sort_array(files, (: strcasecmp :) );
   index = sort_array(keys(chars), (: strcasecmp :) );
   for (i = 0; i < sizeof(index); i++) {
      if (i > 0) {
         evaluate(write_all, ", ");
      }
      evaluate(write_all, "<a href=\"" + chars[index[i]] + "\">" + index[i] +
                         "</a>\n");
   }
   bing_index += ", <a href=\"index_eff.html\">Effects</a>";
   bing_index += ", <a href=\"index_cre.html\">Creator</a>";
   bing_eff += ", <a href=\"index.html\">Main</a>";
   bing_eff += ", <a href=\"index_cre.html\">Creator</a>";
   bing_cre += ", <a href=\"index.html\">Main</a>";
   bing_cre += ", <a href=\"index_eff.html\">Effects</a>";
   evaluate(write_all, "<hr><h2>Class index</h2>\n");
   evaluate(write_all, "<dl>\n");
   stuff = unique_array(files, (: $1[0..strsrch($1, "/", -1)] :));
   for (i = 0; i < sizeof(stuff); i++) {
      str = stuff[i][0][0..strsrch(stuff[i][0], "/", -1)];
      if (str[0..12] == "/std/effects/") {
         bing_eff += "<dt><img src=\"images/cyan-ball.gif\" height=12 "
                            "width=12><b><a href=\"#" + str + "\">"+
                            str + "</a></b>\n";
      } else if (str[0..2] == "/w/") {
         bing_cre += "<dt><img src=\"images/cyan-ball.gif\" "
                            "height=12 "
                            "width=12><b><a href=\"#" + str + "\">"+
                            str + "</a></b>\n";
      } else {
         bing_index += "<dt><img src=\"images/cyan-ball.gif\" height=12 "
                            "width=12><b><a href=\"#" + str + "\">"+
                            str + "</a></b>\n";
      }
   }
   evaluate(write_all, "</dl>\n");
   for (i = 0; i < sizeof(stuff); i++) {
      fluff = "";
      str = stuff[i][0][0..strsrch(stuff[i][0], "/", -1)];
      fluff += "<h2><a name=\"" + str + "\">" + str + "</a></h2>\n<dl>\n";
      reset_eval_cost();
      foreach (str in stuff[i]) {
         fname = replace(str, "/", ".")[1..];
         fluff += "<dt><img src=\"images/cyan-ball-small.gif\" "
                            "height=6 width=6><a href=\"" + fname + ".html\">" +
                            str[strsrch(str, "/", -1) + 1..] + "</a>\n";
         if (summaries[str]) {
            fluff += "<dd>" + summaries[str] + "\n";
         }
      }
      fluff += "</dl>\n";
      if (stuff[i][0][0..12] == "/std/effects/") {
         bing_eff += fluff;
      } else if (stuff[i][0][0..2] == "/w/") {
         bing_cre += fluff;
      } else {
         bing_index += fluff;
      }
   }
   write_file(output_eff, bing_eff, 1);
   write_file(output_eff,
              "/www/footer"->www_function(output_eff) + "</body></html");
   write_file(output_index, bing_index, 1);
   write_file(output_index,
              "/www/footer"->www_function(output_index) + "</body></html");
   write_file(output_cre, bing_cre, 1);
   write_file(output_cre,
              "/www/footer"->www_function(output_cre) + "</body></html");
}
private string query_classes(mapping classes) {
   string name;
   string *names;
   string bing;
   names = sort_array(keys(classes), (: strcasecmp :) );
   bing = "<dl>\n";
   foreach (name in names) {
      reset_eval_cost();
      bing += "<dt><a name=\"class_" + name + "\">\n";
      bing += "<img src=\"images/cyan-ball.gif\" width=12 "
                         "height=12 alt=\" * \">";
      bing += "<b>" + name +
              "</b></a><pre>\n" +
              query_class_def(classes[name], name) + "\n</pre>";
      if (classes[name][AUTO_CLASS_DOCS]["main"]) {
         bing += query_class_description(classes[name][AUTO_CLASS_DOCS]);
      }
      bing += "\n";
   }
   return bing + "</dl>\n";
}
private string query_methods(string *funcs, function data,
                           int prot) {
   int i;
   mixed *stuff;
   string bing;
   funcs = sort_array(funcs, (: strcasecmp($1, $2) :));
   bing = "";
   for (i = 0; i < sizeof(funcs); i++) {
      reset_eval_cost();
      stuff = evaluate(data, funcs[i]);
      bing += "<dt><a name=\"" + funcs[i] + "\">\n";
      if (prot) {
        bing += "<img src=\"images/magenta-ball.gif\" width=12 "
                           "height=12 alt=\" * \">";
      } else {
        bing += "<img src=\"images/cyan-ball.gif\" width=12 "
                           "height=12 alt=\" * \">";
      }
      bing += "<b>" + funcs[i] +
                         "</b></a><pre>\n" +
                         query_func_def(stuff, funcs[i]) +
                         "\n</pre>";
      if (stuff[AUTO_DOCS]["main"]) {
         bing += query_method_description(stuff[AUTO_DOCS]);
      }
      bing += "\n";
   }
   return bing;
}
private string query_func_def(mixed *stuff, string func) {
   string ret;
   int i;
   int pad;
   ret = implode(stuff[AUTO_TYPE], " ") + " " + func+"(";
   pad = strlen(ret);
   for (i = 0; i < sizeof(stuff[AUTO_ARGS]); i += 2) {
      if (i) {
         ret += sprintf(",\n%-"+pad+"s", "");
      }
      ret += implode(stuff[AUTO_ARGS][i + AUTO_ARGS_TYPE], " ") + " " +
             stuff[AUTO_ARGS][i + AUTO_ARGS_NAME];
   }
   ret += ")";
   return ret;
}
private string query_class_def(mixed *stuff, string name) {
   string ret;
   int pad;
   int i;
   ret = "class " + name + " {\n";
   pad = strlen(ret);
   for (i = 0; i < sizeof(stuff[AUTO_CLASS_MEMBERS]); i++) {
      ret += sprintf("%-" + pad + "s", "");
      ret += implode(stuff[AUTO_CLASS_MEMBERS][i][AUTO_CLASS_TYPE], " ") +
             " " + stuff[AUTO_CLASS_MEMBERS][i][AUTO_CLASS_NAME] + ";\n";
   }
   ret += "}\n";
   return ret;
}
private string query_method_description(mapping docs) {
   int i;
   string name;
   string desc;
   string bing;
   bing = "";
   if (docs["main"]) {
      bing += "<dd>" + implode(docs["main"], " ")
                         +"<p>\n";
   }
   if (docs["param"] || docs["return"] || docs["see"] || docs["example"]) {
      bing += "<dd><dl>\n";
   }
   if (docs["param"]) {
      bing += "<dt><b>Parameters:</b>\n";
      for (i = 0; i < sizeof(docs["param"]); i++) {
         if (sscanf(docs["param"][i], "%s %s", name, desc) == 2) {
            bing += "<dd>" + name + " - " + (desc) + "\n";
         }
      }
   }
   if (docs["return"]) {
      bing += "<dt><b>Returns:</b>\n<dd>" + implode(docs["return"], " ") +
                         "\n";
   }
   if (docs["see"]) {
      bing += "<dt><b>See also:</b>\n<dd>" +
                         query_multiple_short(
                         map(docs["see"], (: create_href($1) :)));
   }
   if (docs["example"]) {
      bing += "<dt><b>Example:</b>\n<dd><pre>" +
                 implode(docs["example"], "</pre><dd><pre>\n") +
                        "</pre>";
   }
   if (docs["param"] || docs["return"] || docs["see"] || docs["example"]) {
      bing += "</dl>\n";
   }
   return bing;
}
private string query_class_description(mapping docs) {
   int i;
   string name;
   string desc;
   string bing;
   bing = "";
   if (docs["main"]) {
      bing += "<dd>" + implode(docs["main"], " ")
                         +"<p>\n";
   }
   if (docs["member"] || docs["see"]) {
      bing += "<dl>\n";
   }
   if (docs["member"]) {
      bing += "<dt><b>Members:</b>\n";
      for (i = 0; i < sizeof(docs["member"]); i++) {
         if (sscanf(docs["member"][i], "%s %s", name, desc) == 2) {
            bing += "<dd>" + name + " - " +
                               (desc) + "\n";
         }
      }
   }
   if (docs["see"]) {
      bing += "<dt><b>See also:</b>\n<dd>" +
                         query_multiple_short(
                         map(docs["see"], (: create_href($1) :)));
   }
   if (docs["member"] || docs["see"]) {
      bing += "</dl>\n";
   }
   return bing;
}
private string create_href(string str) {
   string name;
   string ref_name;
   string func;
   if (sscanf(str, "%s#%s", name, func) == 2) {
      ref_name = replace(name, "/", ".");
      if (ref_name[0] == '.') {
         ref_name = ref_name[1..];
      }
      return "<a href=\"" + ref_name + ".c.html#" + func + "\">" +
             name + "->" + func + "()</a>";
   } else if (sscanf(str, "%s->%s", name, func) == 2) {
      sscanf(func, "%s(%*s)", func);
      ref_name = replace(name, "/", ".");
      if (ref_name[0] == '.') {
         ref_name = ref_name[1..];
      }
      return "<a href=\"" + ref_name + ".c.html#" + func + "\">" + str + "</a>";
   } else if (sscanf(str, "%s()", func) == 1) {
      return "<a href=\"#" + func + "\">" + str + "</a>";
   } else if (str[0..4] == "http:") {
      return "<a href=\"" + str + "\">" + str + "</a>";
   } else {
      ref_name = replace(str, "/", ".");
      if (ref_name[0] == '.') {
         ref_name = ref_name[1..];
      }
      if (sscanf(str, "%*s.%*s") != 2) {
         ref_name += ".c";
         str += ".c";
      }
      if (member_array(str, AUTODOC_HANDLER->query_files()) != -1) {
         return "<a href=\"" + ref_name + ".html\">" + str + "</a>";
      }
      return str;
   }
}
private string query_short_args_def(mixed *args) {
   string ret;
   int i;
   ret = "";
   for (i = 0; i < sizeof(args); i += 2) {
      if (i != 0) {
         ret += ", ";
      }
      ret += implode(args[i + AUTO_ARGS_TYPE], " ");
   }
   return "(" + ret + ")";
}
private string query_short_desc(mapping docs) {
   mixed main;
   int pos;
   int tmp_pos;
   main = docs["main"];
   if (!main) {
      return 0;
   }
   main = implode(main, " ");
   pos = strlen(main);
   tmp_pos = strsrch(main, ".");
   if (tmp_pos < pos && tmp_pos != -1) {
      pos = tmp_pos;
   }
   tmp_pos = strsrch(main, "?");
   if (tmp_pos < pos && tmp_pos != -1) {
      pos = tmp_pos;
   }
   tmp_pos = strsrch(main, "!");
   if (tmp_pos < pos && tmp_pos != -1) {
      pos = tmp_pos;
   }
   return main[0..pos];
}
private string query_class_summary(mapping classes) {
   string *names;
   string name;
   string short_desc;
   string bing;
   names = sort_array(keys(classes), (: strcasecmp :));
   bing = "<hr><h2>Class Index</h2>\n";
   bing += "<dl>";
   foreach (name in names) {
      bing += "<dt><img src=\"images/cyan-ball-small.gif\" "
                         "height=6 width=6 alt=\" o \">\n";
      bing += "<a href=\"#class_" + name + "\"><b>" + name +
                         "</b></a>\n";
      short_desc = query_short_desc(classes[name][AUTO_CLASS_DOCS]);
      if (short_desc) {
         bing += "<dd>" + short_desc + "\n";
      }
   }
   bing += "</dl>";
   return bing;
}
private string query_method_summary(string *funcs,
                                  object file) {
   int i;
   mixed *stuff;
   string short_desc;
   int prot;
   string bing;
   bing = "";
   if (sizeof(funcs)) {
      bing += "<hr><h2>Method index</h2>\n<dl>";
      funcs = sort_array(funcs, (: strcasecmp :) );
      for (i = 0; i < sizeof(funcs); i++) {
         if (file->query_public_functions()[funcs[i]]) {
            stuff = file->query_public_functions()[funcs[i]];
            prot = 0;
         } else if (file->query_protected_functions()[funcs[i]]) {
            stuff = file->query_protected_functions()[funcs[i]];
            prot = 1;
         }
         if (prot) {
           bing += "<dt><img src=\"images/magenta-ball-small.gif\" "
                              "height=6 width=6 alt=\" o \">\n";
         } else {
           bing += "<dt><img src=\"images/cyan-ball-small.gif\" "
                              "height=6 width=6 alt=\" o \">\n";
         }
         bing += "<a href=\"#" + funcs[i] + "\"><b>" + funcs[i] +
                            "</b></a>" + query_short_args_def(stuff[AUTO_ARGS])
;
         short_desc = query_short_desc(stuff[AUTO_DOCS]);
         if (short_desc) {
            bing += "<dd>" + short_desc + "\n";
         }
      }
      bing += "</dl>";
   }
   return bing;
}
private string query_defines(string *defs, mapping docs) {
   int i;
   string bing;
   bing = "";
   for (i = 0; i < sizeof(defs); i++) {
      bing +=  "<dt><a name=\"" + defs[i] + "\">\n";
      bing += "<img src=\"images/red-ball.gif\" width=12 "
                         "height=12 alt=\" * \"><b>" + defs[i] + "</b></a>\n";
      if (docs[defs[i]]["main"]) {
         bing += query_method_description(docs[defs[i]]);
      }
   }
   return bing;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/amulets/cat's_head.arm ===
::Name::"brooch"
::Short::"silver cat's head brooch"
::Adjective::({ "silver", "cat's", "head" })
::Long::"This is a shiny brooch of silver in the shape of a cat's head.  It
has bright green gems for eyes.\n"
::Property::"shop type","jewellers"
::Weight::2
::Enchant::1
::Value::2000
::Value Info::"enchantment", 1000
::Value Info::"magic", 8000
::Type::"badge"
::Setup::750
::Damage Chance::7
::Wear Effect::"/std/effects/attached/see_invisible"


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/rings/low_gp_ring.c ===
#define GP_AWARD 50
inherit "/obj/ring";
void setup() {
    set_name( "ring" );
    set_short( "pink crystal ring" );
    add_adjective( ({ "pink", "crystal" }) );
    set_main_plural( "pink crystal rings" );
    set_long( "The ring is a single piece of $material$, cut and polished "+
      "until its facets sparkle in the light.\n" );
    set_material( "rosy-quartz" );
    set_value( 250 );
    set_value_info( "artifact", 5000 );
    set_weight( 1 );
    set_enchant( 3 );
    add_property( "artifact form", ([
        "ring of energy" : 4
      ]) );
    adjust_charges( 1 + random( 11 ) );
    set_level( 25 );
    set_zapper( file_name( this_object() ) );
}
string query_ring_name() { return "ring of energy"; }
void zap( object dummy, object person, object ring ) {
    tell_object( person, "You feel slightly more powerful.\n" );
    if ( ( (string)person->query_gp() + GP_AWARD ) >
      (string)person->query_max_gp() ) {
        person->set_gp( person->query_max_gp() );
        return;
    }
    person->adjust_gp( GP_AWARD );
}
int failed_zap( object dummy, object person, object ring ) {
    tell_object( person, "You feel slightly less powerful.\n" );
    person->add_succeeded_mess( ring, "$N $V $D.\n", ({ }) );
    if ( person->query_gp() < ( GP_AWARD / 3 ) ) {
        person->set_gp( 0 );
        return 1;
    }
    person->adjust_gp( 0 - ( GP_AWARD / 3 ) );
    return 1;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/rings/invisibility.c ===
inherit "/obj/ring";
void setup() {
   set_name( "ring" );
   set_short( "clear crystal ring" );
   add_adjective( ({ "clear", "crystal" }) );
   set_main_plural( "clear crystal rings" );
   set_long( "The ring is made from a colourless stone that seems to refract "+
         "light in a strange way.  The outer edge has eight sides.\n" );
   set_material( "calcite" );
   set_value( 200 );
   set_value_info( "artifact", 5000 );
   set_weight( 1 );
   set_enchant( 2 );
   add_property( "no recycling", 1 );
   add_property( "fluff'n'stuff", 1 );
   add_property( "artifact form", ([
      "ring of invisibility" : 2
   ]) );
   adjust_charges( 1 + random( 7 ) );
   set_level( 60 );
   set_zapper( file_name( this_object() ) );
}
string query_ring_name() { return "ring of invisibility"; }
void zap( object dummy, object person, object ring ) {
   person->add_effect( "/std/effects/magic/invisibility",
         roll_MdN( 7, (int)ring->query_level() ) );
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/rings/high_gp_ring.c ===
#define GP_AWARD 250
inherit "/obj/ring";
void setup() {
    set_name( "ring" );
    set_short( "pink crystal ring" );
    add_adjective( ({ "pink", "crystal" }) );
    set_main_plural( "pink crystal rings" );
    set_long( "The ring is a single piece of $material$, cut and polished "+
      "until its facets sparkle in the light.\n" );
    set_material( "rosy-quartz" );
    set_value( 750 );
    set_value_info( "artifact", 15000 );
    set_weight( 1 );
    set_enchant( 5 );
    add_property( "artifact form", ([
        "ring of power" : 6
      ]) );
    adjust_charges( 1 + random( 11 ) );
    set_level( 75 );
    set_zapper( file_name( this_object() ) );
}
string query_ring_name() { return "ring of power"; }
void zap( object dummy, object person, object ring ) {
    tell_object( person, "You feel slightly more powerful.\n" );
    if ( ( (string)person->query_gp() + GP_AWARD ) >
      (string)person->query_max_gp() ) {
        person->set_gp( person->query_max_gp() );
        return;
    }
    person->adjust_gp( GP_AWARD );
}
int failed_zap( object dummy, object person, object ring ) {
    tell_object( person, "You feel slightly less powerful.\n" );
    person->add_succeeded_mess( ring, "$N $V $D.\n", ({ }) );
    if ( person->query_gp() < ( GP_AWARD / 3 ) ) {
        person->set_gp( 0 );
        return 1;
    }
    person->adjust_gp( 0 - ( GP_AWARD / 3 ) );
    return 1;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/rings/med_gp_ring.c ===
#define GP_AWARD 150
inherit "/obj/ring";
void setup() {
    set_name( "ring" );
    set_short( "pink crystal ring" );
    add_adjective( ({ "pink", "crystal" }) );
    set_main_plural( "pink crystal rings" );
    set_long( "The ring is a single piece of $material$, cut and polished "+
      "until its facets sparkle in the light.\n" );
    set_material( "rosy-quartz" );
    set_value( 500 );
    set_value_info( "artifact", 10000 );
    set_weight( 1 );
    set_enchant( 4 );
    add_property( "artifact form", ([
        "ring of vigour" : 5
      ]) );
    adjust_charges( 1 + random( 11 ) );
    set_level( 50 );
    set_zapper( file_name( this_object() ) );
}
string query_ring_name() { return "ring of vigour"; }
void zap( object dummy, object person, object ring ) {
    tell_object( person, "You feel slightly more powerful.\n" );
    if ( ( (string)person->query_gp() + GP_AWARD ) >
      (string)person->query_max_gp() ) {
        person->set_gp( person->query_max_gp() );
        return;
    }
    person->adjust_gp( GP_AWARD );
}
int failed_zap( object dummy, object person, object ring ) {
    tell_object( person, "You feel slightly less powerful.\n" );
    person->add_succeeded_mess( ring, "$N $V $D.\n", ({ }) );
    if ( person->query_gp() < ( GP_AWARD / 3 ) ) {
        person->set_gp( 0 );
        return 1;
    }
    person->adjust_gp( 0 - ( GP_AWARD / 3 ) );
    return 1;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/rings/recall.c ===
#include <drinks.h>
#include <cwc.h>
#include <config.h>
inherit "/obj/ring";
void setup() {
  set_name( "ring" );
  set_short( "blue crystal ring" );
  add_adjective( ({ "blue", "crystal" }) );
  set_main_plural( "blue crystal rings" );
  set_long( "The ring is a single piece of $material$, cut and polished "+
      "until its facets sparkle in the light.\n" );
  set_material( "sapphire" );
  set_value( 500 );
  set_value_info( "artifact", 10000 );
  set_weight( 1 );
  set_enchant( 3 );
  add_property( "artifact form", ([
    "ring of recall" : 3
  ]) );
  adjust_charges( 1 + random( 11 ) );
  set_level( 30 );
  set_zapper( file_name( this_object() ) );
}
string query_ring_name() { return "ring of recall"; }
string find_start_location( object person ) {
    string pos;
    if ( file_name( environment( person ) )[0..19] == "/d/cwc/Bes_Pelargic/" ) {
        return CWC_START_LOCATION;
    }
    pos = person->query_start_pos();
    if ( pos[ 0..19 ] == "/d/cwc/Bes_Pelargic/" && file_name( environment( person ) )[ 0..19 ] != "/d/cwc/Bes_Pelargic/" ) {
        return CONFIG_START_LOCATION;
    }
    return pos;
}
void zap( object dummy, object person, object ring ) {
   string place;
   place = query_property( "destination" );
   if ( !place ) {
      call_out( "move_person", 0, person, find_start_location( person ) );
   }
   else {
      call_out( "move_person", 0, person, place );
   }
}
int failed_zap( object dummy, object person, object ring ) {
  person->add_succeeded_mess( ring, "$N $V $D, but nothing happens.\n", ({ }) );
  return 1;
}
void move_person( object person, string place ) {
  tell_creator( "taffyd", "%O, %s\n", person, place );
  if ( !find_object( place ) )
    place->force_load();
  if ( !find_object( place ) ) {
    tell_object( person, "Please contact a creator and ask that \""+ place +
        "\" be checked.  You are also owed a charge on this ring.\n" );
    return;
  }
  if ( environment( person ) == find_object( place ) ) {
    tell_object( person, "You momentarily feel dislocated from reality; "+
        "the feeling passes, but something has changed...\n" );
    person->adjust_volume( D_ALCOHOL, ( 500 + random( 500 ) ) * ( 1 -
        2 * random( 2 ) ) );
    return;
  }
  tell_object( person, "You suddenly feel as if something yanks you "+
      "across the dimensions.\n" );
  person->move_with_look( place, "A spot of blue appears, enlarges and "+
      "turns into $N.", "$N shrinks and becomes red, then disappears "+
      "altogether." );
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/rings/light.arm ===
::Name::"ring"
::Short::"yellow stone ring"
::Adjective::({ "yellow", "stone" })
::Long::"This ring is carved from a yellow stone and polished to a high
sheen.\n"
::Property::"shop type","jewellers"
::Alias:: "jewellery"
::Plural:: "jewellery"
::Weight::1
::Enchant::1
::Value::2000
::Value Info::"enchantment", 1000
::Value Info::"magic", 4000
::Type::"ring"
::Setup::200
::Damage Chance::9
::Wear Effect::"/std/effects/attached/living_light"


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/rings/engagement.arm ===
::Name::"ring"
::Short::"engagement ring"
::Adjective::"engagement"
::Long::"A gold band holding onto a perfectly clear and flawless
diamond.  The diamond appears to be radiating a soft warm glow,
melting your heart as you gaze at it.\n"
::Property::"shop type","jewellers"
::Alias:: "jewellery"
::Plural:: "jewellery"
::Weight::1
::Enchant::1
::Value::4000
::Type::"ring"
::Setup::200
::Damage Chance::9


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/skullcap.ob ===
::#Class:: "/obj/food.c"
::Name:: "skullcap"
::Short:: "skullcap"
::Long:: "This is $pile_size$ of skullcap, $amount_size$.\n"
::Adjective:: ({ "some" })
::Property:: "determinate", "some "
::Plural:: "skullcap"
::$set_medium_alias:: "Skullcap"
::$set_amount_types:: ([ "sprig": ({ 1, "sprigs" }),
                         "bunch": ({ 50, "bunches" }) ])
::Adjective:: ({ "sprig", "sprigs", "bunch", "bunches", "of" })
::$set_pile_types:: ({ 50, "small", 100, "medium", "large" })
::$add_eat_effect::"/std/effects/ingested/cum_poison", 600
::$set_amount:: 1
::$set_continuous::
::$set_weight_unit:: ({ 1, 10 })


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/foxglove.ob ===
::#Class:: "/obj/food.c"
::Name:: "foxglove"
::Short:: "foxglove"
::Long:: "This is $pile_size$ of foxglove, $amount_size$.\n"
::Adjective:: ({ "some" })
::Property:: "determinate", "some "
::Plural:: "foxglove"
::$set_medium_alias:: "Foxglove"
::$set_amount_types:: ([ "stalk": ({ 1, "stalks" }),
                         "handful": ({ 50, "handfuls" }) ])
::Adjective:: ({ "stalk", "stalks", "handful", "handfuls", "of" })
::$set_pile_types:: ({ 50, "small", 100, "medium", "large" })
::$add_eat_effect::"/std/effects/ingested/cum_poison", 600
::$set_amount:: 1
::$set_continuous::
::$set_weight_unit:: ({ 1, 10 })



=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/stinking_mayweed.ob ===
::#Class:: "/obj/food.c"
::Name:: "mayweed"
::Short:: "stinking mayweed"
::Long:: "This is $pile_size$ of stinking mayweed, $amount_size$."
::Adjective:: ({ "some" })
::Property:: "determinate", "some "
::Plural:: "mayweed"
::Main Plural:: "mayweed"
::$set_medium_alias:: "StinkingMayweed"
::$set_amount_types:: ([ "stalk": ({ 1, "stalks" }),
                         "handful": ({ 50, "handfuls" }) ])
::Adjective:: ({ "stalk", "stalks", "handful", "handfuls", "of" })
::$set_amount:: 1
::$set_continuous::
::$set_pile_types:: ({ 50, "small", 100, "medium", "large" })
# I have no idea what this should be
::$set_weight_unit:: ({ 1, 10 })


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/sage.ob ===
::#Class:: "/obj/food.c"
::Name:: "sage"
::Short:: "sage"
::Long:: "This is $pile_size$ of sage, $amount_size$.\n"
::Adjective:: ({ "some" })
::Property:: "determinate", "some "
::Plural:: "sage"
::Main Plural:: "sage"
::$set_medium_alias:: "Sage"
::$set_amount_types:: ([ "sprig": ({ 1, "sprigs" }),
                         "bunch": ({ 50, "bunches" }) ])
::Adjective:: ({ "sprig", "sprigs", "bunch", "bunches", "of" })
::$set_amount:: 1
::$set_continuous::
::$set_pile_types:: ({ 50, "small", 100, "medium", "large" })
# I have no idea what this should be
::$set_weight_unit:: ({ 1, 10 })


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/basil.ob ===
::#Class:: "/obj/food.c"
::Name:: "basil"
::Short:: "basil"
::Property:: "determinate", "some "
::Long:: "This is $pile_size$ of basil, $amount_size$.\n"
::Adjective:: ({ "some" })
::Property:: "determinate", "some "   
::Plural:: "basil"
::Main Plural:: "basil"
::$set_medium_alias:: "Basil"
::$set_amount_types:: ([ "sprig": ({ 1, "sprigs" }),
                         "bunch": ({ 50, "bunches" }) ])
::Adjective:: ({ "sprig", "sprigs", "bunch", "bunches", "of" })
::$set_amount:: 1
::$set_continuous::
::$set_pile_types:: ({ 50, "small", 100, "medium", "large" })
# I have no idea what this should be
::$set_weight_unit:: ({ 1, 10 })


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/lotus_leaf.ob ===
#  -*- LPC -*- #
#
# $Locker:  $
# $Id: lotus_leaf.ob,v 1.2 2001/11/01 20:03:36 wirble Exp $
#
#
#

#by Siel and modified by Wirble

::#Class:: "/obj/cont_medium.c"
::#Class:: "/obj/food.c"
::Name:: "leaf"
::Short:: "lotus leaf"
::Long:: "This is a $Pleaf from $a lotus.  It is wide and flat like "
         "$Aplate and its leathery $Psurface $Vshines$shine dully.\n"
::Adjective:: ({ "lotus" })

::Main plural:: "lotus leaves"
::Weight::1
::$set_medium_alias:: "LotusLeaf"
::$set_collective::
::$set_amount:: 1
::$set_weight_unit:: ({ 1, 200 })
::Value::700
::$setup_eat_piece_messages:: "$N place$s the leaf on $o tongue and chew$s "
        "slowly.\n",
        "piece",
        "$N place$s the leaf on $o tongue and chew$s slowly.\n"
::Property:: "herb lore", "The lotus leaf, has a waxy surface that "
     "is actually quite rough.  Its unique structure and self-purifying "
     "properties have made it known for what is called the lotus "
     "effect.  That is, water never sticks to it, yet it gets "
     "cleaned by it."
#Left here in case more exiting things happen with herbs and plants
::$add_eat_effect::"/std/effects/ingested/basic_healing", 100
::$add_eat_effect:: "/std/effects/ingested/hallucination", 400
#::$add_eat_effect::"/std/effects/ingested/cum_poison", 800


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/eyebright.ob ===
::#Class:: "/obj/food.c"
::Name:: "eyebright"
::Short:: "eyebright"
::Long:: "This is $pile_size$ of eyebright, $amount_size$.\n"
::Adjective:: ({ "some" })
::Property:: "determinate", "some "
::Plural:: "eyebright"
::Main Plural:: "eyebright"
::$set_medium_alias:: "Eyebright"
::$set_amount_types:: ([ "stalk": ({ 1, "stalks" }),
                         "handful": ({ 50, "handfuls" }) ])
::Adjective:: ({ "stalk", "stalks", "handful", "handfuls", "of" })
::$set_amount:: 1
::$set_continuous::
::$set_pile_types:: ({ 50, "small", 100, "medium", "large" })
# I have no idea what this should be
::$set_weight_unit:: ({ 1, 10 })


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/angelica_root.ob ===
::#Class:: "/obj/food.c"
::Name:: "root"
::Short:: "holy ghost root"
::Long:: "This is $pile_size$ of holy ghost root, $amount_size$.\n"
::Adjective:: ({ "some", "holy", "ghost" })
::Property:: "determinate", "some "
::Property:: "no recycling", 1
::Plural:: "holy ghost root"
::Main Plural:: "holy ghost root"
::$set_medium_alias:: "HolyGhostRoot"
::$set_amount_types:: ([ "clump": ({ 1, "clumps" }),
                         "handful": ({ 50, "handfuls" }) ])
::Adjective:: ({ "clump", "clumps", "handful", "handfuls", "of" })
::$set_amount:: 1
::$set_continuous::
::$set_pile_types:: ({ 50, "small", 100, "medium", "large" })
# I have no idea what this should be
::$set_weight_unit:: ({ 1, 10 })
# 10 hp per stalk
::$add_eat_effect::"/std/effects/object/oak_wand_healing", 100
# 10 stalks for poison to begin acting
::$add_eat_effect::"/std/effects/ingested/cum_poison", 600
::Property:: "herb lore", "Holy Ghost Root, more commonly known as angelica "
    "root comes from a plant that is a perennial herb.  The plant grows to "
    "about 3 metres in height with a green groved hollow stem and large "
    "pinnate leaves and umbels of greenish-white or green flowers.  Its roots "
    "are usually dug out in autumn.  Fiberous roots are first removed before "
    "storing away to be dried.  Its medical functions includes replenishing "
    "stagnant blood, invigorating blood, alleviating pain and moistening the "
    "intestines."
#Most of this code was ripped from /obj/plants/thorny_burr.ob

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/rosemary.ob ===
::#Class:: "/obj/food.c"
::Name:: "rosemary"
::Short:: "rosemary"
::Long:: "This is $pile_size$ of rosemary, $amount_size$.\n"
::Adjective:: ({ "some" })
::Property::"determinate", "some "
::Plural:: "rosemary"
::Main Plural:: "rosemary"
::$set_medium_alias:: "RoseMary"
::$set_amount_types:: ([ "sprig": ({ 1, "sprigs" }),
                         "bunch": ({ 50, "bunches" }) ])
::Adjective:: ({ "sprig", "sprigs", "bunch", "bunches", "of" })
::$set_amount:: 1
::$set_continuous::
::$set_pile_types:: ({ 50, "small", 100, "medium", "large" })
# I have no idea what this should be
::$set_weight_unit:: ({ 1, 10 })



=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/yarrow.ob ===
::#Class:: "/obj/food.c"
::Name:: "yarrow"
::Short:: "yarrow"
::Long:: "This is $pile_size$ of yarrow, $amount_size$.\n"
::Adjective:: ({ "some" })
::Property:: "determinate", "some "
::Plural:: "yarrow"
::Main Plural:: "yarrow"
::$set_medium_alias:: "Yarrow"
::$set_amount_types:: ([ "stalk": ({ 1, "stalks" }),
                         "handful": ({ 50, "handfuls" }) ])
::Adjective:: ({ "stalk", "stalks", "handful", "handfuls", "of" })
::$set_amount:: 1
::$set_continuous::
::$set_pile_types:: ({ 50, "small", 100, "medium", "large" })
# I have no idea what this should be
::$set_weight_unit:: ({ 1, 10 })
# 10 hp per stalk
::$add_eat_effect::"/std/effects/object/oak_wand_healing", 100
# 10 stalks for poison to begin acting
::$add_eat_effect::"/std/effects/ingested/cum_poison", 600
::Property:: "herb lore", "Yarrow, also known as Fever Plant or "
    "millefolium to some, is a tall plant with clusters of small white "
    "flowers and bright green, ragged leaves.  The roots are not used, "
    "but the leaves or flowers may be used fresh or dried, especially "
    "to make various types of teas.  Yarrow is good to cure colds, "
    "fevers, stop bleeding, and ease the stomach, but too much yarrow "
    "is poisonous."









=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/klatchian_fleabane.ob ===
::#Class:: "/obj/food.c"
::Name:: "fleabane"
::Short:: "Klatchian fleabane"
::Long:: "This is $pile_size$ of Klatchian fleabane, $amount_size$.\n"
::Adjective:: ({ "some" })
::Property:: "determinate", "some "
::Plural:: "fleabane"
::Main Plural:: "fleabane"
::$set_medium_alias:: "KlatchianFleabane"
::$set_amount_types:: ([ "stalk": ({ 1, "stalks" }),
                         "handful": ({ 50, "handfuls" }) ])
::Adjective:: ({ "stalk", "stalks", "handful", "handfuls", "of" })
::$set_amount:: 1
::$set_continuous::
::$set_pile_types:: ({ 50, "small", 100, "medium", "large" })
# I have no idea what this should be
::$set_weight_unit:: ({ 1, 10 })


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/wormwood.ob ===
::#Class:: "/obj/food.c"
::Name:: "wormwood"
::Short:: "wormwood"
::Long:: "This is $pile_size$ of wormwood, $amount_size$.\n"
::Adjective:: ({ "some" })
::Property:: "determinate", "some "
::Plural:: "wormwood"
::$set_medium_alias:: "Wormwood"
::$set_amount_types:: ([ "stalk": ({ 1, "stalks" }),
                         "handful": ({ 50, "handfuls" }) ])
::Adjective:: ({ "stalk", "stalks", "handful", "handfuls", "of" })
::$set_pile_types:: ({ 50, "small", 100, "medium", "large" })
::$add_eat_effect::"/std/effects/ingested/cum_poison", 600
::$set_amount:: 1
::$set_continuous::
::$set_weight_unit:: ({ 1, 10 })


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/fennel_seed.ob ===
::#Class:: "/obj/reagents/generic_solid.ob"
::Name:: "seed"
::Short:: "fennel seed"
::Alias:: ({ "seeds", "fennel" })
::Adjective:: ({ "fennel", "small", "black" })
::Long:: "This appears to be a small, black, fennel seed.\n"
::$set_medium_alias:: "Fennel"
::Main plural:: "fennel seeds"
::Weight::1
::$set_continuous::


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/briony.ob ===
::#Class:: "/obj/food.c"
::Name:: "briony"
::Short:: "briony"
::Long:: "This is $pile_size$ of briony, $amount_size$.\n"
::Adjective:: ({ "some" })
::Property:: "determinate", "some "
::Plural:: "briony"
::$set_medium_alias:: "Briony"
::$set_amount_types:: ([ "stalk": ({ 1, "stalks" }),
                         "handful": ({ 50, "handfuls" }) ])
::Adjective:: ({ "stalk", "stalks", "handful", "handfuls", "of" })
::$set_pile_types:: ({ 50, "small", 100, "medium", "large" })
::$add_eat_effect::"/std/effects/ingested/cum_poison", 600
::$set_amount:: 1
::$set_continuous::
::$set_weight_unit:: ({ 1, 10 })


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/farlic.ob ===
::#Class:: "/obj/food.c"
::Name:: "farlic"
::Short:: "farlic"
::Long:: "This is a bulb of farlic.\n"
::Property:: "determinate", "a "
::Plural:: "garlic"
::$set_medium_alias:: "Farlic"
::$set_amount:: 1
::$add_eat_effect::"/std/effects/ingested/garlic_breath", 200
::$set_weight:: 3
::$set_weight_per_bite:: 1
::$set_piece_description:: "This is a papery, white clove of farlic. "+
 " It smells very pungent.\n"
::$set_piece_short:: "clove"
::$set_piece_plural:: "cloves"
::$set_decay_speed:: 1800
::Alias::({"farlic"})



=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/belladonna.ob ===
::#Class:: "/obj/food.c"
::Name:: "belladonna"
::Short:: "belladonna"
::Long:: "This is $pile_size$ of belladonna, $amount_size$.\n"
::Adjective:: ({ "some" })
::Property:: "determinate", "some "
::Plural:: "belladonna"
::$set_medium_alias:: "Belladonna"
::$set_amount_types:: ([ "stalk": ({ 1, "stalks" }),
                         "handful": ({ 50, "handfuls" }) ])
::Adjective:: ({ "stalk", "stalks", "handful", "handfuls", "of" })
::$set_pile_types:: ({ 50, "small", 100, "medium", "large" })
::$add_eat_effect::"/std/effects/ingested/cum_poison", 600
::$set_amount:: 1
::$set_continuous::
::$set_weight_unit:: ({ 1, 10 })


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/blue_lotus.ob ===
#  -*- LPC -*- #
#
# $Locker:  $
# $Id: blue_lotus.ob,v 1.4 2003/01/31 13:21:26 siel Exp $
#
#
#

#by Siel

::#Class:: "/obj/cont_medium.c"
::#Class:: "/obj/food.c"
::Name:: "flower"
::Short:: "blue lotus flower"
::Long:: "The perfectly bowl-shaped $Vflower$flowers $Vhas$have $a deep blue colour that "
         "warns you of its intoxicating properties.\n"
::Adjective:: ({ "blue", "lotus" })
::Main plural:: "blue lotus flowers"
::Weight::1
::Alias::"lotus"
::$set_medium_alias:: "BlueLotusFlower"
::$set_collective::
::$set_amount:: 1
::$set_weight_unit:: ({ 1, 200 })
#Left here in case more exiting things happen with herbs and plants
::$add_eat_effect::"/std/effects/ingested/basic_healing", 200
::$add_eat_effect:: "/std/effects/ingested/hallucination", 800
#::$add_eat_effect::"/std/effects/ingested/cum_poison", 800
::$setup_eat_piece_messages:: "$N place$s the flower on $o tongue and chew$s "
        "slowly.\n",
        "piece",
        "$N place$s the leaf on $o tongue and chew$s slowly.\n"
::Property:: "herb lore", "The lotus flower can be brewed to produce an "
             "intoxicating brew.  Research shows that this lotus has "
             "some medicinal properties as well as hallucinogenic "
             "ones and the ability to increase sexual potency and a "
             "feeling of well-being."
::Value::900


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/hemlock.ob ===
::#Class:: "/obj/food.c"
::Name:: "hemlock"
::Short:: "hemlock"
::Long:: "This is $pile_size$ of hemlock, $amount_size$.\n"
::Adjective:: ({ "some" })
::Property:: "determinate", "some "
::Plural:: "hemlock"
::$set_medium_alias:: "Hemlock"
::$set_amount_types:: ([ "stalk": ({ 1, "stalks" }),
                         "handful": ({ 50, "handfuls" }) ])
::Adjective:: ({ "stalk", "stalks", "handful", "handfuls", "of" })
::$set_pile_types:: ({ 50, "small", 100, "medium", "large" })
::$add_eat_effect::"/std/effects/ingested/cum_poison", 600
::$set_amount:: 1
::$set_continuous::
::$set_weight_unit:: ({ 1, 10 })


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/oregano.ob ===
::#Class:: "/obj/food.c"
::Name:: "oregano"
::Short:: "oregano"
::Long:: "This is $pile_size$ of oregano, $amount_size$.\n"
::Adjective:: ({ "some" })
::Property:: "determinate", "some "
::Plural:: "oregano"
::Main Plural:: "oregano"
::$set_medium_alias:: "Oregano"
::$set_amount_types:: ([ "sprig": ({ 1, "sprigs" }),
                         "bunch": ({ 50, "bunches" }) ])
::Adjective:: ({ "sprig", "sprigs", "bunch", "bunches", "of" })
::$set_amount:: 1
::$set_continuous::
::$set_pile_types:: ({ 50, "small", 100, "medium", "large" })
# I have no idea what this should be
::$set_weight_unit:: ({ 1, 10 })




=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/achorion.ob ===
::#Class:: "/obj/food.c"
::Name:: "achorion"
::Short:: "achorion mould"
::Long:: "This is $pile_size$ of achorion mould, $amount_size$.\n"
::Adjective:: ({ "some", "mould" })
::Alias:: "mould"
::Property:: "determinate", "some "
::Plural:: "achorion"
::$set_medium_alias:: "AchorionMould"
::$set_amount_types:: ([ "sprig": ({ 1, "sprigs" }),
                         "bunch": ({ 50, "bunches" }) ])
::Adjective:: ({ "sprig", "sprigs", "bunch", "bunches", "of" })
::$set_pile_types:: ({ 50, "small", 100, "medium", "large" })
::$add_eat_effect::"/std/effects/ingested/cum_poison", 600
::$set_amount:: 1
::$set_continuous::
::$set_weight_unit:: ({ 1, 10 })


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/clematis.ob ===
::#Class:: "/obj/food.c"
::Name:: "clematis"
::Short:: "clematis"
::Long:: "This is $pile_size$ of clematis, $amount_size$.\n"
::Adjective:: ({ "some" })
::Property:: "determinate", "some "
::Plural:: "clematis"
::$set_medium_alias:: "Clematis"
::$set_amount_types:: ([ "sprig": ({ 1, "sprigs" }),
                         "bunch": ({ 50, "bunches" }) ])
::Adjective:: ({ "sprig", "sprigs", "bunch", "bunches", "of" })
::$set_pile_types:: ({ 50, "small", 100, "medium", "large" })
::$add_eat_effect::"/std/effects/ingested/cum_poison", 200
::$set_amount:: 1
::$set_continuous::
::$set_weight_unit:: ({ 1, 10 })


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/weird_plant.ob ===
#
# Weird plant, as found in the Basilisk's Nest
# 
# Taken from the clone-onna-fly original by Sin
# by Carmine, 27 January 2003
# 
::#Class:: "/obj/food.c"
::Name:: "plant"
::Short:: "weird plant"
::Long:: "This is a weird looking plant.  Ten long, sand-coloured stems splay "
   "out from the root.  At the end of each stem a tiny sickly flower cowers "
   "amid its drooping petals.  An oily nectar is secreted by the flower and "
   "gives off a noxious smell.\n"
::Adjective:: ({ "weird" })
::Plural:: "plants"
::Main Plural::"weird plants"
::$set_medium_alias:: "WeirdPlant"
::$add_eat_effect::"/std/effects/ingested/cum_poison", 100
::Weight::4
::$add_property::"repellent", 2


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/thyme.ob ===
::#Class:: "/obj/food.c"
::Name:: "thyme"
::Short:: "thyme"
::Long:: "This is $pile_size$ of thyme, $amount_size$.\n"
::Adjective:: ({ "some" })
::Property:: "determinate", "some "
::Plural:: "thyme"
::Main Plural:: "thyme"
::$set_medium_alias:: "Thyme"
::$set_amount_types:: ([ "sprig": ({ 1, "sprigs" }),
                         "bunch": ({ 50, "bunches" }) ])
::Adjective:: ({ "sprig", "sprigs", "bunch", "bunches", "of" })
::$set_amount:: 1
::$set_continuous::
::$set_pile_types:: ({ 50, "small", 100, "medium", "large" })
# I have no idea what this should be
::$set_weight_unit:: ({ 1, 10 })




=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/hellebore.ob ===
::#Class:: "/obj/food.c"
::Name:: "hellebore"
::Short:: "hellebore"
::Long:: "This is $pile_size$ of hellebore, $amount_size$.\n"
::Adjective:: ({ "some" })
::Property:: "determinate", "some "
::Plural:: "hellebore"
::$set_medium_alias:: "Hellebore"
::$set_amount_types:: ([ "sprig": ({ 1, "sprigs" }),
                         "bunch": ({ 50, "bunches" }) ])
::Adjective:: ({ "sprig", "sprigs", "bunch", "bunches", "of" })
::$set_pile_types:: ({ 50, "small", 100, "medium", "large" })
::$add_eat_effect::"/std/effects/ingested/cum_poison", 200
::$set_amount:: 1
::$set_continuous::
::$set_weight_unit:: ({ 1, 10 })


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/parsley.ob ===
::#Class:: "/obj/food.c"
::Name:: "parsley"
::Short:: "parsley"
::Long:: "This is $pile_size$ of parsley, $amount_size$.\n"
::Adjective:: ({ "some" })
::Property:: "determinate", "some "
::Plural:: "parsley"
::Main Plural:: "parsley"
::$set_medium_alias:: "Parsley"
::$set_amount_types:: ([ "sprig": ({ 1, "sprigs" }),
                         "bunch": ({ 50, "bunches" }) ])
::Adjective:: ({ "sprig", "sprigs", "bunch", "bunches", "of" })
::$set_amount:: 1
::$set_continuous::
::$set_pile_types:: ({ 50, "small", 100, "medium", "large" })
# I have no idea what this should be
::$set_weight_unit:: ({ 1, 10 })
::$add_eat_effect::"/std/effects/ingested/breath_fresh", 2


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/wild_garlic.ob ===
::#Class:: "/obj/food.c"
::Name:: "garlic"
::Short:: "wild garlic"
::Long:: "This is a bulb of garlic.\n"
::Alias::"bulb"
::Adjective::({"wild", "of"})
::Property:: "determinate", "a "
::Plural:: "garlic"
::$set_medium_alias:: "WildGarlic"
::$set_amount:: 1
::$add_eat_effect::"/std/effects/ingested/garlic_breath", 200
::$set_weight:: 2
::$set_weight_per_bite:: 1
::$set_piece_description:: "This is a papery, white clove of garlic. "+
 " It smells very pungent.\n"
::$set_piece_short:: "clove"
::$set_piece_plural:: "cloves"
::$set_decay_speed:: 6000
::Property:: "herb lore", "Garlic, fresh or carefully dried, consists of "
     "the main bulb with several attached cloves of A. sativum L., or "
     "Auriental Chive.  Application of garlic is beneficial to almost "
     "any ailment, especially social ones.  It should also be noted "
     "that garlic causes the blood to heat and the senses to become "
     "excited, and for that reason monks and priests are prohibited from "
     "using it.  Excessive use of garlic is harmful to the eyes and "
     "causes dizziness."


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/tyler_weed.ob ===
::#Class:: "/obj/food.c"
::Name:: "weed"
::Short:: "tyler weed"
::Long:: "This is $pile_size$ of tyler weed, $amount_size$.\n"
::Adjective:: ({ "some", "tyler" })
::Property:: "determinate", "some "
::Plural:: "tyler weed"
::$set_medium_alias:: "TylerWeed"
::$set_amount_types:: ([ "stalk": ({ 1, "stalks" }),
                         "handful": ({ 50, "handfuls" }) ])
::Adjective:: ({ "stalk", "stalks", "handful", "handfuls", "of" })
::$set_pile_types:: ({ 50, "small", 100, "medium", "large" })
::$add_eat_effect::"/std/effects/ingested/cum_poison", 600
::$set_amount:: 1
::$set_continuous::
::$set_weight_unit:: ({ 1, 10 })


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/convolvus.ob ===
::#Class:: "/obj/food.c"
::Name:: "convolvus"
::Short:: "convolvus"
::Long:: "This is $pile_size$ of convolvus (also known as bindweed), "
         "$amount_size$.  It has a long, springy stem and pale "
         "funnel-shaped flowers.\n"
::Adjective:: ({ "some" })
::Property:: "determinate", "some "
::Plural:: "convolvus"
::Main Plural:: "convolvus"
::Alias:: "bindweed"
::$set_medium_alias:: "Convolvus"
::$set_amount_types:: ([ "length": ({ 1, "lengths" }),
                         "handful": ({ 10, "handfuls" }) ])
::Adjective:: ({ "length", "lengths", "handful", "handfuls", "of" })
::$set_amount:: 1
::$set_continuous::
::$set_pile_types:: ({ 10, "small", 20, "medium", "large" })
# I have no idea what this should be
::$set_weight_unit:: ({ 1, 10 })


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/grass.ob ===
::#Class:: "/obj/food.c"
::Name:: "grass"
::Short:: "grass"
::Long:: "This is $pile_size$ of green grass, $amount_size$.\n"
::Adjective:: ({ "some", "green" })
::Property:: "determinate", "some "
::Plural:: "grass"
::Main Plural:: "grass"
::$set_medium_alias:: "GreenGrass"
::$set_amount_types:: ([ "blade": ({ 1, "blades" }),
                         "handful": ({ 50, "handfuls" }) ])
::Adjective:: ({ "blade", "blades", "handful", "handfuls", "of" })
::$set_amount:: 5
::$set_continuous::
::$set_pile_types:: ({ 50, "small", 100, "medium", "large" })


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/wheat.ob ===

::#Class::      "/obj/plants/inherit/grain.c"
::Name::        "wheat"
::Short::       "stalk of wheat"
::Alias::       "stalk"
::Adjective::   ({ "stalk", "of" })
::Long::        "This is a long $Pstalk of wheat grass.  Its $Phead "
                "$Vbobs$bob up and down, fat with grain.  Perhaps you "
                "could use $Vit$them to make bread.\n"
::Plural::      ({ "wheat", "stalks" })
::Main Plural:: "stalks of wheat"
::$set_medium_alias:: "Wheat"
::Property:: "herb lore",
   "Wheat is a tall grass, often cultivated for breadmaking.  It is named "
   "corn in many of the areas around the Circle Sea.  Only the stalks are "
   "not used.  The bran, when combined with vinegar, cures many blemishes of "
   "the skin.  The grain is said to be good for the bites of mad dogs, and to "
   "aid colds when roasted.  The leaves are said to soften callouses when "
   "applied.  This is a versatile, useful grass."


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/angels_trumpet.ob ===
::#Class:: "/obj/food.c"
::Name:: "trumpet"
::Short:: "angel's trumpet"
::Long:: "This is $pile_size$ of angel's trumpet, $amount_size$.\n"
::Adjective:: ({ "some", "angel's" })
::Property:: "determinate", "some "
::Plural:: "angel's trumpet"
::$set_medium_alias:: "AngelsTrumpet"
::$set_amount_types:: ([ "stalk": ({ 1, "stalks" }),
                         "handful": ({ 50, "handfuls" }) ])
::Adjective:: ({ "stalk", "stalks", "handful", "handfuls", "of" })
::$set_pile_types:: ({ 50, "small", 100, "medium", "large" })
::$add_eat_effect::"/std/effects/ingested/cum_poison", 600
::$set_amount:: 1
::$set_continuous::
::$set_weight_unit:: ({ 1, 10 })


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/ivy_seed.ob ===
::#Class:: "/obj/cont_medium.c"
::Name:: "seed"
::Short:: "ivy seed"
::Adjective:: ({ "ivy" })
::Long:: "This appears to be an ivy $Pseed.  Perhaps you could "
    "make $Vit$them grow if you had some kind of fertiliser.\n"
::Plural:: "ivy seeds"
::Main plural:: "ivy seeds"
::Weight::1
::$set_medium_alias:: "IvySeed"
::$set_collective::
::$set_amount:: 1
::$set_weight_unit:: ({ 1, 200 })


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/comfrey.ob ===
::#Class:: "/obj/food.c"
::Name:: "comfrey"
::Short:: "comfrey"
::Long:: "This is $pile_size$ of comfrey, $amount_size$.\n"
::Adjective:: ({ "some" })
::Property:: "determinate", "some "
::Plural:: "comfrey"
::Main Plural:: "comfrey"
::$set_medium_alias:: "Comfrey"
::$set_amount_types:: ([ "stalk": ({ 1, "stalks" }),
                         "handful": ({ 50, "handfuls" }) ])
::Adjective:: ({ "stalk", "stalks", "handful", "handfuls", "of" })
::$set_amount:: 1
::$set_continuous::
::$set_pile_types:: ({ 50, "small", 100, "medium", "large" })
# I have no idea what this should be
::$set_weight_unit:: ({ 1, 10 })
::$add_eat_effect::"/std/effects/ingested/basic_healing", 200
::$add_eat_effect::"/std/effects/ingested/cum_poison", 800
::Property:: "herb lore", "Comfrey, or Knitbone, is erect in habit and "
    "rough and hairy all over.  The roots are fleshy and juicy, the flowers "
    "pale and creamy.  Both the leaves and roots may be used in various "
    "teas to reduce swelling, gangrene, and unpredictable intestinal events.  "
    "Comfrey also speeds the healing of broken bones and sprained backs.  "
    "The scientific name for this herb is Symphytum officinale."





=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/pink_clover.ob ===
::#Class:: "/obj/food.c"
::Name:: "clover"
::Short:: "pink clover"
::Long:: "This is $pile_size$ of pink clover, $amount_size$.\n"
::Adjective:: ({ "some", "pink" })
::Property:: "determinate", "some "
::Plural:: "clover"
::Main Plural:: "clover"
::$set_medium_alias:: "PinkClover"
::$set_amount_types:: ([ "blossom": ({ 1, "blossoms" }),
                         "handful": ({ 50, "handfuls" }) ])
::Adjective:: ({ "blossom", "blossoms", "handful", "handfuls", "of" })
::$set_amount:: 1
::$set_continuous::
::$set_pile_types:: ({ 50, "small", 100, "medium", "large" })


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/monkshood.ob ===
::#Class:: "/obj/food.c"
::Name:: "monkshood"
::Short:: "monkshood"
::Long:: "This is $pile_size$ of monkshood, $amount_size$.\n"
::Adjective:: ({ "some" })
::Property:: "determinate", "some "
::Plural:: "monkshood"
::$set_medium_alias:: "Monkshood"
::$set_amount_types:: ([ "stalk": ({ 1, "stalks" }),
                         "handful": ({ 50, "handfuls" }) ])
::Adjective:: ({ "stalk", "stalks", "handful", "handfuls", "of" })
::$set_pile_types:: ({ 50, "small", 100, "medium", "large" })
::$add_eat_effect::"/std/effects/ingested/cum_poison", 600
::$set_amount:: 1
::$set_continuous::
::$set_weight_unit:: ({ 1, 10 })


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/floppy_madman.ob ===
::#Class:: "/obj/food.c"
::Name:: "madman"
::Short:: "Floppy Madman"
::Long:: "The Floppy Madman is a small green-capped mushroom.  It is a typical "
   "member of the fungi kingdom, as it thrives in dark, moist "
   "environments such as deep forests.  The mushroom has gotten its "
   "name from its humorously floppy cap, and possible delusionary "
   "effects.\n"
::Adjective:: ({ "some" })
::Property:: "determinate", "a "
::Weight:: 1
::$add_alias:: "mushroom"
::$add_plural:: "madmen"
::$add_plural:: "mushrooms"
::$set_medium_alias:: "FloppyMadman"





=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/cereus.ob ===
::#Class:: "/obj/food.c"
::Name:: "cereus"
::Short:: "cereus"
::Long:: "This is $pile_size$ of cereus, $amount_size$.\n"
::Adjective:: ({ "some" })
::Property:: "determinate", "some "
::Plural:: "cereus"
::$set_medium_alias:: "Cereus"
::$set_amount_types:: ([ "sprig": ({ 1, "sprigs" }),
                         "bunch": ({ 50, "bunches" }) ])
::Adjective:: ({ "sprig", "sprigs", "bunch", "bunches", "of" })
::$set_pile_types:: ({ 50, "small", 100, "medium", "large" })
::$add_eat_effect::"/std/effects/ingested/cum_poison", 600
::$set_amount:: 1
::$set_continuous::
::$set_weight_unit:: ({ 1, 10 })


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/thorny_burr.ob ===
::#Class:: "/obj/food.c"
::Name:: "burr"
::Short:: "thorny burr"
::Long:: "This is $pile_size$ of thorny burr, $amount_size$.\n"
::Adjective:: ({ "some", "thorny" })
::Property:: "determinate", "some "
::Plural:: "thorny burr"
::Main Plural:: "thorny burr"
::$set_medium_alias:: "ThornyBurr"
::$set_amount_types:: ([ "stalk": ({ 1, "stalks" }),
                         "handful": ({ 50, "handfuls" }) ])
::Adjective:: ({ "stalk", "stalks", "handful", "handfuls", "of" })
::$set_amount:: 1
::$set_continuous::
::$set_pile_types:: ({ 50, "small", 100, "medium", "large" })
# I have no idea what this should be
::$set_weight_unit:: ({ 1, 10 })
# 10 hp per stalk
::$add_eat_effect::"/std/effects/object/oak_wand_healing", 100
# 10 stalks for poison to begin acting
::$add_eat_effect::"/std/effects/ingested/cum_poison", 600
::Property:: "herb lore", "Thorny Burr, more commonly known as Beggar's "
    "Buttons or as arctium lappa to the scientific community is a large "
    "plant that grows up to five feet "
    "tall.  It has crimson, funnel shaped flowers, and the stem is "
    "woody with broad green leaves.  Its roots are used fresh or dried "
    "to cure gastrointestinal ailments, aid digestion, clean the kidney "
    "and clean the blood."

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/coriander.ob ===
#
# Coriander, sold in Djelibeybi Bazaar
#
# Pulled out of weirdness by Carmine, November 2002
#
::#Class:: "/obj/food.c"
::Name:: "coriander"
::Short:: "coriander"
::Long:: "This is $pile_size$ of coriander, $amount_size$.\n"
::Adjective:: ({ "some" })
::Property::"determinate", "some "
::Plural:: "coriander"
::Main Plural:: "coriander"
::$set_medium_alias:: "CorianDer"
::$set_amount_types:: ([ "sprig": ({ 1, "sprigs" }),
                         "bunch": ({ 50, "bunches" }) ])
::Adjective:: ({ "sprig", "sprigs", "bunch", "bunches", "of" })
::$set_amount:: 1
::$set_continuous::
::$set_pile_types:: ({ 50, "small", 100, "medium", "large" })
::$set_weight_unit:: ({ 1, 10 })


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/leopard_bane.ob ===
::#Class:: "/obj/food.c"
::Name:: "bane"
::Short:: "Leopard's bane"
::Long:: "This is $pile_size$ of Leopard's bane, $amount_size$.\n"
::Adjective:: ({ "some", "leopard" })
::Property:: "determinate", "some "
::Property:: "no recycling", 1
::Plural:: "clusters of Leopard's bane"
::Main Plural:: "Leopard's bane"
::$set_medium_alias:: "Leopard'sBane"
::$set_amount_types:: ([ "cluster": ({ 1, "clusters" }),
                         "handful": ({ 50, "handfuls" }) ])
::Adjective:: ({ "cluster", "clusters", "handful", "handfuls", "of" })
::$set_amount:: 1
::$set_continuous::
::$set_pile_types:: ({ 50, "small", 100, "medium", "large" })
::$set_weight_unit:: ({ 1, 10 })
# Healing effect will be added later as this will be applied externally
# Poison effect is added since it's meant to be applied externally
::$add_eat_effect::"/std/effects/ingested/cum_poison", 700
::Property:: "herb lore", "Leopard's Bane, also known as Wolf's Bane or "
  "Mountain Tobacco is a small herbaceious perennial found in woods and "
  "mountain pastures.  The leaves form a flat rosette, from the centre of "
  "which rises a flower stalk bearing clusters of small orange-yellow flowers ." 
  " The rhizome is dark brown, cylindrical, usually curved, and bears brittle " 
  "wiry rootlets on the under surface.  The flowers are collected entire and "
  "dried.  Tincture made from the flowers are applied externally on injured "
  "areas.  This remedy is widely used heal sprains and bruises and "
  "occasionally, hair loss.\n"



=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/smelly_seed.ob ===
::#Class:: "/obj/cont_medium.c"
::Name:: "seed"
::Short:: "smelly seed"
::Adjective:: ({ "small", "smelly" })
::Long:: "This small $Pseed $Vsmells$smell strongly of goat manure.\n"
::Main plural:: "smelly seeds"
::Weight::1
::Value::40
::$set_medium_alias:: "SmellyIvySeed"
::$set_collective::
::$set_decay_speed:: 0
::$set_amount:: 1
::$set_weight_unit:: ({ 1, 200 })


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/violet.ob ===
::#Class:: "/obj/food.c"
::Name:: "violet"
::Short:: "violets"
::Long:: "This is $pile_size$ of violets, $amount_size$.\n"
::Adjective:: ({ "some" })
::Property:: "determinate", "some "   
::Plural:: "violets"
::Main Plural:: "violets"
::$set_medium_alias:: "Violet"
::$set_amount_types:: ([ "sprig": ({ 1, "sprigs" }),
                         "bunch": ({ 50, "bunches" }) ])
::Adjective:: ({ "sprig", "sprigs", "bunch", "bunches", "of" })
::$set_amount:: 1
::$set_continuous::
::$set_pile_types:: ({ 50, "small", 100, "medium", "large" })
# I have no idea what this should be
::$set_weight_unit:: ({ 1, 10 })


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/plants/inherit/grain.c ===
#include <move_failures.h>
#include <state_change.h>
#define TO this_object()
#define TP this_player()
#define THRESHOLD 5
inherit "/obj/food";
int _max_strip;
void create() {
  do_setup++;
  ::create();
  do_setup--;
  set_name( "grain" );
  set_short( "broken grain" );
  set_long( "This is some funky, but broken, grain.\n" );
  _max_strip = THRESHOLD;
  remove_help_file( "food" );
  add_help_file( "grain" );
  add_alias( "plant" );
  add_plural( "plants" );
  set_collective();
  set_amount( 1 );
  set_weight_unit( ({ 1, 10 }) );
  set_eat_mess( ({
    "$N choke down $D. It absorbs all the moisture from your mouth and sticks "
      "in your throat.  Looks like you just aren't designed to eat unmilled "
      "grain.\n",
    "$N chokes down $D, coughing and rubbing $p throat unhappily.\n"
  }) );
  if ( ! do_setup ) {
    TO->setup();
    TO->reset();
  }
}
void init() {
  ::init();
  TP->add_command( "chew", TO );
  TP->add_command( "strip", TO );
}
void set_max_strippable( int num ) {
  _max_strip = num;
}
int query_max_strippable() {
  return _max_strip;
}
int do_chew() {
  int size;
  size = query_amount();
  if ( ! size ) {
    add_failed_mess( "You can't chew thin air.\n" );
    return 0;
  }
  if ( size > 1 ) {
    add_failed_mess( "You can't chew more than one " + short(0)
      + " at a time.\n" );
    return 0;
  }
  TP->set_position( "idly chewing " + TO->a_short() );
  add_succeeded_mess(
    "$N place$s $D between $p teeth, and chew$s it idly.\n" );
  return 1;
}
int do_strip() {
  int i;
  object stripped;
  if ( query_amount() > query_max_strippable() ) {
    add_failed_mess( "That's far too much $D for you to strip by hand.  "
      "Perhaps you should look for a tool of some kind.\n" );
    return 0;
  }
  stripped = STATE_CHANGE->transform( TO, "thresh" );
  if ( ! objectp( stripped ) ) {
    add_failed_mess( "For some reason, you can't strip $D.\n" );
    return 0;
  }
  i = stripped->move( TP );
  if ( i != MOVE_OK ) {
    stripped->move( environment( TP ) );
    add_succeeded_mess( "$N strip$s the grain from $D with $p fingers, "
      "spilling some onto the "
      + ( environment( TP )->query_property( "location" ) == "inside" ? "floor"
      : "ground" ) + ".\n" );
  } else {
    add_succeeded_mess( "$N strip$s the grain from $D with $p fingers.\n" );
  }
  move( "/room/rubbish" );
  return 1;
}
mapping query_static_auto_load() {
  return int_query_static_auto_load();
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/gatherables/rock.c ===
inherit "/obj/gatherable";
void setup() {
    set_name("rock");
    set_short("hidden rock");
    set_long("There are rocks of all shapes and sizes here.  Use "
             "\"gather\" to collect specific types.\n");
    set_get_failure_mess("There are all sorts of rocks and minerals "
                         "around here.  Use \"gather\" to get "
                         "specific varieties.\n");
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/gatherables/plant.c ===
inherit "/obj/gatherable";
void setup() {
    set_name("plant");
    set_short("hidden plant");
    set_long("There are all sorts of herbs and flowers here.  Use "
             "\"gather\" to collect specific types.\n");
    set_get_failure_mess("There are all sorts of flowers and herbs "
                         "around here.  Use \"gather\" to get "
                         "specific varieties.\n");
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/food/meals/smitten_steak_and_slumpie.food ===
::Name::"chips"
::Short::"portion of smitten steak and slumpie"
::Alias::({"steak", "portion"})
::Adjective::({"portion", "of", "steak", "and"})
::Main Plural::"portions of smitten steak and slumpie"
::Long::"A nicely cooked steak surrounded by a cream sauce.  A lavish portion "
  "of slumpie sits to one side of it.  It looks really tasty.\n"
::Weight::30
::Weight per bite::5
::$setup_eat_piece_messages::"$N eat$s part of the prime steak, smearing it "
  "with the cream sauce.\n",
  "$N eat$s $amt$ of the portion of steak and slumpie.\n",
  "$N finish$es off the last of the steak and slumpie, licking $p lips in "
  "satisfaction.\n"
::Eat Effects::"/std/effects/ingested/vial_healing", 4



=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/food/meals/soup_with_named_meat.food ===
#Soup With Named Meat for the Kart Kill Kafe on The Soake
::#Class::"/obj/reagents/generic_liquid.ob"
::Name::"soup"
::Short::"Soup with Named Meat"
::Alias::({"meat", "stew", "food", "soup" })
::Medium Alias::"SoupWithNamedMeat"
::Adjective::({"with", "named", "meat"})
::Long::"At least the hideous lumps floating in this thin, gelatinous goo are "
   "from a recognisable animal, although it still doesn't have the delicious, "
   "appetising appearance of, say, the foot of a random passerby.\n"
::Amount::30
::$setup_eat_piece_messages:: ({"You swallow some of the vile soup.\n", 
   "$N gulp$s some soup with a look of disgust on $p face.\n"}),
   ({}),
   ({"You eat a little happier knowing just what it is you're eating.\n",
   "$N seems content with $p soup.\n"})
::Eat Effects::"/std/effects/ingested/vial_healing", 2

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/food/meals/sushi.food ===
::name::"sushi"
::short::"sushi"
::determinate::"some "
::adjective::({ "fishy"})
::long::"Take some raw fish, add cold rice, and wrap in seaweed.  Dip "
"in lava sauce, and you have sushi, a real delicacy!\n"
::Main Plural::"sushi"
::weight::3
::medium alias::"SuShI"                 
::$set_weight_per_bite::1


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/food/meals/spaghetti.food ===
::Name::"spaghetti"
::Short::"spaghetti bolognese"
::Adjective::"bolognese"
::Long::"Long, thin pasta, these spaghetti are cooked to al dente.  They are "
"covered in a sauce of tomatoes and minced meat.\n"
::Weight::2
::Weight per bite::1
::Medium alias::"SpaghettI"


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/food/meals/soup_with_meat.food ===
#Soup With Meat for the Kart Kill Kafe on The Soake
::#Class::"/obj/reagents/generic_liquid.ob"
::Name::"soup"
::Short::"Soup with Meat"
::Alias::({"meat", "stew", "portion", "food", "soup"})
::Adjective::({"with", "meat"})
::Medium Alias::"SoupWithMeat"
::Long::"This soup is a uniform grey-green colour, and has Bits floating in "
   "it.  Not only is the meat not named, it's not entirely clear that it is "
   "meat at all.\n"
::Amount::30
::$setup_eat_piece_messages:: ({"You swallow some of the vile soup.\n", 
   "$N gulp$s some soup with a look of disgust on $p face.\n"}),
   ({}),
   ({"You finish off the soup and try to think of something else.\n",
   "$N regretfully sip$s the soup until it is gone.\n"})
::Eat Effects::"/std/effects/ingested/vial_healing", 1

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/food/nuts/pecan_nut.food ===
::name:: "nut" 
::short:: "pecan nut" 
::long:: "A rather ancient, wrinkled oval pecan nut.\n" 
::adjective:: ({ "ancient", "wrinkled", "oval", "pecan" }) 
::weight:: 2 
::$set_weight_per_bite:: 2 
::$setup_eat_piece_messages:: "",
        "piece",
        "$N pop$s the pecan nut in $p mouth and chew$s happily on it.\n"


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/food/vegetables/runner_bean.food ===
::name::"bean"
::short::"runner bean"
::adjective::({ "runner"})
::long::"This is a long green bean, not much of a meal on its own, but with"
" a handful of mates, it'd make a nice snackette.\n"
::Main Plural::"runner beans"
::weight::2
::medium alias::"BeAnS"                 
::$set_weight_per_bite::1


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/food/vegetables/rhubarb.food ===
::name:: "rhubarb"
::short:: "stalk of rhubarb"
::long:: "This is a tasty, sweet stalk of rhubarb.  It looks "
         "a bit like red celery.\n"
::alias:: ({ "stalk" })
::plural:: ({ "stalks" })
::main plural:: "stalks of rhubarb"
::adjective:: ({ "stalk", "of", "tasty", "red" })
::medium alias:: "Rhubarb"
::weight:: 2
::$set_weight_per_bite:: 1


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/food/alcohol/vegetable_medley.food ===

## Vegetable medley, from the bar in Sto Lat.
## Vashti, 18th December 2002.

::#Class::      "/obj/reagents/generic_liquid.ob"
::Name::        "medley"
::Short::       "vegetable medley"
::Adjective::   "vegetable"
::Plural::      "medlies"
::Main Plural:: "vegetable medlies"
::Long::        "This brightly coloured fluid is strangely reminiscent of "
                "both green and purple tones.  A wizard might find it a "
                "pale shadow of octarine, the king of colours.  They also, "
                "if they spent a lot of time in magical workshops "
                "experimenting with horrifying demons and whatnot, might "
                "not notice the reek of decomposing vegetable flesh creeping "
                "off the surface of this concoction like steam.  Perhaps this "
                "is a real wizard's drink.\n"
::Eat Effects:: "/std/effects/ingested/drunk", 250
::Eat Mess::    ({ "$N $V $D.  Vegetables begin to creep out of the walls.  "
                     "They're coming to get you!\n",
                   "$N $V $D, before screaming and clawing at $p eyes.\n" })
                   


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/food/alcohol/vodka.food ===
# $Locker:  $
# $Id: vodka.food,v 1.1 2002/02/24 18:17:57 tilly Exp $

::#Class:: "/obj/reagents/generic_liquid.ob"
::Name:: "vodka"
::Short:: "vodka"
::Main Plural:: "vodka"
::Medium Alias:: "Vodka"
::Long:: "This is a clear liquid that smells like vodka.  "
    "There is $amount_size$.\n"
::Amount:: 960
::Eat Effects:: "/std/effects/ingested/drunk", 800



=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/food/meat/slice_of_ham.food ===
::Name:: "ham"
::Short:: "slice of ham"
::Adjective:: ({ "juicy", "salty", "thick", "slice", "of", "ham", })
::Alias:: ({ "ham", "slice", "food"})
::Plural:: ({ "ham", "slices", })
::Plural Adjective:: ({ "slices" })
::Main Plural:: "slices of ham"
::Long::
    "This is a thick slice of ham.  It is juicy and salty.\n"  
::Weight:: 2
::weight per bite::1

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/food/meat/steak.food ===
::name::"steak"
::short::"steak"
::long::"This is a large, juicy steak, well-done and cooked to perfection.  "
        "Great for eating but not much use for vampire-fighting.\n"    
::Main Plural::"steaks"
::adjective::({ "large", "juicy", "well-done" })
::plural:: "steaks"
::weight::3
::$set_weight_per_bite::1
::$setup_eat_piece_messages:: "$N take$s a bite from the steak "
        "and chew happily, getting covered in its juices.\n",
        "$N eat$s the last of the juicy steak and looks disappointed that "
        "there isn't more.\n"
::piece description::"A bite-sized chunk of juicy steak.\n"
::value::750


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/food/meat/side_of_lamb.food ===
::name::"sheep"
::alias::"side"
::alias::"lamb"
::alias::"food"
::short::"side of lamb"
::adjective::({ "side", "lamb" })
::main_plural::"sides of lamb"
::plural::"sides"
::long::"This is a side of lamb.  It looks "
        "like it came from a rather young sheep "
        "and a well fed one at that.\n"
::weight::60
::value::435

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/food/meat/side_of_goat.food ===
::name::"goat"
::short::"side of goat"
::alias::"side"
::alias::({ "food", "sides" })
::adjective::"side"
::main_plural::"sides of goat"
::plural::"sides"
::long::"This is the side of quite a "
        "large goat.  It has been totally stripped "
        "of its outer skin and had its head and feet "
        "chopped off.\n"
::weight::60
::value::425

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/food/fruits/small_watermelon.food ===
::name::"watermelon"
::short::"small watermelon"
::adjective::({"small", "water", "crisp", "striped", "green", "nice", "fresh"})
::alias::({"melon", "fruit"})
::plural::({"melons", "fruits"})
::long::"The crisp skin of this watermelon is striped in different shades of "
"green.  It is bigger than most other fruit, but still small for its type.\n"
::piece description::"This is a nice segment of watermelon, with its pink "
"flesh revealed inside the crisp green skin.\n"
::$set_decay_speed::10800
::$set_piece_short::"segment"
::weight::40+random(40)
::weight per bite::5
::value::2000


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/food/fruits/small_fig.food ===
::name::"fig"
::short::"small ripe fig"
::adjective::({ "small", "ripe" })
::alias:: "fruit"
::plural:: "fruits"
::long::"This is a small but sweet-looking fig.  It is very tempting to "
        "pry that tough peel open to expose the inner pulp.\n"
::Main Plural::"small ripe figs"
::weight::1
::medium alias::"FiGs"                 
::$set_weight_per_bite::1
::$setup_eat_piece_messages:: "$N peel$s the ripe fig carefully, "
        "place$s it in $p mouth and devour$s the red flesh greadily.\n",
        "piece",
        "$N peel$s the ripe fig carefully, "
        "place$s it in $p mouth and devour$s the red flesh greadily.\n"
::value::400


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/food/fruits/strawberry.food ===
::name::"strawberry"
::short::"ripe red strawberry"
::alias:: ({ "fruit", "berry" })
::plural:: ({ "fruits", "berries" })
::adjective::({ "ripe", "red", "plump" })
::long::"This fruit is plump and ripe, just ready for eating.  How"
" you wish you had some cream!\n"
::Main Plural::"strawberries"
::weight::1
::medium alias::"StRaWberries"                 
::$set_weight_per_bite::1


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/food/fruits/sweet_lime.food ===
::name::"lime"
::short::"sweet lime"
::long::"This is a spherical, golden-yellow, thick skinned fruit with "
        "juicy flesh.  Dare you eat it?\n"
::Main Plural::"small limes"
::adjective::({ "sweet", "orange", "yellow" })
::alias:: "fruit"
::plural:: "fruits"
::weight::2
::medium alias::"SweetLimes"                 
::$set_weight_per_bite::1
::$setup_eat_piece_messages:: "$N take$s a bite from the sweet "
        "lime and get$s surprised by its sweet taste.\n",
        "piece",
        "$N eat$s the last of the sweet lime and can't overcome the "
        "surprise.\n"
::piece description::"A half-moon shaped transparent skinned coated "
        "piece of a sweet lime.\n"
::value::750


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/food/seafood/cockle.food ===
::name::"cockle"
::short::"cockle"
::adjective::({ "fishy"})
::long::"Like a snail that lives under the sea, this is a cockle.  "
"It's salty and chewy.\n"
::Main Plural::"cockle"
::weight::1
::medium alias::"Cockles"                 
::$set_weight_per_bite::1


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/food/seafood/whelk.food ===
::name::"whelk"
::short::"whelk"
::adjective::({ "fishy"})
::long::"Like a snail that lives under the sea, this is a whelk.  "
"It's salty and chewy.\n"
::Main Plural::"whelk"
::weight::1
::medium alias::"whelks"                 
::$set_weight_per_bite::1


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/food/seafood/winkle.food ===
::name::"winkle"
::short::"winkle"
::adjective::({ "fishy"})
::long::"Like a snail that lives under the sea, this is a winkle.  "
"It's salty and chewy.\n"
::Main Plural::"winkle"
::weight::1
::medium alias::"winkles"                 
::$set_weight_per_bite::1


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/food/seafood/oyster.food ===
::name::"oyster"
::short::"oyster onna halfshell"
::adjective::({ "onna", "halfshell"})
::long::"These are supposed to be an aprhodisiac, you know...\n"
::Main Plural::"oysters"
::weight::2
::medium alias::"Oysters"                 
::$set_weight_per_bite::2


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/food/bakery/strawberry_cheese_cake.food ===
::name::"cake"
::short::"strawberry cheese cake"
::adjective::({ "strawberry", "cheese" })
::main plural::"strawberry cheese cakes"
::long::"This is a large cheese cake topped with layer upon "+
                "layer of slices of ripe strawberry.  Just looking at it "+
                "makes you start to dribble.\n"
::$setup_eat_piece_messages::
        "$N cram$s as much of the delicious stawberry "
        "cream cake into $p mouth as $r can.\n",
    "piece",
       "$N swallow$s the last piece of the stawberry cheese cake, "
       "savouring the delicious taste of ripe strawberries.\n"
::value::2500
::weight::10
::weight per bite::2


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/food/bakery/topfentascherl.food ===
::name::"pastry"
::short::"topfentascherl"
::long::"A round flat dough-cake, filled with "
                  "curd cheese.\n"
::alias::"flummery"
::alias::"topfentascherl"
::main plural::"topfentascherln"
::plural::"topfentascherln"
::weight::5
::weight per bite::1
::value::200

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/food/bakery/toast.food ===
# Toast 
# for the Alchemists' Guild
# by Foolish

::name::"toast"
::short::"slice of buttered toast"      
::adjective::({"slice", "of", "slices" , "buttered"})
::alias::({ "slice", "food" })
::$add_plural::"slices"
::main plural::"slices of buttered toast"
::long::"This is a slice of lightly toasted buttered "
        "white bread.  It would be hard to imagine this as an exciting "
        "food.\n"
::value::100
::weight::3 
::$set_weight_per_bite::1 

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/food/bakery/sticky_bun.food ===
::Name:: "bun"
::Short:: "sticky bun"
::Adjective:: ({ "sticky", })
::Long:: "Sticking to everything it touches and bulging with bits of "
    "fruit the baker put it in the dough, this sticky bun looks ready "
    "to be eaten.\n"
::Weight:: 6
::Weight per Bite:: 1


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/food/bakery/spider_biscuit.food ===
::name::"biscuit"
::short::"spider biscuit"
::adjective::"crispy"
::long::"This is a small, flat round biscuit with what appears to be a "
        "chocolate spider squashed on the top.\n"
::weight::20
::weight per bite::1

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/food/bakery/strawberry_cake.food ===
::name::"cake"
::short::"strawberry cake"
::adjective::"strawberry"
::long::"The white, soft moist cake with gobs of pink icing melts in your hands "
        "as well as in your mouth.\n"
::weight::20
::weight per bite::1


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/food/bakery/strawberry_donut_man.food ===
::name::"man"
::short::"strawberry donut man"
::adjective::({"strawberry", "donut"})
::long::"This is a donut in the shape of a man, "
"with vibrant pink icing.  He has M&M's for eyes "
"and \"Hundreds and Thousands\" on his arms and "
"feet.\n"
::weight::3
::weight per bite::1


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/food/chocolates/toffee.food ===
#
# A chocolate covered toffee
# by Carmine 29th October 2000
#
::#include:: "path.h"
::Name:: "toffee"
::Short:: "chocolate covered toffee"
::Plural:: "chocolate covered toffees"
::Alias:: ({ "chocolate", "chocolates" })
::Adjective:: ({ "chocolate", "covered" })
::Long:: "Somewhere within this casing of thick, mouth-wateringly rich "
     "chocolate is a soft, chewy toffee centre." 
::$add_eat_effect::  CHOCEFFECT, 60 
::Value:: 0
::Weight:: 1
::$set_decay_speed:: 0  


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/arm_modules/armour.ida ===
lowest_cond = map["lowest cond"];
cond = map["cond"];
if (map["worn"]) {
  held_in = map["worn"]-1;
  call_out("player_wear",0);
}
wear_effect = map[ "effect" ];
if ( map[ "immune" ] )
  immune_to = map[ "immune" ];


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/arm_modules/armour.des ===
if (worn_by) {
  worn_by->remove_armour(this_object());
  if (sizeof(wear_remove_func))
    call_other(wear_remove_func[0], wear_remove_func[1], 0);
}


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/arm_modules/armour.isa ===
if (map["ac"])
  ac = map["ac"];
if (map["armour types"])
  armour_types = map["armour_types"];
if (!undefinedp(map["max cond"]))
  max_cond = map["max cond"];
if (!undefinedp(map["damage chance"]))
  damage_chance = map["damage chance"];
if (map["type"])
  set_type(map["type"]);
if (map["wear remove func"])
  wear_remove_func = map["wear remove func"];
if (map["no limbs"])
  no_limbs = map["no limbs"];

