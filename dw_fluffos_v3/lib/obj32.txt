
=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/monster/godmother/magrat.c ===
inherit "/obj/monster";
#include <panic.h>
#include <armoury.h>
void finish_up();
int state, start_time, prodded;
object lost;
string safeplace;
void setup() {
  start_time = time();
  set_name("garlick");
  set_short("fairy godmother");
  add_alias("godmother");
  add_adjective("fairy");
  set_long( "In the realm of Fairy Godmothers, this one must certainly "
    "take honours in a Division Yet To Be Announced.  Grimly determined "
    "to do things properly, she has woven wild flowers in her "
    "windswept, golden locks, powdered her face to a fashionable pallor "
    "and has attired herself in numerous fluttering shawls, bangles, "
    "and a vivid green gown.  The overall effect is that of a maypole "
    "with a flower box emptied over its head that happens to jingle like "
    "a tinker's wagon with a broken wheel.  With one hand she clutches her "
    "regulation wand and with the other she dabs at her red and dripping "
    "nose with a damp scrap of lace.\n");
  set_race("human");
  set_guild("witch");
  set_level(200);
  set_gender(2);
  set_language("general");
  set_response_mon_understand_anything(1);
  add_property( "anchor", 1);
  ARMOURY->request_item("startling green dress", 100)->move( this_object() );
  ARMOURY->request_item("spiderweb shawl", 100)->move( this_object() );
  ARMOURY->request_item("pumps", 50)->move( this_object() );
  init_equip();
  add_respond_to_with(({ "yes" }), "#yes_response");
  add_respond_to_with(({ "@nod" }), "#yes_response");
  add_respond_to_with(({ "no" }), "#no_response");
  add_respond_to_with(({ "@shake" }), "#no_response");
}
void do_panic(object pl) {
  string home;
  string nationality;
  nationality = pl->query_nationality();
  if ( !nationality ) {
      queue_command( "say Oops.. you haven't got a nationality, I can't "
        "send you home!");
      finish_up();
      return;
  }
  home = nationality->query_default_start_location();
  safeplace = home->query_short();
  queue_command( "say Umm.  Hi.  You are lost?  Would you like me to get "
             "you back to " + safeplace + "?" );
  queue_command( "emote waves her wand around a bit." );
  tell_room(environment(),
            "A puff of smoke drifts away from where something else used to "
            "be.  Now residing there is a pumpkin.\n");
  ARMOURY->request_item("pumpkin", 100)->move(environment());
  queue_command( "say Whoops." );
  lost = pl;
  start_time = time();
  prodded = 0;
  call_out("do_prod", 30);
}
int query_waiting() { return time()-start_time; }
void yes_response(object ob) {
  if (ob != lost)
    return ;
  queue_command( "say Oh, ahhh.  Good." );
  queue_command( "peer wor" );
  tell_object( lost, the_short() + " waves her wand in your direction.\n");
  tell_room( environment(), the_short() + " waves her wand in " +
    lost->the_short() + "'s direction.\n", lost );
  PANIC_HANDLER->finish_panic(lost, PANIC_OK);
  ARMOURY->request_item("pumpkin", 100)->move(lost);
  ARMOURY->request_item("pumpkin", 100)->move(environment(lost));
  lost = 0;
}
void no_response(object ob) {
  if(ob != lost)
    return;
  queue_command( "say Oh, I must have got lost somewhere then." );
  queue_command( "wave" );
  queue_command( "say Oh dear." );
  ARMOURY->request_item("pumpkin", 100)->move(lost);
  ARMOURY->request_item("pumpkin", 100)->move(environment(lost));
  PANIC_HANDLER->finish_panic(lost, PANIC_NOT_OK);
  lost = 0;
}
void do_prod() {
  if(!lost)
    return;
  if (prodded < 3 ) {
    queue_command( "say Umm....so....what do you think?  Do you want "
      "my help?" );
    queue_command( "expect "+lost->query_name() );
    prodded ++ ;
    call_out("do_prod", 60);
  } else {
    queue_command( "say Oh well.  I guess it wasn't me you wanted after all" );
    queue_command( "sigh" );
    PANIC_HANDLER->finish_panic(lost, PANIC_NOT_OK);
    lost = 0;
  }
}
void event_exit(object ob, string message, object to) {
    if (ob == lost) {
    queue_command( "say Bye..." );
    queue_command( "wave" );
    queue_command( "say Whoops." );
    queue_command( "tell "+lost->query_name()+" Sorry to have bothered you." );
    PANIC_HANDLER->finish_panic(lost, PANIC_NOT_OK);
    ARMOURY->request_item("pumpkin", 100)->move(environment(lost));
    lost = 0;
  }
}
void hurry_up() {
  if (!lost) {
    queue_command( "blink twice" );
    queue_command( "say I guess my help wasn't wanted, then..." );
    PANIC_HANDLER->finish_panic(lost, PANIC_NOT_OK);
    lost = 0;
  }
  else do_prod();
}
void event_fight_in_progress(object attacker, object attackee) {
  if (attackee == this_object()) {
    queue_command( "say Look, this is really not very nice." );
    queue_command( "frown" );
    queue_command( "say I know the art of self defence you know!" );
    set_hp(query_max_hp(), attacker);
    attackee->adjust_tmp_str(-2);
    attackee->adjust_tmp_dex(-2);
    attackee->adjust_tmp_wis(-2);
    attackee->adjust_tmp_int(-2);
    attackee->adjust_tmp_con(-2);
    attackee->add_property("attacked godmother", time());
    PANIC_HANDLER->finish_panic(lost, PANIC_NOT_OK);
    lost = 0;
  }
}
void finish_up() {
  queue_command( "shuffle" );
  queue_command( "say Umm.  I have to go." );
  queue_command( "smile appol" );
  queue_command( "wave" );
  PANIC_HANDLER->finish_panic(lost, PANIC_NOT_OK);
  lost = 0;
}
void dest_me() {
  if (lost) {
    PANIC_HANDLER->finish_panic(lost, PANIC_NOT_OK);
    lost = 0;
  }
  ::dest_me();
}
int unambushable() {
    return 1;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/monster/transport/horse.c ===
#include <npc/transport.h>
inherit "/obj/monster/transport/horse_base";
void setup() {
   set_race("horse");
   set_level(20);
   set_name("horse");
   set_gender( query_mount_gender() );
   set_long( "A nice dark dashing horse, " + query_pronoun() + " looks "
             "strong and happy as its brown eyes stare into your own.\n" );
   set_inside_long( "You can see the horses hair and ear's flicking at the "
                    "slightest sounds.  The smell of horse is quite "
                    "strong.\n" );
   set_value(40000 * 10);
   set_maximum_speed(RIDE_GALLOP);
   set_transport_type("horse");
   set_default_mount_difficulty(100);
   set_default_direction_difficulty(100);
   set_wander_time( 40 + random(10) );
   set_transport_speed(2);
   set_maximum_exhaustion(300);
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/monster/transport/camel.c ===
#include <npc/transport.h>
inherit "/obj/monster/transport/camel_base";
void setup() {
   set_race("camel");
   set_level(20);
   set_name("camel");
   set_long( "A ratty old camel with seemingly more knees than it should "
             "have.\n");
   set_inside_long( "Nothing smells worse than a camel.  Not even something "
                    "from Dibbler's tray.\n");
   set_value(40000 * 12);
   set_maximum_speed(RIDE_GALLOP);
   set_transport_type( "camel" );
   set_default_mount_difficulty(150);
   set_default_direction_difficulty(150);
   set_wander_time( 60 + random(20) );
   set_gender( 1 + random(2) );
   set_transport_speed(1);
   set_maximum_exhaustion(400);
  set_transport_colour("off-yellow");
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/monster/transport/warhorse.c ===
#include <npc/transport.h>
inherit "/obj/monster/transport/horse_base";
void setup() {
   set_race("horse");
   set_level(50);
   set_name("horse");
   add_adjective("war");
   set_gender( query_mount_gender() );
   set_long( "This horse has an air of calmness about " + query_objective() + ", "
             + query_pronoun() + " just stands there and looks very calm.\n" );
   set_inside_long( "You can see the horses mane and " + query_objective() + " "
                    "looking calmly as possible into the distance.\n");
   set_value(40000 * 10);
   set_maximum_speed(RIDE_GALLOP);
   set_transport_type("horse");
   set_default_mount_difficulty(100);
   set_default_direction_difficulty(20);
   set_wander_time( 50 + random(10) );
   set_transport_speed(3);
   set_maximum_exhaustion(600);
   adjust_bonus_str(5);
   adjust_bonus_con(5);
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/monster/transport/camel_base.c ===
#include <npc/transport.h>
#include <broadcaster.h>
inherit TRANSPORT_INHERIT;
private int _quiet;
void set_quiet( int quiet ) {
   _quiet = quiet;
}
int query_quiet() {
   return _quiet;
}
void hear_name( object player, string mess ) {
   string *bits;
   string str;
   int allowed;
   if ( !player ) {
      return ;
   }
   if ( is_allowed_to_use( player->query_name() ) ) {
      bits = explode( mess, " " ) - ({ "" });
      foreach ( str in bits ) {
         switch ( str ) {
         case "follow" :
            do_command( "follow " + player->query_name() );
            break;
         case "stop" :
            do_command( "unfollow " + player->query_name() );
            break;
         case "stay" :
            do_command( "unfollow all" );
            break;
         case "quiet" :
            set_quiet(1);
            break;
         case "speak" :
         case "talk" :
            set_quiet(0);
            break;
         }
      }
      allowed = 1;
   }
   if ( !query_quiet() ) {
      if ( allowed ) {
        if( player->query_visible( this_object() ) )
          do_command( "slook " + player->query_name() );
      }
      switch ( random(3) ) {
      case 0:
         do_command( "spit" );
         break;
      case 1:
         do_command( ":ruminates." );
         break;
      case 2:
         do_command( ":looks thoughtful." );
         break;
      }
   }
}
void event_person_shout( object thing, string start, string mess, string lang,
                         int *co_ord, int range ) {
   if ( !environment() )
      return;
   if ( environment()->query_property( "shout zone" ) !=
        environment( this_player() )->query_property( "shout zone" ) ||
        !thing ) {
      return;
   }
   mess = lower_case( mess );
   if ( is_allowed_to_use( thing->query_name() ) ) {
      if ( strsrch( mess, lower_case( query_transport_name() ) )  != -1 ) {
         if (strsrch( mess, "come here" ) != -1) {
            if ( !query_quiet() ) {
               do_command( "grumble" );
            }
            add_effect( "/std/effects/npc/goto_destination",
                        environment(thing) );
         }
      }
   }
}
mapping query_dynamic_auto_load() {
   return ([ "::" : ::query_dynamic_auto_load(),
             "quiet" : query_quiet() ]);
}
void setup_responses() {
  add_respond_to_with( explode(
                       lower_case( query_transport_base_name() ), " " ),
                       (: hear_name :) );
  BROADCASTER->npc_hear_shouts( this_object() );
}
void init_dynamic_arg( mapping map ) {
   ::init_dynamic_arg( map["::"] );
   if ( map["quiet"] ) {
      set_quiet( map["quiet"] );
   }
   if ( query_transport_name() ) {
      setup_responses();
      set_short( query_transport_name() );
      add_adjective( explode( lower_case( query_transport_name() ), " " )
                     - ({ "the" }) );
      add_property( "determinate", "" );
      add_alias( explode( lower_case( query_transport_name() ), " " )
                 - ({ "the" }) );
   }
}
int do_name( string name ) {
   if ( ::do_name( name ) ) {
      setup_responses();
      set_short( query_transport_name() );
      return 1;
   }
   return 0;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/monster/transport/horse_base.c ===
#include <npc/transport.h>
#include <broadcaster.h>
inherit TRANSPORT_INHERIT;
private int _quiet;
void set_quiet( int quiet ) {
   _quiet = quiet;
}
int query_quiet() {
   return _quiet;
}
void hear_name( object player, string mess ) {
   string *bits;
   string str;
   int allowed;
   if ( !player ) {
      return ;
   }
   if ( is_allowed_to_use( player->query_name() ) ) {
      bits = explode( mess, " " ) - ({ "" });
      foreach ( str in bits ) {
         switch ( str ) {
         case "follow" :
            do_command( "follow " + player->query_name() );
            break;
         case "stop" :
            do_command( "unfollow " + player->query_name() );
            break;
         case "stay" :
            do_command( "unfollow all" );
            break;
         case "quiet" :
            set_quiet(1);
            break;
         case "speak" :
         case "talk" :
            set_quiet(0);
            break;
         }
      }
      allowed = 1;
   }
   if ( !query_quiet() ) {
      if ( allowed ) {
         do_command( "nuzzle " + player->query_name() );
      }
      switch ( random(3) ) {
      case 0:
         do_command( "whicker" );
         break;
      case 1:
         do_command( "nicker" );
         break;
      case 2:
         do_command( "whinny" );
         break;
      }
   }
}
void event_person_shout( object thing, string start, string mess, string lang,
                         int *co_ord, int range ) {
   if( !environment() )
    return;
   if ( environment()->query_property( "shout zone" ) !=
        environment( this_player() )->query_property( "shout zone" ) ||
        !thing ) {
      return;
   }
   mess = lower_case( mess );
   if ( is_allowed_to_use( thing->query_name() ) ) {
      if ( strsrch( mess, lower_case( query_transport_name() ) )  != -1 ) {
         if (strsrch( mess, "come here" ) != -1) {
            if ( !query_quiet() ) {
               do_command( "whicker" );
            }
            add_effect( "/std/effects/npc/goto_destination",
                        environment(thing) );
         }
      }
   }
}
mapping query_dynamic_auto_load() {
   return ([ "::" : ::query_dynamic_auto_load(),
             "quiet" : query_quiet() ]);
}
void setup_responses() {
  add_respond_to_with( explode(
                       lower_case( query_transport_base_name() ), " " ),
                       (: hear_name :) );
  BROADCASTER->npc_hear_shouts( this_object() );
}
void init_dynamic_arg( mapping map, object ob ) {
   ::init_dynamic_arg( map["::"] );
   if ( map["quiet"] ) {
      set_quiet( map["quiet"] );
   }
}
int do_name( string name ) {
   if ( ::do_name( name ) ) {
      setup_responses();
      return 1;
   }
   return 0;
}
