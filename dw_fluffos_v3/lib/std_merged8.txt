
==================================================
FILE: races/reptile_base.c
==================================================

inherit "/std/races/base";
void create() {
   do_setup++;
   ::create();
   do_setup--;
   set_desc( "your standard reptile.  This should not be used as it is a "
      "base race" );
   bits = ({
      "head", "head", ({ 0, 50, 0,
         "left eye", "right eye", "skull", "tongue", "snout" }),
      "left eye", "eye", ({ "head", 2, 0 }),
      "right eye", "eye", ({ "head", 2, 0 }),
      "skull", "skull", ({ "head", 50, 0, "brain", "teeth" }),
      "brain", "brain", ({ "skull", 25, 0 }),
      "teeth", "teeth", ({ "skull", 5, ({"/std/bit_set", 1}), "tooth" }),
      "tooth", "tooth", ({ "teeth", 1, ({"/std/bit", 48}) }),
      "tongue", "tongue", ({ "head", 10, 0 }),
      "snout", "snout", ({ "head", 10, 0 }),
      "neck", "neck", ({ 0, 50, 0 }),
      "torso", "body", ({ 0, 400, 0,
         "heart", "liver", "left kidney", "right kidney", "left lung",
         "right lung", "spleen", "intestine", "pancreas" }),
      "heart", "heart", ({ "torso", 15, 0 }),
      "liver", "liver", ({ "torso", 15, 0 }),
      "left kidney", "kidney", ({ "torso", 10, 0 }),
      "right kidney", "kidney", ({ "torso", 10, 0 }),
      "left lung", "lung", ({ "torso", 15, 0 }),
      "right lung", "lung", ({ "torso", 15, 0 }),
      "spleen", "spleen", ({ "torso", 10, 0 }),
      "intestine", "gut", ({ "torso", 100, 0 }),
      "pancreas", "pancreas", ({ "torso", 10, 0 }),
      "left front leg", "leg", ({ 0, 180, 0, "left front foot" }),
      "left front foot", "foot", ({ "left front leg", 27, 0 }),
      "right front leg", "leg", ({ 0, 180, 0, "right front foot" }),
      "right front foot", "foot", ({ "right front leg", 27, 0 }),
      "left rear leg", "leg", ({ 0, 180, 0, "left rear foot" }),
      "left rear foot", "foot", ({ "left rear leg", 27, 0 }),
      "right rear leg", "leg", ({ 0, 180, 0, "right rear foot" }),
      "right rear foot", "foot", ({ "right rear leg", 27, 0 }),
      "tail", "tail", ({ 0, 100, 0 }),
      "skin", "skin", ({ 0, 175, 0 })
   });
   inedible = ({ "skull", "left front foot", "right front foot",
      "left rear foot", "right rear foot", "tail", "teeth", "tooth",
      "skin" });
   unrottable = ({ "skull", "teeth", "tooth" });
   set_skin( "scales" );
   if( !do_setup )
      this_object()->setup();
}

==================================================
FILE: races/rodent.c
==================================================

inherit "/std/races/rodent_base";
void setup() {
   set_name( "rodent" );
   set_long( "A generic rodent object.\n" );
   set_height( 10 );
   set_weight( 10 );
   set_desc( "a small rodent" );
   set_stats( ({ -4, 8, -4, -4, -6 }) );
}
void new_set_level( mixed *args ) {
   int level;
   object thing;
   if( sizeof(args) < 2 || !args[1] )
      return;
   level = args[ 0 ];
   thing = args[ 1 ];
   level = 1 + ( 2 * args[ 0 ] + random( level ) ) / 10;
   thing->add_ac( "blunt", "blunt", level );
   thing->add_ac( "sharp", "sharp", 2 + level );
   thing->add_ac( "pierce", "pierce", 2 * level );
}
void set_unarmed_attacks( object thing ) {
   int number;
   number = (int)thing->query_skill_bonus( "fighting.combat.melee.unarmed" );
   number = sqrt( number );
   thing->remove_attack( "hands" );
   thing->remove_attack( "feet" );
   thing->remove_attack( "bite" );
   thing->add_attack( "bite", 100, ({ number, 5, number }),
      "pierce", "unarmed", 0 );
   thing->tactics( "response dodge" );
}

==================================================
FILE: races/rodent_base.c
==================================================

inherit "/std/races/base";
void create() {
   do_setup++;
   ::create();
   do_setup--;
   set_desc( "a generic rodent.  It shouldn't be used since this is just a "
      "base race" );
   bits = ({
      "head", "head", ({ 0, 40, 0,
         "left eye", "right eye", "left ear", "right ear", "skull" }),
      "left eye", "eye", ({ "head", 1, 0 }),
      "right eye", "eye", ({ "head", 1, 0 }),
      "left ear", "ear", ({ "head", 10, 0 }),
      "right ear", "ear", ({ "head", 10, 0 }),
      "skull", "skull", ({ "head", 20, 0, "brain", "teeth" }),
      "brain", "brain", ({ "skull", 10, 0 }),
      "teeth", "teeth", ({ "skull", 5, ({"/std/bit_set", 1}), "tooth" }),
      "tooth", "tooth", ({ "teeth", 1, ({"/std/bit", 20}) }),
      "torso", "torso", ({ 0, 600, 0,
         "heart", "liver", "left kidney", "right kidney", "spleen",
         "right lung", "left lung", "intestine" }),
      "heart", "heart", ({ "torso", 15, 0 }),
      "liver", "liver", ({ "torso", 15, 0 }),
      "left kidney", "kidney", ({ "torso", 10, 0 }),
      "right kidney", "kidney", ({ "torso", 10, 0 }),
      "spleen", "spleen", ({ "torso", 10, 0 }),
        "left lung", "lung", ({ "torso", 16, 0 }),
      "right lung", "lung", ({ "torso", 15, 0 }),
      "intestine", "gut", ({ "torso", 100, 0 }),
      "genitalia", "genitalia", ({ 0, 5, 0 }),
      "left front leg", "leg", ({ 0, 100, 0, "left front paw" }),
      "left front paw", "paw", ({ "left front leg", 30, 0 }),
      "right front leg", "leg", ({ 0, 100, 0, "right front paw" }),
      "right front paw", "paw", ({ "right front leg", 30, 0 }),
      "left rear leg", "leg", ({ 0, 100, 0, "left rear paw" }),
      "left rear paw", "paw", ({ "left rear leg", 30, 0 }),
      "right rear leg", "leg", ({ 0, 100, 0, "right rear paw" }),
      "right rear paw", "paw", ({ "right rear leg", 30, 0 }),
      "tail", "tail", ({ 0, 25, 0 }),
      "skin", "skin", ({ 0, 175, 0 })
   });
   inedible = ({ "skull", "teeth", "tooth", "tail", "skin" });
   unrottable = ({ "skull", "teeth", "tooth" });
   set_skin( "fur" );
   if( !do_setup )
      this_object()->setup();
}

==================================================
FILE: races/ruminant.c
==================================================

inherit "/std/races/base";
void create() {
   do_setup++;
   ::create();
   do_setup--;
   set_weight( 800 );
   set_height( 50 );
   set_desc( "a four-legged ruminant.  It shouldn't be used since this is "
      "just a base race" );
   bits = ({
      "head", "head", ({ 0, 100, 0,
         "left eye", "right eye", "nose", "skull", "tongue", "left ear",
         "right ear" }),
      "left eye", "eye", ({ "head", 2, 0 }),
      "right eye", "eye", ({ "head", 2, 0 }),
      "skull", "skull", ({ "head", 40, 0, "brain", "teeth" }),
      "brain", "brain", ({ "skull", 20, 0 }),
      "left ear", "ear", ({"head", 5, 0 }),
      "right ear", "ear", ({"head", 5, 0 }),
      "nose", "nose", ({ "head", 15, 0 }),
      "teeth", "teeth", ({ "skull", 5, ({"/std/bit_set", 1}), "tooth" }),
      "tooth", "tooth", ({ "teeth", 1, ({"/std/bit", 18}) }),
      "tongue", "tongue", ({ "head", 10, 0 }),
      "neck", "neck", ({ 0, 100, 0 }),
      "torso", "chest", ({ 0, 300, 0,
         "heart", "liver", "left kidney", "right kidney", "left lung",
         "right lung", "spleen", "first stomach", "second stomach",
         "third stomach", "fourth stomach", "intestine", "pancreas" }),
      "heart", "heart", ({ "torso", 15, 0 }),
      "liver", "liver", ({ "torso", 15, 0 }),
      "left kidney", "kidney", ({ "torso", 10, 0 }),
      "right kidney", "kidney", ({ "torso", 10, 0 }),
      "left lung", "lung", ({ "torso", 15, 0 }),
      "right lung", "lung", ({ "torso", 15, 0 }),
      "spleen", "spleen", ({ "torso", 10, 0 }),
      "intestine", "gut", ({ "torso", 50, 0 }),
      "pancreas", "pancreas", ({ "torso", 10, 0 }),
      "first stomach", "stomach", ({ "torso", 20, 0 }),
      "second stomach", "stomach", ({ "torso", 20, 0 }),
      "third stomach", "stomach", ({ "torso", 20, 0 }),
      "fourth stomach", "stomach", ({ "torso", 20, 0 }),
      "genitals", "genitals", ({ 0, 5, 0 }),
      "left front leg", "leg", ({ 0, 150, 0, "left front hoof" }),
      "left front hoof", "hoof", ({ "left front leg", 30, 0 }),
      "right front leg", "leg", ({ 0, 150, 0, "right front hoof" }),
      "right front hoof", "hoof", ({ "right front leg", 30, 0 }),
      "left rear leg", "leg", ({ 0, 150, 0, "left rear hoof" }),
      "left rear hoof", "hoof", ({ "left rear leg", 30, 0 }),
      "right rear leg", "leg", ({ 0, 150, 0, "right rear hoof" }),
      "right rear hoof", "hoof", ({ "right rear leg", 30, 0 }),
      "skin", "skin", ({ 0, 175, 0 })
   });
   inedible = ({ "skull", "neck", "genitals", "teeth", "left front hoof",
      "right front hoof", "left rear hoof", "right rear hoof", "tooth",
      "skin" });
   unrottable = ({ "skull", "teeth", "tooth" });
   set_skin( "hide" );
   set_stats( ({ 0, 0, -4, 2, -6 }) );
   if( !do_setup )
      this_object()->setup();
}
string *query_target_zones() {
  return ({ "head", "head", "neck",
              "chest", "back", "back", "back", "lower back",
              "left front leg", "left front leg", "left front hoof",
              "stomach", "stomach", "tail",
              "right front leg", "right front leg", "right front hoof",
              "left rear leg", "left rear leg", "left rear hoof",
              "right rear leg", "right rear leg", "right rear hoof"});
}
string map_target_zone(string zone) {
  switch(zone) {
  case "chest":
    return random(4) ? "back" : "chest";
  case "abdomen":
    return random(4) ? "stomach" : "lower back";
  case "arms":
    return (random(2) ? "left " : "right ") + "front leg";
  case "hands":
    return (random(2) ? "left " : "right ") + "front hoof";
  case "legs":
    return (random(2) ? "left " : "right ") + "rear leg";
  case "feet":
    return (random(2) ? "left " :"right ") + "rear hoof";
  default:
    return zone;
  }
}

==================================================
FILE: races/scorpion.c
==================================================

#define POISON_EFFECT "/std/effects/poisons/spider_venom"
inherit "/std/races/arachnid";
void poison( int damage, object him, object me, string atype, string aname );
void setup() {
   set_name( "scorpion" );
   set_long( "A nasty little poisonous creature, of the arachnid family.\n" );
   set_height( 5 );
   set_weight( 2 );
   set_desc( "a nasty little poisonous creature, of the arachnid family" );
   bits = ({
      "head", "head", ({ 0, 200, 0,
           "left eye", "right eye", "mandible", "brain" }),
      "left eye", "eye", ({ "head", 10, 0 }),
      "right eye", "eye", ({ "head", 10, 0 }),
      "mandible", "mouth", ({ "head", 50, 0 }),
      "brain", "brain", ({ "head", 25, 0 }),
      "thorax", "thorax", ({ 0, 500, 0, "heart", "poison sac" }),
      "heart", "heart", ({ "thorax", 50, 0 }),
      "poison sac", "sac", ({ "thorax", 50, 0 }),
      "tail", "tail", ({ 0, 300, 0, "sting" }),
      "sting", "sting", ({ "tail", 25, 0 }),
      "left claw", "claw", ({ 0, 100, 0 }),
      "right claw", "claw", ({ 0, 100, 0 }),
      "left front leg", "leg", ({ 0, 50, 0 }),
      "left middle leg", "leg", ({ 0, 50, 0 }),
      "left back leg", "leg", ({ 0, 50, 0 }),
      "right front leg", "leg", ({ 0, 50, 0 }),
      "right middle leg", "leg", ({ 0, 50, 0 }),
      "right back leg", "leg", ({ 0, 50, 0 })
   });
   inedible = ({ "mandible", "left claw", "right claw" });
   unrottable = ({ "mandible", "left claw", "right claw" });
   set_stats( ({ -6, 4, -6, -6, -6 }) );
}
void new_set_level( mixed *args ) {
   int level;
   object thing;
   if( sizeof(args) < 2 || !args[1] )
      return;
   level = args[ 0 ];
   thing = args[ 1 ];
   thing->add_skill_level( "other.health", level * 3 );
   thing->add_ac( "blunt", "blunt", level / 2 );
   thing->add_ac( "pierce", "pierce", level / 4 );
   thing->add_ac( "sharp", "sharp", level / 3 );
   thing->add_ac( "fire", "fire", level );
}
int query_dark( int light ) { return 0; }
void set_unarmed_attacks( object thing ) {
   int number;
   number = (int)thing->query_skill_bonus( "fighting.combat.melee.unarmed" );
   number = 4 + sqrt( number );
   thing->remove_attack( "hands" );
   thing->remove_attack( "feet" );
   thing->remove_attack( "poison" );
   thing->remove_attack( "bite" );
   thing->add_attack( "sting", 70, ({ 5 * number, 10, number }),
      "pierce", "unarmed", ({ "poison", this_object() }) );
   thing->add_attack( "bite",  20, ({ 3 * number, 10, number }),
      "pierce", "unarmed", 0 );
   thing->add_attack_message( "sting", "pierce", ({
      0, "$N sting$s $P $z.\n" }) );
   thing->tactics( "response dodge" );
}
void poison( int damage, object him, object me, string a_type,
             string a_name ) {
   tell_object( me, "You stab " + him->one_short() + " with your tail, "
      "injecting " + him->query_objective() + " with venom.\n" );
   tell_object( him, me->one_short() + " stabs you with " +
      me->query_possessive() + " tail!  You seethe in agony.\n" );
   tell_room( environment( me ), me->one_short() + " visciously stabs " +
      him->one_short() + " with " + me->query_possessive() + " tail!  " +
      him->one_short() + " seethes in agony.\n", ({ me, him }) );
   him->add_effect( POISON_EFFECT, 100 );
}

==================================================
FILE: races/shark.c
==================================================

inherit "/std/races/fish_base";
void setup() {
   set_name( "shark" );
   set_long( "A big mean shark.\n" );
   set_height( 15 );
   set_weight( 8000 );
   set_desc( "a fish, the kind with fins" );
   set_stats( ({ 10, 14, 2, 21, -4 }) );
}
void check_water( object player ) {
   if( player && !environment( player )->query_water() )
      call_out( "do_drown", 4, player );
}
void do_drown( object player ) {
   int i;
  if(!player || !environment(player) || environment(player)->query_water() )
      return;
   tell_room( environment( player ) , player->one_short() + " gasps for "
      "air.\n" );
   i = player->query_max_hp() / 5;
   if( i < 20 ) i = 20;
   player->adjust_hp( -i );
   call_out( "do_drown", 4, player );
}
void start_player( object thing ) {
   ::start_player( thing );
   thing->add_property( "gills", 1 );
   thing->add_enter_commands( (: check_water :) );
   thing->set_default_position( ({ "lying" }) );
   thing->return_to_default_position( 0 );
}
void set_unarmed_attacks( object thing ) {
   int number;
   number = (int)thing->query_skill_bonus( "fighting.combat.melee.unarmed" );
   number = 4 + sqrt( number ) * 2;
   thing->remove_attack( "hands" );
   thing->remove_attack( "feet" );
   thing->remove_attack( "bite" );
   thing->add_attack( "bite", 100, ({ 2 * number, 5, number }),
      "pierce", "unarmed", 0 );
   thing->tactics( "response dodge" );
}

==================================================
FILE: races/sheep.c
==================================================

inherit "/std/races/ruminant";
void setup() {
   set_name( "sheep" );
   set_long( "The sheep is a wooly mammal.  It is possibly the most stupid "
      "animal in the universe, with the possible exception of the duck.\n" );
   set_height( 50 );
   set_weight( 800 );
   set_skin( "fleece" );
   set_desc( "a wooly sheep" );
   add_ac( "blunt", "blunt", 50 );
   add_ac( "pierce", "pierce", 20 );
   add_ac( "sharp", "sharp", 20 );
   set_stats( ({ 0, 0, -6, -2, -6 }) );
}
void set_unarmed_attacks( object thing ) {
   thing->remove_attack( "hands" );
   thing->remove_attack( "feet" );
   thing->remove_attack( "standard" );
   thing->remove_attack( "chew" );
   thing->remove_attack( "hoof" );
   thing->add_attack( "chew", 50, ({ 40, 8, 10 }),
      "sharp", "unarmed", 0 );
   thing->add_attack( "hoof", 50, ({ 60, 10, 40 }),
      "blunt", "unarmed", 0 );
   thing->tactics( "response dodge" );
}

==================================================
FILE: races/skunk.c
==================================================

inherit "/std/races/mustelidae_base";
void setup() {
   set_name( "skunk" );
   set_long( "A small black and white animal.\n" );
   set_height( 15 );
   set_weight( 30 );
   set_desc( "small brown meateater" );
   set_stats( ({ -2, 8, -2, -4, -4 }) );
}
void new_set_level( mixed *args ) {
   int level;
   object thing;
   if( sizeof(args) < 2 || !args[1] )
      return;
   level = args[ 0 ];
   thing = args[ 1 ];
   level = 1 + ( 2 * level + random( level ) ) / 8;
   thing->add_ac( "blunt", "blunt", 20 + level / 3 );
   thing->add_ac( "sharp", "sharp", 50 + level );
   thing->add_ac( "pierce", "pierce", 60 + 2 * level );
}
void set_unarmed_attacks( object thing ) {
   int number;
   number = (int)thing->query_skill_bonus( "fighting.combat.melee.unarmed" );
   number = 4 + sqrt( number ) / 2;
   thing->remove_attack( "hands" );
   thing->remove_attack( "feet" );
   thing->remove_attack( "claws" );
   thing->remove_attack( "bite" );
   thing->add_attack( "claws", 50, ({ ( 4 * number ) / 2, 8, 2 * number }),
      "sharp", "unarmed", 0 );
   thing->add_attack( "bite", 100, ({ 2 * number, 10, ( 3 * number ) / 2 }),
      "pierce", "unarmed", 0  );
   thing->tactics( "response dodge" );
}

==================================================
FILE: races/snake.c
==================================================

inherit "/std/races/reptile_base";
void setup() {
   set_name( "snake" );
   set_long( "Snake, Serpent, Legless thingy that crawls on its belly all "
      "day long.\n" );
   set_height( 5 );
   set_weight( 60 );
   set_desc( "a serpent, the type with no legs but with scales." );
   bits = ({
      "head", "head", ({ 0, 50, 0,
         "left eye", "right eye", "poison sac", "tongue", "skull" }),
      "left eye", "eye", ({ "head", 5, 0 }),
      "right eye", "eye", ({ "head", 5, 0 }),
      "poison sac", "sac", ({ "head", 10, 0 }),
      "skull", "skull", ({ "head", 40, 0, "tooth", "brain" }),
      "tooth", "tooth", ({ "skull", 5, ({"/std/bit", 2}) }),
      "brain", "brain", ({ "skull", 10, 0 }),
      "torso", "torso", ({ 0, 600, 0,
         "heart", "liver", "left kidney", "right kidney", "spleen",
         "bladder", "intestine" }),
      "heart", "heart", ({ "torso", 20, 0 }),
      "liver", "liver", ({ "torso", 20, 0 }),
      "left lung", "lung", ({ "torso", 20, 0 }),
      "right lung", "lung", ({ "torso", 20, 0 }),
      "left kidney", "kidney", ({ "torso", 10, 0 }),
      "right kidney", "kidney", ({ "torso", 10, 0 }),
      "spleen", "spleen", ({ "torso", 10, 0 }),
      "bladder", "bladder", ({ "torso", 10, 0 }),
      "intestine", "gut", ({ "torso", 100, 0 }),
      "genitals", "genitals", ({ 0, 5, 0 }),
      "tail", "tail", ({ 0, 500, 0 }),
      "skin", "skin", ({ 0, 175, 0 })
   });
   inedible = ({ "poison sac", "tooth" });
   unrottable = ({ "tooth" });
   add_ac( "blunt", "blunt", 40 );
   add_ac( "sharp", "sharp", 20 );
   add_ac( "pierce", "pierce", 10 );
   set_stats( ({ 0, 0, -4, 4, -4 }) );
}
void set_unarmed_attacks( object thing ) {
   int number;
   number = (int)thing->query_skill_bonus( "fighting.combat.melee.unarmed" );
   number = sqrt( number );
   thing->remove_attack( "hands" );
   thing->remove_attack( "feet" );
   thing->remove_attack( "bite" );
   thing->remove_attack( "crush" );
   thing->add_attack( "bite", 75, ({ ( 3 * number ) / 2, 5, number * 2 }),
      "pierce", "unarmed", 0 );
   thing->add_attack( "squeeze", 50, ({ 3 * number, 2, number }),
      "blunt", "unarmed", 0 );
   thing->add_attack_message( "squeeze", "unarmed", ({
     0, "$N attempt$s to wrap $oself around $P $z",
      40, "$N wrap$s $oself around $P $z and squeeze$s",
      80, "$N wrap$s $oself tightly around $P $z and squeeze$s",
      120, "$N wrap$s $oself tightly around $P $z and squeeze$s firmly",
      160, "$N wrap$s $oself around $P $z and squeeze$s tightly, crushing "
           "$I in $p grip",
      0, "$N wrap$s tightly around $I and crush$es $I to a pulp" }) );
   thing->tactics( "response dodge" );
}
string *query_target_zones() {
  return ({ "head", "body", "body", "body", "tail", "tail", "tail" });
}
string map_target_zone(string zone) {
  switch(zone) {
  case "head":
    return "head";
  case "neck":
  case "chest":
    return "body";
  default:
    return "tail";
  }
}

==================================================
FILE: races/spider.c
==================================================

#define POISON_EFFECT "/std/effects/poisons/spider_venom"
inherit "/std/races/arachnid";
void setup() {
   set_name( "spider" );
   set_long( "A small, poisonous, hairy spider.\n" );
   set_desc( "a hairy arachnid" );
   set_height( 5 );
   set_weight( 2 );
   add_bit( "silk gland", "gland", ({ "abdomen", 10,
      ({"/std/bit", 1, 400}) }) );
   add_bit( "poison gland", "gland", ({ "cephalothorax", 5,
      ({"/std/bit", 1, 400}) }) );
   inedible += ({ "poison gland" });
   set_stats( ({ -6, 4, -6, -6, -6 }) );
}
void new_set_level( mixed *args ) {
   int level;
   object thing;
   if( sizeof(args) < 2 || !args[1] )
      return;
   level = args[ 0 ];
   thing = args[ 1 ];
   thing->add_skill_level( "other.health", level * 2 );
   thing->add_ac( "blunt", "blunt", level / 2 );
   thing->add_ac( "pierce", "pierce", level / 4 );
   thing->add_ac( "sharp", "sharp", level / 3 );
}
void set_unarmed_attacks( object thing ) {
   thing->remove_attack( "hands" );
   thing->remove_attack( "feet" );
   thing->remove_attack( "standard" );
   thing->remove_attack( "bite" );
   thing->remove_attack( "chew" );
   thing->add_attack( "bite", 80, ({ 10, 2, 5 }),
      "pierce", "unarmed", ({ "poison", this_object() }) );
   thing->add_attack( "chew", 100, ({ 2, 2, 10 }),
      "sharp", "unarmed", 0 );
   thing->tactics( "response dodge" );
}
void poison( int damage, object him, object me, string a_type,
             string a_name ) {
   tell_room( me->one_short() + " visciously sinks its fangs into " +
      him->one_short() + " who seethes in agony!\n" );
   tell_object( him, me->one_short() + " sinks its fangs into you!  You "
      "seethe in agony.\n" );
   him->add_effect( POISON_EFFECT, 100 );
}

==================================================
FILE: races/stoat.c
==================================================

inherit "/std/races/mustelidae_base";
void setup() {
   set_name( "stoat" );
   set_long( "A small black and white animal.\n" );
   set_height( 15 );
   set_weight( 30 );
   set_desc( "small brown meateater" );
   set_stats( ({ -2, 8, -2, -4, -4 }) );
}
void new_set_level( mixed *args ) {
   int level;
   object thing;
   if( sizeof(args) < 2 || !args[1] )
      return;
   level = args[ 0 ];
   thing = args[ 1 ];
   level = 1 + ( 2 * level + random( level ) ) / 8;
   thing->add_ac( "blunt", "blunt", 20 + level / 3 );
   thing->add_ac( "sharp", "sharp", 50 + level );
   thing->add_ac( "pierce", "pierce", 60 + 2 * level );
}
void set_unarmed_attacks( object thing ) {
   int number;
   number = (int)thing->query_skill_bonus( "fighting.combat.melee.unarmed" );
   number = 4 + sqrt( number ) / 2;
   thing->remove_attack( "hands" );
   thing->remove_attack( "feet" );
   thing->remove_attack( "claws" );
   thing->remove_attack( "bite" );
   thing->add_attack( "claws", 50, ({ ( 4 * number ) / 2, 8, 2 * number }),
      "sharp", "unarmed", 0 );
   thing->add_attack( "bite", 100, ({ 2 * number, 10, ( 3 * number ) /2 }),
      "pierce", "unarmed", 0 );
   thing->tactics( "response dodge" );
}

==================================================
FILE: races/toad.c
==================================================

inherit "/std/races/amphibian";
void setup() {
   set_name( "toad" );
   set_long( "Toads are amphibians" );
   set_height(10);
   set_weight(10);
   set_desc( "an warty toad" );
   add_ac( "blunt", "blunt", 5 );
   add_ac( "pierce", "pierce", 4 );
   add_ac( "sharp", "sharp", 3 );
   add_attack( "bite", 50, ({ 10, 2, 6 }) );
   set_sight( ({ 5, 20, 200, 300 }) );
   set_stats( ({ -4, 10, -4, -4, -6 }) );
}
void start_player( object thing ) {
   ::start_player( thing );
   thing->tactics( "response dodge" );
}

==================================================
FILE: races/tortoise.c
==================================================

inherit "/std/races/base";
void setup() {
   set_name( "tortoise" );
   set_long( "A tortoise.\n" );
   set_height( 40 );
   set_weight( 600 );
   set_desc( "a tortoise, slow and steady" );
   bits = ({
      "head", "head", ({ 0, 100, 0,
         "left eye", "right eye", "skull", "tongue" }),
      "left eye", "eye", ({ "head", 1, 0 }),
      "right eye", "eye", ({ "head", 1, 0 }),
      "skull", "skull", ({ "head", 50, 0, "brain" }),
      "beak", 0, ({ "skull", 20, 0 }),
      "brain", "brain", ({ "skull", 30, 0 }),
      "torso", "torso", ({ 0, 450, 0,
         "heart", "liver", "left kidney", "right kidney", "spleen",
         "right lung", "left lung", "intestine" }),
      "heart", "heart", ({ "torso", 20, 0 }),
      "liver", "liver", ({ "torso", 20, 0 }),
      "left kidney", "kidney", ({ "torso", 10, 0 }),
      "right kidney", "kidney", ({ "torso", 10, 0 }),
      "spleen", "spleen", ({ "torso", 10, 0 }),
      "right lung", "lung", ({ "torso", 20, 0 }),
      "left lung", "lung", ({ "torso", 20, 0 }),
      "intestine", "gut", ({ "torso", 50, 0 }),
      "genitals", "genitals", ({ 0, 5, 0 }),
      "left front leg", "leg", ({ 0, 150, 0, "left front claw" }),
      "left front claw", "claw", ({ "left front leg", 25, 0 }),
      "right front leg", "leg", ({ 0, 150, 0, "right front claw" }),
      "right front claw", "claw", ({ "right front leg", 25, 0 }),
      "left rear leg", "leg", ({ 0, 150, 0, "left rear claw" }),
      "left rear claw", "claw", ({ "left rear leg", 25, 0 }),
      "right rear leg", "leg", ({ 0, 150, 0, "right rear claw" }),
      "right rear claw", "claw", ({ "right rear leg", 25, 0 }),
      "tail", "tail", ({ 0, 25, 0 }),
      "shell", 0, ({ 0, 275, 0 })
   });
   inedible = ({ "skull", "beak", "shell" });
   unrottable = ({ "skull", "beak", "shell" });
   set_skin( "skin" );
   set_stats( ({ 2, 4, -2, 6, -4 }) );
}
void set_unarmed_attacks( object thing ) {
   int number;
   number = (int)thing->query_skill_bonus( "fighting.combat.melee.unarmed" );
   number = 4 + sqrt( number ) / 2;
   thing->remove_attack( "hands" );
   thing->remove_attack( "feet" );
   thing->remove_attack( "chew" );
   thing->remove_attack( "claws" );
   thing->add_attack( "chew", 100, ({ 3 * number, 0, number }),
      "sharp", "unarmed", 0 );
   thing->add_attack( "claws", 50, ({ ( 3 * number ) / 2, number, number }),
      "sharp", "unarmed", 0 );
   thing->tactics( "response dodge" );
}

==================================================
FILE: races/tree.c
==================================================

inherit "/std/races/tree_base";
void setup() {
   set_name( "tree" );
   set_long( "A tree.\n" );
   set_height( 800 );
   set_weight( 40000 );
   set_desc( "a large tree" );
   add_ac( "blunt", "blunt", 500 );
   add_ac( "sharp", "sharp", 50 );
   add_ac( "pierce", "pierce", 250 );
   add_ac( "fire", "fire", 100 );
   add_ac( "sound", "sound", 1000 );
   add_ac( "gas", "gas", 1000 );
   set_stats( ({ 10, -6, -2, 10, 4 }) );
}
void set_unarmed_attacks( object thing ) {
   int number;
   number = (int)thing->query_skill_bonus( "fighting.combat.melee.unarmed" );
   number = 2 + sqrt( number );
   thing->remove_attack( "hands" );
   thing->remove_attack( "feet" );
   thing->remove_attack( "branches" );
   thing->add_attack( "branches", 100, ({ number / 2, 10, number }),
      "blunt", "blunt", 0 );
   thing->add_attack_message( "branches", "blunt", ({
      0, "$N swing$s at $I with $p branches",
        20, "$N tap$s $I in the $z with $p branches",
        60, "$N hit$s $I in the $z with $p branches",
        100, "$N bruise$s $P $z with $p branches",
        140, "$N hit$s $I hard in the $z with $p branches",
        180, "$N smash$es $I in the $z with $p branches",
        220, "$N crush$es $P $z with $p branches",
        5000, "$N mash$es $P $z with $p branches" }));
   thing->set_unarmed_parry(1);
}
varargs int query_ac( string type, int damage, string zone, int amount ) {
   object attacker, weapon;
   if( ( type != "pierce" ) && ( type != "sharp" ) )
      return amount;
   attacker = (object)previous_object()->query_last_opponent();
   if( attacker ) {
      weapon = (object)attacker->query_last_weapon();
      if( weapon && ( weapon != attacker ) )
         if( !weapon->id( "axe" ) )
            weapon->adjust_cond( -(int)weapon->query_max_cond() / 20 );
   }
   return amount;
}

==================================================
FILE: races/tree_base.c
==================================================

inherit "/std/races/base";
void create() {
   do_setup++;
   ::create();
   do_setup--;
   set_desc( "your standard tree.  Shouldn't be used since this is a base "
      "race" );
   bits = ({
      "trunk", "trunk", ({ 0, 1000, 0 }),
      "branch", "branch", ({ 0, 20, ({"/std/bit", 20}) }),
      "root", "root", ({ 0, 20, ({"/std/bit", 10}) })
   });
   inedible = ({ "trunk", "branch", "root" });
   unrottable = ({ });
   set_skin( "bark" );
   if( !do_setup )
      this_object()->setup();
}
string *query_target_zones() {
  return ({ "branch", "branch", "branch", "branch", "branch",
            "branch", "branch", "branch", "branch", "branch",
              "trunk", "trunk", "trunk", "trunk", "trunk",
              "trunk", "trunk", "trunk", "trunk", "trunk",
              "base", "base", "base", "base", "root"});
}
string map_target_zone(string zone) {
  switch(zone) {
  case "chest":
  case "abdomen":
  case "back":
    return "trunk";
  case "hands":
  case "neck":
  case "head":
  case "arms":
  case "legs":
    return "branches";
  case "feet":
    return "root";
  }
}

==================================================
FILE: races/unknown.c
==================================================

inherit "/std/races/human";

==================================================
FILE: races/venomous_snake.c
==================================================

inherit "/std/races/reptile_base";
void setup() {
   set_name( "snake" );
   set_long( "Snake, Serpent, Legless thingy that crawls on its belly all "
      "day long.\n" );
   set_height( 5 );
   set_weight( 60 );
   set_desc( "a serpent, the type with no legs but with scales." );
   bits = ({
      "head", "head", ({ 0, 50, 0,
         "left eye", "right eye", "poison sac", "tongue", "skull" }),
      "left eye", "eye", ({ "head", 5, 0 }),
      "right eye", "eye", ({ "head", 5, 0 }),
      "poison sac", "sac", ({ "head", 10, 0 }),
      "skull", "skull", ({ "head", 40, 0, "tooth", "brain" }),
      "tooth", "tooth", ({ "skull", 5, ({"/std/bit", 2}) }),
      "brain", "brain", ({ "skull", 10, 0 }),
      "torso", "torso", ({ 0, 600, 0,
         "heart", "liver", "left kidney", "right kidney", "spleen",
         "bladder", "intestine" }),
      "heart", "heart", ({ "torso", 20, 0 }),
      "liver", "liver", ({ "torso", 20, 0 }),
      "left lung", "lung", ({ "torso", 20, 0 }),
      "right lung", "lung", ({ "torso", 20, 0 }),
      "left kidney", "kidney", ({ "torso", 10, 0 }),
      "right kidney", "kidney", ({ "torso", 10, 0 }),
      "spleen", "spleen", ({ "torso", 10, 0 }),
      "bladder", "bladder", ({ "torso", 10, 0 }),
      "intestine", "gut", ({ "torso", 100, 0 }),
      "genitals", "genitals", ({ 0, 5, 0 }),
      "tail", "tail", ({ 0, 500, 0 }),
      "skin", "skin", ({ 0, 175, 0 })
   });
   inedible = ({ "poison sac", "tooth" });
   unrottable = ({ "tooth" });
   add_ac( "blunt", "blunt", 40 );
   add_ac( "sharp", "sharp", 20 );
   add_ac( "pierce", "pierce", 10 );
   set_stats( ({ 0, 0, -4, 4, -4 }) );
}
void set_unarmed_attacks( object thing ) {
   int number;
   number = (int)thing->query_skill_bonus( "fighting.combat.melee.unarmed" );
   number = sqrt( number );
   thing->remove_attack( "hands" );
   thing->remove_attack( "feet" );
   thing->remove_attack( "bite" );
   thing->remove_attack( "crush" );
   thing->add_attack( "bite", 80, ({ ( 3 * number ) / 2, 5, number * 2 }),
      "pierce", "unarmed", ({ "poison", this_object() }) );
   thing->tactics( "response dodge" );
}
void poison( int damage, object him, object me, string a_type,
             string a_name ) {
   tell_room( me->one_short() + " visciously sinks its fangs into " +
      him->one_short() + " who seethes in agony!\n" );
   tell_object( him, me->one_short() + " sinks its fangs into you!  You "
      "seethe in agony.\n" );
   him->add_effect( POISON_EFFECT, random(200) );
}
string *query_target_zones() {
  return ({ "head", "body", "body", "body", "tail", "tail", "tail" });
}
string map_target_zone(string zone) {
  switch(zone) {
  case "head":
    return "head";
  case "neck":
  case "chest":
    return "body";
  default:
    return "tail";
  }
}

==================================================
FILE: races/vulture.c
==================================================

inherit "/std/races/bird_base";
void setup() {
   set_name( "vulture" );
   set_long( "A largish, rather scruffy-looking bird with an ugly, "
      "featherless head and a big crooked beak.\n" );
   set_desc( "a somewhat evil-looking old vulture\n" );
   set_height( 40 );
   set_weight( 200 );
   set_stats( ({ 0, 14, -4, 2, -6 }) );
}
void new_set_level( mixed *args ) {
   int level;
   object thing;
   if( sizeof(args) < 2 || !args[1] )
      return;
   level = args[ 0 ];
   thing = args[ 1 ];
   thing->add_ac( "blunt", "blunt", level / 2 );
   thing->add_ac( "pierce", "pierce", level );
   thing->add_ac( "sharp", "sharp", level );
}
void set_unarmed_attacks( object thing ) {
   int number;
   number = (int)thing->query_skill_bonus( "fighting.combat.melee.unarmed" );
   number = sqrt( number ) / 2;
   thing->remove_attack( "hands" );
   thing->remove_attack( "feet" );
   thing->remove_attack( "beak" );
   thing->remove_attack( "claws" );
   thing->add_attack( "beak", 50, ({ number / 2, 2, number / 2 }),
      "pierce", "unarmed", 0 );
   thing->add_attack( "claws", 75, ({ number, 5, number / 2 }),
      "sharp", "unarmed", 0 );
   thing->tactics( "response dodge" );
}

==================================================
FILE: races/weasel.c
==================================================

inherit "/std/races/mustelidae_base";
void setup() {
   set_name( "weasel" );
   set_long( "A small brown furred animal.\n" );
   set_height( 15 );
   set_weight( 30 );
   set_desc( "small brown meateater" );
   set_stats( ({ -2, 8, -2, -4, -4 }) );
}
void new_set_level( mixed *args ) {
   int level;
   object thing;
   if( sizeof(args) < 2 || !args[1] )
      return;
   level = args[ 0 ];
   thing = args[ 1 ];
   level = 2 + ( 2 * level + random( level ) ) / 8;
   thing->add_ac( "blunt", "blunt", 20 + level / 3 );
   thing->add_ac( "sharp", "sharp", 50 + level );
   thing->add_ac( "pierce", "pierce", 60 + 2 * level );
}
void set_unarmed_attacks( object thing ) {
   int number;
   number = (int)thing->query_skill_bonus( "fighting.combat.melee.unarmed" );
   number = 4 + sqrt( number ) / 2;
   thing->remove_attack( "hands" );
   thing->remove_attack( "feet" );
   thing->remove_attack( "claws" );
   thing->remove_attack( "bite" );
   thing->add_attack( "claws", 50, ({ ( 4 * number ) / 2, 8, 2 * number }),
      "sharp", "unarmed", 0 );
   thing->add_attack( "bite", 100, ({ 2 * number, 10, ( 3 * number ) / 2 }),
      "pierce", "unarmed", 0  );
   thing->tactics( "response dodge" );
}

==================================================
FILE: races/wolf.c
==================================================

inherit "/std/races/carnivore";
void setup() {
   set_name( "wolf" );
   set_desc( "a really nasty, hungry looking canine" );
   set_height( 75 );
   set_weight( 1000 );
   set_stats( ({ 6, 12, -4, 8, -4 }) );
}
void new_set_level( mixed *args ) {
   int level;
   object thing;
   if( sizeof(args) < 2 || !args[1] )
      return;
   level = args[ 0 ];
   thing = args[ 1 ];
   level = 2 + ( 2 * level + random( level ) ) / 8;
   thing->add_ac( "blunt", "blunt", 20 + level / 3 );
   thing->add_ac( "sharp", "sharp", 50 + level );
   thing->add_ac( "pierce", "pierce", 60 + 2 * level );
}
void set_unarmed_attacks( object thing ) {
   int number;
   number = (int)thing->query_skill_bonus( "fighting.combat.melee.unarmed" );
   number = 4 + sqrt( number ) / 2;
   thing->remove_attack( "hands" );
   thing->remove_attack( "feet" );
   thing->remove_attack( "claws" );
   thing->remove_attack( "bite" );
   thing->add_attack( "claws", 50, ({ ( 5 * number ) / 2, 8, 2 * number }),
      "sharp", "unarmed", 0 );
   thing->add_attack( "bite", 100, ({ 3 * number, 10, ( 3 * number ) / 2 }),
      "pierce", "unarmed", 0 );
   thing->tactics( "response dodge" );
}

==================================================
FILE: races/wombat.c
==================================================

inherit "/std/races/base";
void setup() {
   set_name( "wombat" );
   set_long( "One of several stocky marsupials (family Vombatidae) "
      "resembling small bears.\n" );
   set_height( 40 );
   set_weight( 600 );
   set_desc( "a stocky wombat, looking for something to nibble" );
   bits = ({
      "head", "head", ({ 0, 100, 0,
         "left eye", "right eye", "left ear", "right ear", "skull" }),
      "left eye", "eye", ({ "head", 1, 0 }),
      "right eye", "eye", ({ "head", 1, 0 }),
      "left ear", "ear", ({ "head", 15, 0 }),
      "right ear", "ear", ({ "head", 15, 0 }),
      "skull", "skull", ({ "head", 50, 0, "teeth", "brain" }),
      "brain", "brain", ({ "skull", 30, 0 }),
      "teeth", "teeth", ({ "skull", 1, ({"/std/bit_set", 1}), "tooth" }),
      "tooth", "tooth", ({ "teeth", 1, ({"/std/bit", 18}) }),
      "torso", "torso", ({ 0, 450, 0,
         "heart", "liver", "left kidney", "right kidney", "spleen",
         "right lung", "left lung", "intestine" }),
      "heart", "heart", ({ "torso", 20, 0 }),
      "liver", "liver", ({ "torso", 20, 0 }),
      "left kidney", "kidney", ({ "torso", 10, 0 }),
      "right kidney", "kidney", ({ "torso", 10, 0 }),
      "spleen", "spleen", ({ "torso", 10, 0 }),
      "right lung", "lung", ({ "torso", 20, 0 }),
      "left lung", "lung", ({ "torso", 20, 0 }),
      "intestine", "gut", ({ "torso", 50, 0 }),
      "genitals", "genitals", ({ 0, 5, 0 }),
      "left front leg", "leg", ({ 0, 150, 0, "left front paw" }),
      "left front paw", "paw", ({ "left front leg", 25, 0 }),
      "right front leg", "leg", ({ 0, 150, 0, "right front paw" }),
      "right front paw", "paw", ({ "right front leg", 25, 0 }),
      "left rear leg", "leg", ({ 0, 150, 0, "left rear paw" }),
      "left rear paw", "paw", ({ "left rear leg", 25, 0 }),
      "right rear leg", "leg", ({ 0, 150, 0, "right rear paw" }),
      "right rear paw", "paw", ({ "right rear leg", 25, 0 }),
      "tail", "tail", ({ 0, 25, 0 }),
      "skin", "skin", ({ 0, 175, 0 })
   });
   inedible = ({ "skull", "teeth", "tail", "skin" });
   unrottable = ({ "skull", "teeth" });
   set_skin( "fur" );
   set_stats( ({ 2, 4, -2, 6, -4 }) );
}
void new_set_level( mixed *args ) {
   int level;
   object thing;
   if( sizeof(args) < 2 || !args[1] )
      return;
   level = args[ 0 ];
   thing = args[ 1 ];
   level = 1 + ( 2 * level + random( level ) ) / 10;
   thing->add_ac( "blunt", "blunt", level );
   thing->add_ac( "sharp", "sharp", 2 + level );
   thing->add_ac( "pierce", "pierce", 2 * level );
}
void set_unarmed_attacks( object thing ) {
   int number;
   number = (int)thing->query_skill_bonus( "fighting.combat.melee.unarmed" );
   number = 4 + sqrt( number ) / 2;
   thing->remove_attack( "hands" );
   thing->remove_attack( "feet" );
   thing->remove_attack( "chew" );
   thing->remove_attack( "claws" );
   thing->add_attack( "chew", 100, ({ 3 * number, 0, number }),
      "sharp", "unarmed", 0 );
   thing->add_attack( "claws", 50, ({ ( 3 * number ) / 2, number, number }),
      "sharp", "unarmed", 0 );
   thing->tactics( "response dodge" );
}

==================================================
FILE: races/shadows/fish_shadow.c
==================================================

object my_player;
void init_shadow(object ob) {
  my_player = ob;
  shadow(ob, 1);
}
int query_ac(string type, int dam) {
  int i;
  i = (int)my_player->query_ac(type);
  if (environment(my_player)->query_underwater())
    return i*100;
  return i;
}
int move(object ob, string s1, string s2) {
  int i;
  i = (int)my_player->move(ob, s1, s2);
  if (!i && !ob->query_underwater())
    call_out("do_drown", 2);
  else
    remove_call_out("do_drown");
  return i;
}
void do_drown() {
  tell_room(my_player, my_player->one_short()+" gasps for air.\n");
  my_player->adjust_hp(random(50)+50);
  call_out("do_drown", 2);
}
