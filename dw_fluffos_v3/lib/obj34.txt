
=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/reactions/base.hdr ===
# This file is the first one read by the data initializer; it contains
# all the includes and stuff that can only be specified once.
::#include:: <reaction.h>
::Data:: mapping of mapping of class reaction


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/reactions/blue_water.rcn_dc.c ===
}
mixed data_return() {
  return data;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/reactions/black_tea.rcn ===
::item "TeaLeaf" "Water"::
::->ratio:: 1.0/100
#::->ratio:: ({ 1.0/60, 1.0/40 })
::->result:: "/obj/reagents/weak_black_tea.ob"
::->result_amt:: 1.0
::->func:: ({ })


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/reactions/base.hdr_dc.c ===
#include <reaction.h>
void dest_me() { destruct( this_object() ); }
class reaction item;
mapping data = ([ ]);
mixed data_return_0() {
  if (!mapp(data["TeaLeaf"])) data["TeaLeaf"] = ([]);
  item = new( class reaction );
  item->ratio = 1.0/100;
  item->result = "/obj/reagents/weak_black_tea.ob";
  item->result_amt = 1.0;
  item->func = ({ });
  data["TeaLeaf"]["Water"] = item;
  if (!mapp(data["BatGuano"])) data["BatGuano"] = ([]);
  item = new( class reaction );
  item->ratio = ({ 0.8, 1.2 });
  item->result = "/obj/reagents/generic_liquid.ob";
  item->result_amt = 1;
  item->func = ({ (:
   $3->set_decay_speed(0),
   $3->set_medium_alias( "GuanoSolution" ),
   $3->set_name( "guano_solution" ),
   $3->add_alias( "sludge" ),
   $3->set_short( "thick brown sludge" ),
   $3->add_adjective( ({ "thick", "brown" }) ),
   $3->set_long( "This is some thick brown sludge, streaked through with "
     "white.  The smell is... prominent.\n" )
:) })
;
  data["BatGuano"]["Water"] = item;
  if (!mapp(data["BlueHealingWater"])) data["BlueHealingWater"] = ([]);
  item = new( class reaction );
  item->ratio = ({ 1.0, 1.0 });
  item->result = "/obj/reagents/generic_liquid.ob";
  item->result_amt = 1.0;
  item->func = ({
        (: $3->set_name( "ooze" ) :),
        (: $3->add_alias( "green ooze" ) :),
        (: $3->set_short( "thick green ooze" ) :),
        (: $3->set_main_plural( "thick green oozes" ) :),
        (: $3->add_plural( "oozes" ) :),
        (: $3->add_adjective( "green" ) :),
        (: $3->set_long( "This is a thick, green "
                        "mush, $amount_size$.  It smells "
                        "terrible, and is bubbling slightly.\n" ) :),
        (: $3->set_medium_alias( "ThickGreenOoze" ) :),
        (: $3->add_eat_effect( "/std/effects/ingested/drunk", 50 ) :),
    });
  data["BlueHealingWater"]["BrewedComfreyYarrowTea"] = item;
  if (!mapp(data["BlueHealingWater"])) data["BlueHealingWater"] = ([]);
  item = new( class reaction );
  item->ratio = ({ 1.0, 1.0 });
  item->result = "/obj/reagents/generic_liquid.ob";
  item->result_amt = 1.0;
  item->func = ({
        (: $3->set_name( "ooze" ) :),
        (: $3->add_alias( "green ooze" ) :),
        (: $3->set_short( "thick green ooze" ) :),
        (: $3->set_main_plural( "thick green oozes" ) :),
        (: $3->add_plural( "oozes" ) :),
        (: $3->add_adjective( "green" ) :),
        (: $3->set_long( "This is a thick, green "
                        "mush, $amount_size$.  It smells "
                        "terrible, and is bubbling slightly.\n" ) :),
        (: $3->set_medium_alias( "ThickGreenOoze" ) :),
        (: $3->add_eat_effect( "/std/effects/ingested/drunk", 50 ) :),
    });
  data["BlueHealingWater"]["ComfreyYarrowTea"] = item;
}
mixed data_return() {
  data_return_0();
  return data;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/reactions/blue_water.rcn ===
/**
 *  Author Terano
 *  Created 8/07/02
 *  This file prevents the mixing of healing tea and blue water, in
 *  accordance with the prophecy.
 */

::item "BlueHealingWater" "BrewedComfreyYarrowTea"::
::->ratio:: ({ 1.0, 1.0 })
::->result:: "/obj/reagents/generic_liquid.ob"
::->result_amt:: 1.0
::->func:: ({
        (: $3->set_name( "ooze" ) :),
        (: $3->add_alias( "green ooze" ) :),
        (: $3->set_short( "thick green ooze" ) :),
        (: $3->set_main_plural( "thick green oozes" ) :),
        (: $3->add_plural( "oozes" ) :),
        (: $3->add_adjective( "green" ) :),
        (: $3->set_long( "This is a thick, green "
                        "mush, $amount_size$.  It smells "
                        "terrible, and is bubbling slightly.\n" ) :),
        (: $3->set_medium_alias( "ThickGreenOoze" ) :),
        (: $3->add_eat_effect( "/std/effects/ingested/drunk", 50 ) :),
    })

::item "BlueHealingWater" "ComfreyYarrowTea"::
::->ratio:: ({ 1.0, 1.0 })
::->result:: "/obj/reagents/generic_liquid.ob"
::->result_amt:: 1.0
::->func:: ({
        (: $3->set_name( "ooze" ) :),
        (: $3->add_alias( "green ooze" ) :),
        (: $3->set_short( "thick green ooze" ) :),
        (: $3->set_main_plural( "thick green oozes" ) :),
        (: $3->add_plural( "oozes" ) :),
        (: $3->add_adjective( "green" ) :),
        (: $3->set_long( "This is a thick, green "
                        "mush, $amount_size$.  It smells "
                        "terrible, and is bubbling slightly.\n" ) :),
        (: $3->set_medium_alias( "ThickGreenOoze" ) :),
        (: $3->add_eat_effect( "/std/effects/ingested/drunk", 50 ) :),
    })



=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/reactions/blackpowder.rcn ===
::item "BatGuano" "Water"::
::->ratio:: ({ 0.8, 1.2 })
::->result:: "/obj/reagents/generic_liquid.ob"
::->result_amt:: 1
::->func:: ({ (:
   $3->set_decay_speed(0),
   $3->set_medium_alias( "GuanoSolution" ),
   $3->set_name( "guano_solution" ),
   $3->add_alias( "sludge" ),
   $3->set_short( "thick brown sludge" ),
   $3->add_adjective( ({ "thick", "brown" }) ),
   $3->set_long( "This is some thick brown sludge, streaked through with "
     "white.  The smell is... prominent.\n" )
:) })


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/furnitures/tables/pedestal_table.c ===
inherit "/std/room/furniture/surface";
void setup() {
    set_name( "table" );
    set_short( "pedestal table" );
    add_adjective( "pedestal" );
    set_long("Finished in warm antique hues, this pedestal table is a "
        "roughly triangular object which ends abruptly in a flat plateau "
        "which looks to be the ideal place for placing a few books or "
        "a reading lantern.  Rising along its height are a series of "
        "drawers with brass handles, which narrow in width with the table "
        "as it rises.\n");
    set_allowed_positions( ({ "on" }) );
    set_allowed_room_verbs( ([ "standing" : "stands" ]) );
    set_weight( 250 );
    set_max_weight( 50 );
    set_value( 88000 );
    set_allow_use_internals( 1 );
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/furnitures/misc/burnt_bamboo_screen.c ===
inherit "/std/room/furniture/basic";
void setup() {
    set_name( "screen" );
    set_short( "burnt bamboo screen" );
    add_adjective( ({ "burnt", "bamboo" }) );
    set_long( "This screen has been constructed by "
        "weaving hundreds of lashes of bamboo together to form a tight "
        "mesh that blocks out any chance of peeking through to see what's "
        "on the other side.  The bamboo, lovely in differing shades of "
        "tan through to chocolate brown, is supported by long poles which "
        "make up the frame and hinge the entire structure together.\n");
    set_allowed_positions( ({ "standing", "sitting" }) );
    set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
    set_weight(150);
    set_value(400000);
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/furnitures/misc/brass_gong.c ===
inherit "/std/room/furniture/basic";
void setup() {
    set_name("gong");
    set_short("brass gong");
    add_adjective( "brass" );
    set_long("This is a medium-sized brass gong, hanging from a brass "
        "frame.  Lazy pandas roll around the surface of the gong, "
        "the occasional one actually doing something other than "
        "eating or chewing on a stalk of bamboo.  The gong can be hit "
        "to make a loud ringing sound and annoy everyone in the room.\n");
    set_weight( 60 );
    set_value( 10000 );
    set_material( "brass" );
    set_allowed_positions( ({"hanging"}) );
    set_allowed_room_verbs((["hanging" : "hangs",
                             "sitting" : "sits",
                             "dangling" : "dangles",
                             "standing" : "stands" ]));
}
void init() {
    this_player()->add_command( "hit", this_object(), "<direct:object:me>" );
}
int do_hit(){
    this_player()->add_succeeded_mess(this_object(), "$N $V $p "
        +this_object()->short()+" loudly, filling the room with a "
        "deafening ringing sound.\n", ({ }));
    return 1;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/furnitures/misc/antique_food_basket.c ===
inherit "/std/room/furniture/storage";
void setup(){
    set_name( "basket" );
    set_short( "antique food basket" );
    add_adjective( ({ "antique", "food", "basket" }) );
    set_long("Used for carrying food in the older times, now refurbished, "
        "this antique food basket is now a curious ornament to a "
        "contemporary eye.  Still usable for storage, if not for food, the "
        "handle is made of bamboo that has been bent into shape.  "
        "Retrieved from the Sum Dim countryside, no two of these baskets "
        "are alike.\n");
    set_weight( 60 );
    set_max_weight(38);
    set_value( 62000 );
    set_allowed_room_verbs(([ "sitting" : "sits",
                              "standing" : "stands",
                              "leaning" : "leans",
                              "lying" : "lies",
                              "squatting" : "squats" ]));
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/furnitures/misc/crane_umbrella_stand.c ===
inherit "/std/room/furniture/storage";
void setup() {
    set_name("stand");
    set_short("lacquered umbrella stand");
    add_adjective( ({ "lacquered", "umbrella" }) );
    set_long("This is a conical umbrella stand that raises in an eight-sided "
        "cylinder.  Often placed by front doors to house the clothing "
        "accessories that are most-loathed, this particular stand is "
        "especially peculiar and eye-catching.  Lacquered with several "
        "shades of beige, green, and brown enamel, its faces boast an "
        "elegant crane taking off from a marshy landscape.\n");
    set_open();
    set_stuck(1);
    set_weight(90);
    set_max_weight(55);
    set_value(40000);
    set_allowed_room_verbs( ([ "squatting" : "squats",
                               "resting" : "rests",
                               "sitting" : "sits",
                               "standing" : "stands" ]) );
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/furnitures/misc/small_stove.c ===
inherit "/std/room/furniture/surface";
void setup() {
  set_name("stove");
  set_short("small stove");
  add_adjective("small");
  set_long("This is a small stove.\n");
  set_allowed_room_verbs(([
    "sitting" : "sits",
    "squatting" : "squats",
  ]));
  set_weight(495);
  set_max_weight(45);
  set_value(8000);
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/furnitures/misc/bamboo_screen.c ===
inherit "/std/room/furniture/basic";
void setup() {
    set_name( "screen" );
    set_short( "bamboo matchstick screen" );
    add_adjective( ({ "bamboo", "matchstick" }) );
    set_long( "This double-sided screen has been constructed by "
        "lashing long bamboo poles together so that "
        "four distinct interconnected panels are hinged "
        "together when it is standing.  A lovely tan colour, "
        "the texture is rough and the knots in the wood give it "
        "a rustic minimalist look.\n");
    set_allowed_positions( ({ "standing", "sitting" }) );
    set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
    set_weight(20);
    set_value(400000);
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/furnitures/misc/samurai_screen.c ===
inherit "/std/room/furniture/basic";
void setup() {
    set_name( "screen" );
    set_short( "rice paper samurai screen" );
    add_adjective( ({ "rice", "paper", "samurai" }) );
    set_long("This is a simple screen that would fit in most traditional "
        "homes.  A stoic samurai in full traditional Agatean armour and "
        "dress storms across the panelling, hand-drawn in shades of orange, "
        "blue, brown, cream and black.  The frame is made "
        "of a strange combination of walnut and spruce woods, their "
        "differing colours blending well with the shades of the panels.\n");
    set_allowed_positions( ({ "standing", "sitting" }) );
    set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
    set_weight(150);
    set_value(329000);
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/furnitures/misc/dragon_umbrella_stand.c ===
inherit "/std/room/furniture/storage";
void setup() {
    set_name("stand");
    set_short("enamelled umbrella stand");
    add_adjective( ({ "enamelled", "umbrella" }) );
    set_long("To keep the floors clean on rainy days, this hexagonal "
        "decorative umbrella stand suits that purpose perfectly.  A "
        "tin liner sits inside its base to catch inevitable drips and to "
        "protect its wood.  Handpainted with in blacks, golds and reds with "
        "a ferocious looking dragon design, it boasts a brass handle on "
        "each side for ease of lifting.\n");
    add_read_mess("\nMade in Sum Dim.", "tiny golden lettering around the "
        "base", "agatean");
    set_open();
    set_stuck(1);
    set_weight(90);
    set_max_weight(55);
    set_value(44000);
    set_allowed_room_verbs( ([ "squatting" : "squats",
                               "resting" : "rests",
                               "sitting" : "sits",
                               "standing" : "stands" ]) );
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/furnitures/misc/crackled_fishbowl.c ===
inherit "/std/room/furniture/basic";
void setup() {
    set_name( "fishbowl" );
    set_short( "fishbowl with crackled blue enamel" );
    add_adjective( ({ "with", "crackled", "blue", "enamel" }) );
    add_alias("bowl");
    add_plural( ({ "bowls", "fishbowls" }) );
    set_main_plural("fishbowls with cracked blue enamel");
    set_long("Peace and serenity, the foundation for a good life considered "
        "in Agatean philosophy, are reflected in this 16-inch blue and "
        "white porcelain fishbowl.  A special pottery heating technique is "
        "applied in this product.  Looking closely one can see the small "
        "crackles throughout the entire fishbowl, which is more interesting "
        "to the eye than just a plain surface.  The interior is an "
        "underwater scene of gold fish swimming in circular along the edge "
        "of the bowl.  Resting on a beautiful hand-polished cherry wood "
        "base, the shapes of several goldfish can be seen swishing back and "
        "forth beneath the water it holds.\n" );
    set_weight( 120 );
    set_value( 46000 );
    set_allowed_positions(({"sitting"}));
    set_allowed_room_verbs(([ "sitting" : "sits",
                              "standing" : "stands",
                              "leaning" : "leans",
                              "lying" : "lies",
                              "squatting" : "squats" ]));
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/furnitures/misc/silver_gong.c ===
inherit "/std/room/furniture/basic";
void setup() {
    set_name("gong");
    set_short("silver gong");
    add_adjective( "silver" );
    set_long("This is a smallish silver gong, hanging from a silver "
        "frame.  Tiny goldfish swim around each other on the "
        "surface of the disc, nipping each others' tails as they "
        "go.  The gong can be hit to make a loud ringing "
        "sound and annoy everyone in the room.\n");
    set_weight( 40 );
    set_value( 22000 );
    set_material( "silver" );
    set_allowed_positions( ({"hanging"}) );
    set_allowed_room_verbs((["hanging" : "hangs",
                             "sitting" : "sits",
                             "dangling" : "dangles",
                             "standing" : "stands" ]));
}
void init() {
    this_player()->add_command( "hit", this_object(), "<direct:object:me>" );
}
int do_hit(){
    this_player()->add_succeeded_mess(this_object(), "$N $V $p "
        +this_object()->short()+" loudly, filling the room with a "
        "deafening ringing sound.\n", ({ }));
    return 1;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/furnitures/misc/huge_gong.c ===
inherit "/std/room/furniture/basic";
void setup() {
    set_name("gong");
    set_short("huge brass gong");
    add_adjective( ({ "huge", "brass" }) );
    set_long("This is a huge brass gong, which hangs from an equally "
        "huge frame.  Prancing peacocks strut around each other on the "
        "surface of the disc, ruffling their tails as they "
        "stretch.  The gong can be hit to make a loud ringing "
        "sound and annoy everyone in the room.\n");
    set_weight( 100 );
    set_value( 42000 );
    set_material( "brass" );
    set_allowed_positions( ({"hanging"}) );
    set_allowed_room_verbs((["hanging" : "hangs",
                             "sitting" : "sits",
                             "dangling" : "dangles",
                             "standing" : "stands" ]));
}
void init() {
    this_player()->add_command( "hit", this_object(), "<direct:object:me>" );
}
int do_hit(){
    this_player()->add_succeeded_mess(this_object(), "$N $V $p "
        +this_object()->short()+" loudly, filling the room with a "
        "deafening crashing ring which reverberates for a few "
        "moments before finally fading away.\n", ({ }));    return 1;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/furnitures/misc/newspaper_box.c ===
inherit "/std/room/furniture/storage";
#include <room/newspaper.h>
#include <move_failures.h>
#include <housing.h>
#include <player_handler.h>
void check_for_new_papers();
void set_paper( string _paper );
void set_issues_left( int _issues );
void set_international( int value );
void set_last_issue( int _issue );
mapping query_dynamic_auto_load();
varargs void init_dynamic_arg( mapping map, object thing );
int query_last_issue();
int query_international();
int query_issues_left();
string query_paper();
private string _paper = "a given newspaper";
private int _last_issue = 0;
private int _issues_left = 1;
private int _international = 0;
void setup() {
   set_name( "box" );
   set_short( "newspaper box" );
   add_adjective( "newspaper" );
   set_long( "It's a large box impregnated with an oil designed to attract "
             "delivery-imps.\n" );
   set_allowed_positions( ({ "hanging", "standing" }) );
   set_allowed_room_verbs( ([ "standing": "stands", "hanging": "hangs" ]) );
   add_extra_look( this_object() );
   set_weight( 100 );
   set_max_weight( 300 );
   set_value( 10000 );
   set_open();
   set_stuck( 1 );
   call_out( "check_for_new_papers", 5 );
}
string extra_look() {
   if( !_paper || _paper == "a given newspaper" ) {
      return "The variables of this newspaper box are broken.  Please ask a "
             "creator to re-set them.\n";
   };
   return "This particular one works for " + _paper + ".\n";
}
void check_for_new_papers() {
   object newspaper;
   object room = environment( this_object() );
   int i, x, latest_issue;
   int* editions_bought;
   string name;
   if( !is_placed() && _issues_left > 0 ) {
      call_out( "check_for_new_papers", 3600 );
      return;
   };
   if( ( _international == 0 &&
         member_array( _paper, NEWSPAPER_HANDLER->query_papers_in_area(
           HOUSING->query_region( file_name( room ) ) ) ) != -1 ) ||
       ( _international == 1 &&
         member_array( _paper, NEWSPAPER_HANDLER->query_all_papers() ) != -1 ) ){
      latest_issue = NEWSPAPER_HANDLER->query_last_edition_num( _paper );
      name = environment( this_object() )->query_owner();
      if( latest_issue > _last_issue ) {
         tell_room( room,
                    "A " + ({"red", "green", "purple", "blue", "yellow",
                             "drunk", "smelly", "large", "tiny"})[random(9)] +
                    " imp rushes in with some newpapers in its hands and "
                      "disappears in the box.\n" );
         x = latest_issue - _last_issue;
         for( i = 0; i < x; i++ ) {
            newspaper = clone_object( NEWSPAPER_OB );
            newspaper->set_paper( _paper );
            newspaper->set_edition( _last_issue + 1 );
            if( !newspaper->move( this_object() ) == MOVE_OK ) {
               tell_room( room,
                          "Something in the box curses and a newspaper is "
                          "thrown to the floor from inside it.\n" );
               newspaper->move( room );
            };
            _last_issue++;
            _issues_left--;
            editions_bought = PLAYER_HANDLER->test_property( name, "Paper " +
                                                              _paper );
            if( !editions_bought ) {
               editions_bought = ({ });
            };
            if( member_array( _last_issue + 1, editions_bought ) == -1 ) {
               editions_bought += ({ _last_issue });
               PLAYER_HANDLER->special_add_property( name,
                 "Paper " + _paper, editions_bought );
               NEWSPAPER_HANDLER->add_edition_paper_sold( _paper,
                  _last_issue + 1,
                  NEWSPAPER_HANDLER->query_paper_cost( _paper ) );
            } else {
               NEWSPAPER_HANDLER->add_edition_revenue( _paper, _last_issue + 1,
                  NEWSPAPER_HANDLER->query_paper_cost( _paper ) );
            };
            tell_room( room,
                       "You hear some " + ({"giggling", "ranting", "quacking",
                                            "thumping", "cursing", "swearing",
                                            "snickering"})[random(7)] +
                       " emerging, the imp jumps out and runs off again.\n" );
         };
      };
   };
   if( _issues_left == 0 ) {
      set_long( query_long() +
                "It appears the imp-bait is no longer working.\n" );
   } else {
      call_out( "check_for_new_papers", 3600 );
   };
}
void set_paper( string new_paper ) {
   _paper = new_paper;
}
void set_issues_left( int _issues ) {
   _issues_left = _issues;
}
void set_last_issue( int _issue ) {
   _last_issue = _issue;
}
mapping query_dynamic_auto_load() {
   return ([
            "::": ::query_dynamic_auto_load(),
            "_paper": _paper,
            "_issues_left": _issues_left,
            "_last_issue": _last_issue,
            "_international": _international
        ]);
}
varargs void init_dynamic_arg( mapping map, object thing ) {
   if( map[ "::" ] && thing ) {
      ::init_dynamic_arg( map[ "::" ], thing );
   } else if( map[ "::" ] ) {
      ::init_dynamic_arg( map[ "::" ] );
   };
   if( map[ "_paper" ] ) {
      set_paper( map[ "_paper" ] );
   };
   if( map[ "_issues_left" ] ) {
      set_issues_left( map[ "_issues_left" ] );
   };
      if( map[ "_last_issue" ] ) {
      set_last_issue( map[ "_last_issue" ] );
   };
      if( map[ "_international" ] ) {
      set_international( map[ "_international" ] );
   };
}
int query_last_issue() {
   return _last_issue;
}
int query_issues_left() {
   return _issues_left;
}
int query_international() {
   return _international;
}
string query_paper() {
   return _paper;
}
void set_international( int i ) {
   _international = i;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/furnitures/misc/garden_fishbowl.c ===
inherit "/std/room/furniture/basic";
void setup(){
    set_name( "fishbowl" );
    set_short( "gold-leafed garden fishbowl" );
    add_adjective( ({ "gold", "leafed", "leaf", "gold-leaf", "gold-leafed",
        "garden" }) );
    add_alias("bowl");
    add_plural( ({ "bowls", "fishbowls" }) );
    set_long("Reading a story that is visualized on an art object is a "
        "particular kind of enjoyment.  A scene from the Agatean classic, "
        "'The Dream of Red Chamber' is hand-painted on this sixteen-inch "
        "fishbowl, in which the heroine expresses forbidden love in her "
        "poetry.  In this scene one also has a glimpse of traditional "
        "Agatean house garden.  The colorful scenery is painted over "
        "multi-layered gold leaf which has been carefully applied by hand.  "
        "Resting on a beautiful hand-polished rosewood base, "
        "the shapes of several goldfish can be seen swishing back and "
        "forth beneath the water it holds.\n" );
    set_weight( 110 );
    set_value( 52000 );
    set_allowed_positions(({"sitting"}));
    set_allowed_room_verbs(([ "sitting" : "sits",
                              "standing" : "stands",
                              "leaning" : "leans",
                              "lying" : "lies",
                              "squatting" : "squats" ]));
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/furnitures/misc/cherryblossom_screen.c ===
inherit "/std/room/furniture/basic";
void setup() {
    set_name( "screen" );
    set_short( "cherry blossom shoji screen" );
    add_adjective( ({ "cherry", "blossom", "shoji" }) );
    set_long( "A stunning cherry blossom tree adorns the "
        "silk panelling of this double-sided shoji "
        "screen.  Four panels with black wooden trim fold "
        "out to make this screen stand tall, its blossoms "
        "painted on with the most precise hand, the thickness "
        "of the paint still showing on the silk panels.\n");
    set_allowed_positions( ({ "standing", "sitting" }) );
    set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
    set_weight(20);
    set_value(400000);
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/furnitures/misc/calligraphy_fishbowl.c ===
inherit "/std/room/furniture/basic";
void setup() {
    set_name( "fishbowl" );
    set_short( "calligraphised fishbowl" );
    add_adjective( ({ "calligraphised", "fish" }) );
    add_alias("bowl");
    add_plural( ({ "bowls", "fishbowls" }) );
    set_long("Calligraphy is the soul of Agatean culture.  On this 16-inch "
        "fishbowl a Zing Dynasty poem is strikingly carved in "
        "and then gold leafed against an equally striking black background.  "
        "The black lacquer is hand-painted over porcelain to create a matte "
        "effect.  A matching solid wood stand holds the bowl's weight, "
        "and several goldfish swim quietly beneath the water it holds.\n" );
    set_weight( 110 );
    set_value( 48000 );
    set_allowed_positions(({"sitting"}));
    set_allowed_room_verbs(([ "sitting" : "sits",
                              "standing" : "stands",
                              "leaning" : "leans",
                              "lying" : "lies",
                              "squatting" : "squats" ]));
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/furnitures/misc/muslin_screen.c ===
inherit "/std/room/furniture/basic";
void setup() {
    set_name( "screen" );
    set_short( "muslin screen" );
    add_adjective( "muslin" );
    set_long( "This is a simple and traditional double-hinged "
        "screen, its panels filled in with a long sheet of roughly "
        "textured cream-coloured muslin fabric.  A lightly coloured "
        "construction, the material has been gathered at the top "
        "and bottom ends to produce a eye-pleasing loosely pleated "
        "effect which continues down its length.\n");
    set_allowed_positions( ({ "standing", "sitting" }) );
    set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
    set_weight(150);
    set_value(225000);
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/furnitures/misc/large_gong.c ===
inherit "/std/room/furniture/basic";
void setup() {
    set_name("gong");
    set_short("large brass gong");
    add_adjective( ({ "large", "brass" }) );
    set_long("This is a large brass gong, which hangs from an equally "
        "large frame.  Tiny dragons writhe around each other on the "
        "surface of the disc, nipping each others' tails as they "
        "stretch.  The gong can be hit to make a loud ringing "
        "sound and annoy everyone in the room.\n");
    set_weight( 80 );
    set_value( 38000 );
    set_material( "brass" );
    set_allowed_positions( ({"hanging"}) );
    set_allowed_room_verbs((["hanging" : "hangs",
                             "sitting" : "sits",
                             "dangling" : "dangles",
                             "standing" : "stands" ]));
}
void init() {
    this_player()->add_command( "hit", this_object(), "<direct:object:me>" );
}
int do_hit(){
    this_player()->add_succeeded_mess(this_object(), "$N $V $p "
        +this_object()->short()+" loudly, filling the room with a "
        "loud crashing ring.\n", ({ }));    return 1;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/furnitures/misc/hatstand.c ===
inherit "/std/room/furniture/surface";
void setup(){
  set_name("stand");
  set_short("tall hat stand");
  add_adjective( ({"tall", "hat"}) );
  add_alias( "hatstand" );
  add_plural("tall hat stands");
  set_long("This is a tall, serious looking hatstand.  It is made of "
    "dark sturdy teak wood and stands proud on four lavishly decorated "
    "legs.  The top has been carved into the grand shape of A'Tuin, "
    "upon which the elephants and the Disc have been elaborately "
    "sculpted, capturing the true beauty of the scene.  The turtle's "
    "flippers extend outwards and are where the coats and hats "
    "are hung.\n");
  set_weight(150);
  set_max_weight(200);
  set_allowed_room_verbs((["standing" : "stands",
                           "looming"  : "looms"  ]));
	set_put_aliases(({"hang"}));
  set_value(75000);
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/furnitures/misc/flint.c ===
inherit "/std/object";
void setup(){
  set_name("flint");
  set_short("flint stone");
  set_long("This is a flint stone.  It looks slightly worn and chipped "
    "but it's still keen enough to serve its purpose.\n");
  add_property("no recycling", 1);
  add_alias("stone");
  set_value( 600 );
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/furnitures/misc/satsuma_fishbowl.c ===
inherit "/std/room/furniture/basic";
void setup() {
    set_name( "fishbowl" );
    set_short( "satsuma fishbowl" );
    add_adjective( ({ "satsuma" }) );
    add_alias("bowl");
    add_plural( ({ "bowls", "fishbowls" }) );
    set_long("Learning is regarded the highest virtue in Agatean "
        "culture.  The picture on this "
        "fishbowl depicts a group of scholars in a session of discussion.  "
        "This fishbowl is made of porcelain and hand-painted with dark-green "
        "lacquer.  On top of the lacquer gold threads are woven in "
        "decorative design.  One intriguing detail about this particular  "
        "fishbowl is that thousands of tiny dots are meticulously painted "
        "one by one over the entire 16-inch fishbowl.  The interior is an "
        "underwater scene of gold fish swimming in circular along the edge "
        "of the bowl.  Resting on a beautiful hand-polished mahogany base, "
        "the shapes of several goldfish can be seen swishing back and "
        "forth beneath the water it holds.\n" );
    set_weight( 110 );
    set_value( 56000 );
    set_allowed_positions(({"sitting"}));
    set_allowed_room_verbs(([ "sitting" : "sits",
                              "standing" : "stands",
                              "leaning" : "leans",
                              "lying" : "lies",
                              "squatting" : "squats" ]));
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/furnitures/misc/latticed_screen.c ===
inherit "/std/room/furniture/basic";
void setup() {
    set_name( "screen" );
    set_short( "latticed shoji screen" );
    add_adjective( ({ "latticed", "shoji" }) );
    set_long( "This double-sided shoji screen has a latticed "
        "wood pattern made of ramin hardwood.  A lovely honey "
        "oak colour, the panelling is broken up by rice paper "
        "dividers which checker the screen from the top all "
        "the way down to the solid kick panel which runs along "
        "the bottom.\n");
    set_allowed_positions( ({ "standing", "sitting" }) );
    set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
    set_weight(20);
    set_value(400000);
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/furnitures/misc/tiny_gong.c ===
inherit "/std/room/furniture/basic";
void setup() {
    set_name("gong");
    set_short("tiny brass gong");
    add_adjective( ({ "tiny", "brass" }) );
    set_long("This is a tiny brass gong, which hangs from an equally "
        "tiny frame.  Fluttering butterflies flit around each other on the "
        "disc, flying aimlessly across its smooth "
        "surface.  The gong can be hit to make a loud ringing "
        "sound and annoy everyone in the room.\n");
    set_weight( 20 );
    set_value( 15000 );
    set_material( "brass" );
    set_allowed_positions( ({"hanging"}) );
    set_allowed_room_verbs((["hanging" : "hangs",
                             "sitting" : "sits",
                             "dangling" : "dangles",
                             "standing" : "stands" ]));
}
void init() {
    this_player()->add_command( "hit", this_object(), "<direct:object:me>" );
}
int do_hit(){
    this_player()->add_succeeded_mess(this_object(), "$N $V $p "
        +this_object()->short()+" loudly, filling the room with a"
        " tiny tinkling chime.\n", ({ }));
    return 1;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/furnitures/misc/mandarin_fan_screen.c ===
inherit "/std/room/furniture/basic";
void setup() {
    set_name( "screen" );
    set_short( "mandarin fan screen" );
    add_adjective( ({ "mandarin", "fan", "hana" }) );
    set_long( "This beautiful screen has a lovely walnut oak frame which "
        "pales in comparison to the panelling it holds.  Three smooth silk "
        "panels, each divided into eighteen square segments, sit "
        "in the hinged frame, each one handpainted in brilliant mandarin, "
        "lilac, cream and peridot watercolours with a mandarin orange "
        "hana fan design.  The frame is double-hinged so it can bend both "
        "backwards and forward to suit its placement.\n");
    set_allowed_positions( ({ "standing", "sitting" }) );
    set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
    set_weight(150);
    set_value(395000);
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/furnitures/misc/sung_umbrella_stand.c ===
inherit "/std/room/furniture/storage";
void setup() {
    set_name("stand");
    set_short("Sung umbrella stand");
    add_adjective( ({ "Sung", "umbrella" }) );
    set_long("This is a conical umbrella stand that raises itself up in an "
        "smooth-sided cylinder.  Often placed by front doors to house the "
        "clothing accessories that are most-loathed, this particular "
        "stand has been lacquered with several shades of gold, red, blue, "
        "green and cream and depicts the Sung Estate as it is seen from the "
        "banks of the Pearl River in the Sum Bing district of Bes Pelargic.  "
        "Several white ceramic lions border the estate, guarding it and "
        "bestowing several thousand years of good luck upon its "
        "inhabitants.\n");
    set_open();
    set_stuck(1);
    set_weight(90);
    set_max_weight(55);
    set_value(51000);
    set_allowed_room_verbs( ([ "squatting" : "squats",
                               "resting" : "rests",
                               "sitting" : "sits",
                               "standing" : "stands" ]) );
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/furnitures/misc/landscape_screen.c ===
inherit "/std/room/furniture/basic";
void setup() {
    set_name( "screen" );
    set_short( "watercolour landscape screen" );
    add_adjective( ({ "watercolour", "landscape" }) );
    set_long( "This beautiful screen has a lovely honey rosewood frame that "
        "pales in comparison to the panelling it holds.  Three rice "
        "paper panels sit in the hinged frame, each one handpainted in "
        "watercolours and depicting "
        "one third of a Agatean mountain landscape.  The frame is "
        "double-hinged so it can bend both backwards and forward to suit "
        "its placement, and the rice paper panelling has been ribbed with "
        "matchstick-like strings of wood to give it more support. \n");
    set_allowed_positions( ({ "standing", "sitting" }) );
    set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
    set_weight(150);
    set_value(400000);
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/furnitures/misc/peony_fishbowl.c ===
inherit "/std/room/furniture/basic";
void setup() {
    set_name( "fishbowl" );
    set_short( "gold-leafed peony fishbowl" );
    add_adjective( ({ "gold", "leafed", "leaf", "gold-leaf", "gold-leafed",
        "peony" }) );
    add_plural( ({ "bowls", "fishbowls" }) );
    add_alias("bowl");
    set_long( "Richly designed with blooming peonies, the flower that "
        "symbolizes peace and prosperity in Agatean culture, this grand "
        "16-inch fishbowl is carefully hand-layered with gold leaf over "
        "porcelain and hand-painted in exuberant colors.  This fishbowl "
        "matches any kind of foliage or simply stands alone as an art "
        "object.  Resting on a beautiful hand-polished rosewood base, "
        "the shapes of several goldfish can be seen swishing back and "
        "forth beneath the water it holds.\n" );
  set_weight( 110 );
  set_value( 51000 );
  set_allowed_positions(({"sitting"}));
  set_allowed_room_verbs((["sitting" : "sits",
                           "standing" : "stands",
                           "leaning" : "leans",
                           "lying" : "lies",
                           "squatting" : "squats" ]));
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/furnitures/misc/blackboard.c ===
inherit "/std/room/furniture/basic";
int query_allowed (string);
string read_stuff();
string query_words();
string _owner = "";
string _words = "";
void setup() {
  set_name ("blackboard");
  set_short ("blackboard");
  add_alias (({"board", "sign"}));
  set_long ("The residue of faded chalk-dust and long forgotten "
      "doodles lies heavily on the blackboard.  The grain of the "
      "board is worn and slightly mottled with age, hinting at "
      "a long and dignified history of classrooms and university "
      "lecterns.  Or perhaps just hinting at cheap wood and "
      "bad upkeep.\n");
  set_read_mess ((: read_stuff :));
  set_allowed_room_verbs( (["standing" : "stands",
                          "hanging"  : "hangs"]) );
  set_value(0);
}
void init() {
  this_player()->add_command ("write", this_object(), "[on] <direct:object>");
  this_player()->add_command ("clean", this_object(), "<direct:object>");
}
void set_words (string bing) {
    _words = bing;
}
string query_words () {
    return _words;
}
string read_stuff() {
    string bing = "";
    if (sizeof (query_words())) {
        bing += query_words();
    }
    if (!sizeof (bing)) {
        bing = "A few random letters that escaped cleaning can be seen on "
            "the blackboard.";
    }
    return bing;
}
int do_clean() {
    if (!query_allowed (this_player()->query_name())) {
        this_player()->add_failed_mess (this_object(), "You cannot clean "
            "the blackboard!\n", ({ }));
        return 0;
    }
    set_words ("");
    return 1;
}
int do_write() {
    string bean;
    if (!query_allowed (this_player()->query_name())) {
        this_player()->add_failed_mess (this_object(), "You cannot write on "
            "the blackboard!\n", ({ }));
        return 0;
    }
    bean = query_words();
    this_player()->do_edit(bean, "blackboard_text", this_object());
    this_player()->add_succeeded_mess (this_object(), "$N find$s a handy "
        "piece of chalk and start$s to write on the blackboard.\n", ({ }));
    return 1;
}
void blackboard_text(string text) {
    if (!text) {
      tell_room (environment (this_object()), this_player()->one_short()
          + " steps back from the blackboard without making any "
          "changes.\n", this_player());
      tell_object (this_player(), "Okay, nothing has been changed.\n");
      return;
    }
    set_words (text);
    tell_room(environment (this_object()), this_player()->one_short()
      + " finishes writing on the blackboard.\n", this_player());
}
int query_allowed (string name) {
    if (function_exists ("query_owner", environment (this_object()))) {
      if (name == environment (this_object())->query_owner()) {
        return 1;
      }
    }
    if (function_exists ("query_allowed", environment (this_object()))) {
      if (member_array (name, environment(this_object())->query_allowed())
          != -1) {
        return 1;
      }
      else {
        return 0;
      }
    }
    return 1;
}
mapping query_dynamic_auto_load() {
   return ([
     "::" : ::query_dynamic_auto_load(),
      "words" : query_words(),
   ]);
}
void init_dynamic_arg( mapping map ) {
   ::init_dynamic_arg( map[ "::" ] );
   set_words (map["words"]);
   set_read_mess ((: read_stuff :));
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/furnitures/misc/mado_screen.c ===
inherit "/std/room/furniture/basic";
void setup() {
    set_name( "screen" );
    set_short( "mado screen" );
    add_adjective( "mado" );
    set_long( "This traditional mado screen has a double-sided "
        "latticework frame made of lacquered red cedar.  Between "
        "the two sides of the frame lies a large sheet of smooth "
        "white rice paper that looks quite delicate and "
        "fragile.  \n");
    set_allowed_positions( ({ "standing", "sitting" }) );
    set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
    set_weight(150);
    set_value(350000);
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/furnitures/misc/fine_fireplace.c ===
inherit "/std/room/furniture/fireplace";
void setup(){
  set_allowed_positions(({"sitting"}));
  set_allowed_room_verbs((["sitting" : "sits" ]));
  set_weight(700);
  set_max_weight(100);
  set_short("finely crafted fireplace");
  set_long("This fireplace is surrounded by an ornately carved mahogany "
     "framework and has a beautifully finished brass hearth.\n");
  set_value(900000);
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/furnitures/misc/hunghungese_screen.c ===
inherit "/std/room/furniture/basic";
void setup() {
    set_name( "screen" );
    set_short( "HungHungese screen" );
    add_adjective( ({ "hunghungese", "HungHungese", "hunghung",
        "HungHung" }) );
    set_long( "This is a contemporary double-sided screen for the home.  "
        "Framed in a light spruce, the panels of the screen have been "
        "included in the main construction of the frame and form a "
        "checkerboard pattern across its length.  Inside the "
        "checkerboard are long panels of cotton that have depictions "
        "of life in a hectic HungHung market.  There are several "
        "ducks, a few sheep, some dried fish and a lot of people "
        "that look like they are shouting at one another.\n");
    set_allowed_positions( ({ "standing", "sitting" }) );
    set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
    set_weight(150);
    set_value(325000);
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/furnitures/misc/waterbuffalo_dung.c ===
inherit "/std/room/furniture/fuel_inherit";
void setup() {
  set_name("dung");
  set_shorts( ({ "small lump of dried waterbuffalo dung",
                 "slightly burnt lump of waterbuffalo dung",
                 "blackened lump of waterbuffalo dung",
                 "black, charred lump of dung" }) );
  set_longs( ({
    "This is a small lump of dried waterbuffalo dung.  It looks as "
        "though it would burn well.\n",
    "This is a small lump of dried waterbuffalo dung.  It has been "
        "charred around the edges but would still burn for a while yet.\n",
    "This is a black lump of charred dung, which is barely able to still "
        "hold itself together.\n" }) );
  set_weight( 9 );
  set_value( 200 );
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/furnitures/misc/log.c ===
#define WEIGHT 25
inherit "/std/room/furniture/fuel_inherit";
void setup(){
  set_name("log");
  set_shorts( ({ "small log",
                 "slightly burnt log",
                 "blackened log",
                 "black, charred log" }) );
  set_longs( ({
    "This is a small dumpy log.  It looks as though it would burn well.\n",
    "This is a small dumpy log.  It has been charred around the edges "
      "but would still burn for a while yet.\n",
    "This is a black lump of charred wood, which is just about holding "
      "its shape together as a log.\n" }) );
  set_weight( WEIGHT );
  set_value( 400 );
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/furnitures/misc/textured_leaf_screen.c ===
inherit "/std/room/furniture/basic";
void setup() {
    set_name( "screen" );
    set_short( "textured leaf screen" );
    add_adjective( ({ "textured", "leaf" }) );
    set_long( "This beautiful screen has a lovely honey oak frame which "
        "pales in comparison to the panelling it holds.  Three textured rice "
        "paper panels, each divided into six vertical segments, sit "
        "in the hinged frame, each one handpainted in "
        "watercolours with a tan leaf design.  The frame is "
        "double-hinged so it can bend both backwards and forward to suit "
        "its placement, and the rice paper panelling has been ribbed with "
        "matchstick-like strings of wood to give it more support. \n");
    set_allowed_positions( ({ "standing", "sitting" }) );
    set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
    set_weight(150);
    set_value(290000);
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/furnitures/misc/spruce_screen.c ===
inherit "/std/room/furniture/basic";
void setup() {
    set_name( "screen" );
    set_short( "double cross spruce screen" );
    add_adjective( ({ "double", "cross", "spruce" }) );
    set_long( "This double-sided screen has been constructed by "
        "lashing pairs of long spruce strips together so that "
        "three distinct interconnected panels are hinged "
        "together when it is standing.  The frame, decorated with "
        "criss-crossed pairs of spruce poles, is covered by a "
        "thin layer of rice paper that breaks up light and "
        "sheds a warm glow on a room when a lamp is placed behind it.\n");
    set_allowed_positions( ({ "standing", "sitting" }) );
    set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
    set_weight(150);
    set_value(400000);
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/furnitures/misc/lava_lamp.c ===
#define CREATOR "Rue"
inherit "/std/room/furniture/basic";
#define MEDITATION "/std/effects/other/meditate_effect"
void setup() {
    set_name("lamp");
    set_short("lava lamp");
    set_light(25);
    add_adjective( ({ "lava", "red" }) );
    add_alias( ({ "lamp" }) );
    set_long( "This is an odd looking lamp, roughly the shape of an "
        "hourglass, with a brass base.  It is filled with murky pink "
        "liquid and large blobs of red goo that ooze this way and that.  "
        "The exact nature of the red goo is a mystery.  Some say it is "
        "a primitive type of troll that is still in its magma stage.  "
        "Others reckon it is something that got away from the Alchemists' "
        "Guild.  It gives off a faint light.\n" );
    item_chat( ({ 120, 360, ({
        "A rather disgusting wet popping noise comes from the lava lamp.",
        "A strange sucking noise seems to be coming from the lava lamp."
    }) }) );
    set_allowed_positions(({"sitting","standing"}));
    set_allowed_room_verbs((["sitting" : "sits", "standing" : "stands" ]));
    set_weight(82);
    set_value(20500);
}
void init() {
    ::init();
    add_command( "stare", "at <direct:object'lamp'>" );
}
int do_stare() {
    call_out( (: $(this_player())->add_effect( MEDITATION ) :), 1 );
    add_succeeded_mess( "$N $V dreamily at $D and zone$s out.\n");
    return 1;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/furnitures/misc/lectern.c ===
inherit "/std/room/furniture/surface";
void setup() {
  set_name("lectern");
  set_short("oak lectern");
  add_adjective(({"oak", "ornate"}));
  set_long("The lectern has a heavy wooden base carved with"
					 " twining leaves and a flat top perfect for a book.\n");
  set_allowed_positions(({"sitting"}));
  set_allowed_room_verbs((["sitting" : "sits", "standing" : "stands" ]));
  set_weight(350);
  set_max_weight(50);
  set_value(1400);
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/furnitures/misc/geisha_screen.c ===
inherit "/std/room/furniture/basic";
void setup() {
    set_name( "screen" );
    set_short( "rice paper geisha screen" );
    add_adjective( ({ "rice", "paper", "geisha" }) );
    set_long("This is a simple screen that would fit in most traditional "
        "homes.  Quiet geishas relax on "
        "its rice paper panelling, hand-drawn on a bamboo balcony, "
        "they sit and sip tea in peace and solitude or play mandolin-like "
        "instruments which sit silently in their laps.  The frame is made "
        "of a strange combination of walnut and spruce woods, their "
        "differing colours blending well with the shades of the panels.\n");
    set_allowed_positions( ({ "standing", "sitting" }) );
    set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
    set_weight(150);
    set_value(320000);
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/furnitures/misc/platinum_gong.c ===
inherit "/std/room/furniture/basic";
void setup() {
    set_name("gong");
    set_short("platinum gong");
    add_adjective( "platinum" );
    set_long("This is a smallish platinum gong, hanging from a platinum "
        "frame.  Leaping lions writhe around each other on the "
        "surface of the disc, showing their teeth as they "
        "run across the etchings.  The gong can be hit to make a "
        "loud ringing sound and annoy everyone in the room.\n");
    set_weight( 30 );
    set_value( 28000 );
    set_material( "platinum" );
    set_allowed_positions( ({"hanging"}) );
    set_allowed_room_verbs((["hanging" : "hangs",
                             "sitting" : "sits",
                             "dangling" : "dangles",
                             "standing" : "stands" ]));
}
void init() {
    this_player()->add_command( "hit", this_object(), "<direct:object:me>" );
}
int do_hit(){
    this_player()->add_succeeded_mess(this_object(), "$N $V $p "
        +this_object()->short()+" loudly, filling the room with a "
        "deafening ringing sound.\n", ({ }));
    return 1;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/furnitures/misc/iron_hatstand.c ===
inherit "/std/room/furniture/surface";
void setup(){
  set_name( "stand" );
  set_short( "wrought iron hat stand" );
  add_adjective( ({ "wrought", "iron", "hat" }) );
  add_alias( ({ "hatstand", "rack", "hat rack", "hatrack" }) );
  add_plural( "wrought iron hat stands" );
  set_long("This is a solid hat stand made of gracefully designed "
    "wrought iron.  It rests on four clawed feet, while the base "
    "of the stand wraps around itself in a spiral.  There are "
    "plenty of hooks at the top.\n");
  set_weight(250);
  set_max_weight(200);
  set_allowed_room_verbs(([ "standing" : "stands" ]));
	set_put_aliases( ({ "hang" }) );
  set_value(9000);
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/.chisel.wep_virtual_.c ===
#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/chisel.wep#1" );
  call_other( clone, "set_name", "chisel"  );
  call_other( clone, "set_short", "chisel"  );
  call_other( clone, "set_long", "This is a tool with a sharp edge which is used to shape and cut metal, wood, or stone.\n"  );
  call_other( clone, "set_weight", 11  );
  call_other( clone, "set_length", 6  );
  call_other( clone, "set_width", 3  );
  call_other( clone, "set_material",  "steel"  );
  call_other( clone, "set_value", 300  );
  call_other( clone, "new_weapon", 19200  );
  call_other( clone, "set_damage_chance", 5  );
  call_other( clone, "add_attack", "slash", 30, ({ 10, 3, 10 }), "sharp", "sharp", 0  );
  call_other( clone, "add_attack", "stab", 30, ({ 10, 3, 10 }), "pierce", "pierce", 0 );
   return clone;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/scalpel.wep ===
# Igors scalpel.
# Sightblinder
# 23/2/01

::Name::"scalpel"
::Short::"scalpel"
::Alias::({"scalpel", "knife"})
::Plural::"scalpels"
::Long::"This delicate, but extremely sharp, knife would normally be "
"used by a doctor for performing surgery.  However since most "
"doctors in Ankh-Morpork can't even spell surgery, let alone "
"perform it, it's probably best not to think about that.\n"
::Weight::6
::Length::6
::Width::1
::Material:: "steel" 
::Value::50
::Setup::500
::Attack::"slash", 70, ({ 10, 5, 20 }), "sharp", "sharp", 0
::Attack::"stab", 30, ({ 10, 2, 20 }), "pierce", "pierce", 0




=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/.sharp_butter_knife.wep_virtual_.c ===
#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/sharp_butter_knife.wep#1" );
  call_other( clone, "set_name", "knife"  );
  call_other( clone, "set_short", "sharp butter knife"  );
  call_other( clone, "set_main_plural", "sharp butter knives"  );
  call_other( clone, "add_adjective", ({ "sharp", "butter" })  );
  call_other( clone, "add_alias", ({ "utensil" })  );
  call_other( clone, "add_plural", "knives"  );
  call_other( clone, "set_long",  "This is a butter knife that has been sharpened a bit.\n"  );
  call_other( clone, "set_weight",  3  );
  call_other( clone, "set_length",  6  );
  call_other( clone, "set_width",  1  );
  call_other( clone, "set_material",  "steel"  );
  call_other( clone, "set_value",  75  );
  call_other( clone, "new_weapon",  500  );
  call_other( clone, "add_attack",  "slash", 70, ({ 15, 2, 20 }), "sharp", "sharp", 0  );
  call_other( clone, "add_attack",  "stab", 40, ({ 20, 2, 30 }), "pierce", "pierce", 0 );
   return clone;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/crystal_bladed_dagger.wep ===
::Name::"dagger"
::Short::"crystal bladed dagger"
::Adjective::({ "crystal", "bladed" })
::Main Plural::"crystal bladed daggers"
::Plural::"daggers"
::Long::"With a blade crafted out of one large shard of crystal, and "
"a handle made out of a harder, more sturdy chunk of crystal, this "
"dagger is quite stunning.  While it is more or less see-through and "
"doesn't look like it would last long in any normal fight, it does "
"look aesthetically pleasing as well as having a very sharp edge on "
"it, as if made from diamond.\n"
::Weight::4
::Length::10
::Width::2
::Material:: "stone" 
::Value::10000
::Setup::30000
::Damage Chance::20
::Attack::"slice", 75, ({ 10, 5, 20 }), "sharp", "sharp"
::Attack::"stab", 50, ({ 10, 2, 35 }), "pierce", "pierce"
::Property::"no recycling", 1


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/white_handled_ceremonial_bronze_knife.wep ===
::Name::"knife"
::Short::"white handled ceremonial bronze knife"
::Adjective::({ "white", "handled", "ceremonial", "bronze" })
::Main Plural::"white handled ceremonial bronze knives"
::Plural::"knives"
::Long::"This is a ceremonial knife, for use in magic rituals.  Its
ornate handle is made of ivory and its long bronze blade has been
carved with mystic runes.\n"
::Weight::11
::Length::18
::Width::3
::Material:: "bronze"
::Value::1000
::Setup::2000
::Attack::"slash", 70, ({ 10, 2, 20 }), "sharp", "sharp", 0
::Attack::"stab", 40, ({ 20, 2, 60 }), "pierce", "pierce", 0


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/.black_handled_ceremonial_bronze_knife.wep_virtual_.c ===
#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/black_handled_ceremonial_bronze_knife.wep#1" );
  call_other( clone, "set_name", "knife"  );
  call_other( clone, "set_short", "black handled ceremonial bronze knife"  );
  call_other( clone, "add_adjective", ({ "black", "handled", "ceremonial", "bronze" })  );
  call_other( clone, "set_main_plural", "black handled ceremonial bronze knives"  );
  call_other( clone, "add_plural", "knives"  );
  call_other( clone, "set_long", "This is a ceremonial knife, for use in magic rituals.  Its ornate handle is made of ebony and its long bronze blade has been carved with mystic runes.\n"  );
  call_other( clone, "set_weight", 11  );
  call_other( clone, "set_length", 13  );
  call_other( clone, "set_width", 4  );
  call_other( clone, "set_material", "copper"  );
  call_other( clone, "set_value", 1000  );
  call_other( clone, "new_weapon", 2000  );
  call_other( clone, "add_attack", "slash", 70, ({ 10, 2, 20 }), "sharp", "sharp", 0  );
  call_other( clone, "add_attack", "stab", 40, ({ 20, 2, 60 }), "pierce", "pierce", 0 );
   return clone;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/dagger.wep ===
::Name::"dagger"
::Short::"dagger"
::Adjective::({ })
::Alias::({ })
::Plural::({ "daggers" })
::Long:: "This is a largish looking knife.\n"
::Material::"steel"
::Weight::10
::Length::11
::Width::2
::Value:: 200
::Setup::12800
::Damage Chance::5
::Attack::"slash", 75, ({ 10, 5, 15 }), "sharp", "sharp"
::Attack::"stab", 50, ({ 10, 2, 25 }), "pierce", "pierce"


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/sapphire_hilted_knife.wep ===
::Name::"knife"
::Short::"sapphire hilted knife"
::Adjective::({ "sapphire", "hilted" })
::Main Plural::"sapphire hilted knives"
::Plural::"knives"
::Long::"With a long, one sharp sided blade this knife is pretty much "
"like any other knife, except it is quite a bit heavier.  The cause of "
"this is the large sapphire which resides at the base of the handle, "
"as well as the sapphires which have been crafted into the handle in "
"circles all the way up and down its length.  While the handle looks "
"pretty and quite intricate and delicate, the blade is a different "
"affair, a dark and evil affair.\n"
::Weight::5
::Length::10
::Width::2
::Material:: "steel" 
::Value::10000
::Setup::60000
::Damage Chance::10
::Attack::"slash", 70, ({ 10, 2, 20 }), "sharp", "sharp", 0
::Attack::"stab", 40, ({ 20, 2, 60 }), "pierce", "pierce", 0
::$add_immune::"sharp"
::Property::"no recycling", 1


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/small_copper_knife.wep ===
::Name::"knife"
::Short::"small copper knife"
::Main_plural::"small copper knives"
::Adjective::({ "small", "copper" })
::Long::"This is a small, Djelian, copper knife.  Its straight blade and hilt are undecorated, clean and functional.\n"
::Weight::5
::Length::8
::Width::3
::Material:: "copper"
::Value::100
::Setup::16000
::Attack::"slash", 100, ({ 10, 5, 10 }), "sharp", "sharp"
::Attack::"stab", 50, ({ 10, 2, 15 }), "pierce", "pierce"


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/tanto.wep ===
::Name::"tanto"
::Short::"tanto"
::Alias::"dagger"
::Plural::({"daggers","tantos"})
::Main Plural::"tantos"
::Long::"This large auriental dagger is an excellent weapon for close-in
fighting.  It is short, well crafted and looks pretty durable.\n"
::Weight::9
::Length::10
::Width::3
::Material::"steel"
::Value::4000
::Setup::50000
::Damage Chance::2
::Attack::"slash", 75, ({ 0, 2, 40 }), "sharp", "sharp", 0
::Attack::"stab", 50, ({ 9, 4, 30 }), "pierce", "pierce", 0



=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/stiletto.wep ===
::Name::"stiletto"
::Short::"stiletto"
::Alias::"knife"
::Adjective::"slender"
::Main Plural::"stilettoes"
::Plural::"knives"
::Long::"This is a slender knife with a dark steel blade, and sharp tip.  "
        "It's perfect for slipping between someone's ribs.\n"
::Weight::7
::Length::10
::Width::1
::Material:: "steel"
::Value::2000
::Setup:: 5000
::Damage Chance:: 5
::Attack:: "stab", 70, ({ 40, 4, 20 }), "pierce", "pierce"
#adding two attacks of the same name no longer adds two separate attacks
::Attack:: "stabstab", 70, ({ 40, 4, 20 }), "pierce", "pierce"
::No Limbs::1


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/.letter_opener.wep_virtual_.c ===
#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/letter_opener.wep#1" );
  call_other( clone, "set_name", "opener"  );
  call_other( clone, "set_short", "pearl-handled letter opener"  );
  call_other( clone, "add_adjective", ({ "pearl-handled", "pearl", "handled", "letter" })  );
  call_other( clone, "set_main_plural", "pearl-handled letter openers"  );
  call_other( clone, "set_long", "This letter opener has a lovely pearl handle.  It has a pointy blade that could come in handy in a crunch.\n"  );
  call_other( clone, "set_weight", 4  );
  call_other( clone, "set_length", 8  );
  call_other( clone, "set_width", 1  );
  call_other( clone, "set_material", "steel"  );
  call_other( clone, "set_value", 5000  );
  call_other( clone, "new_weapon", 1600  );
  call_other( clone, "set_damage_chance", 8  );
  call_other( clone, "add_attack", "stab", 40, ({ 30, 3, 10 }), "pierce", "pierce", 0 );
   return clone;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/meat_cleaver.wep ===
::Name::"cleaver"
::Short::"meat cleaver"
::Alias::({ "utensil", "knife" })
::Adjective::"meat"
::Main Plural::"meat cleavers"
::Plural::({ "utensils", "knives" })
::Long::"This is a butcher's implement for cutting animal carcasses into
joints or pieces.  It is a large, rectangular knife and is quite
heavy.\n"
::Weight::16
::Length:: 11
::Width::5
::Material:: "steel"
::Value::400
::Setup::750
::Damage Chance::5
::Attack::"slash", 50, ({ 10, 4, 10 }), "sharp", "sharp", 0
::Attack::"hack", 90, ({ 20, 3, 20 }), "sharp", "sharp", 0


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/chisel.wep ===
::Name::"chisel"
::Short::"chisel"
::Long::"This is a tool with a sharp edge which is used to shape and cut metal, wood, or stone.\n"
::Weight::11
::Length::6
::Width::3
::Material:: "steel"
::Value::300
::Setup::19200
::Damage Chance::5
::Attack::"slash", 30, ({ 10, 3, 10 }), "sharp", "sharp", 0
::Attack::"stab", 30, ({ 10, 3, 10 }), "pierce", "pierce", 0


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/copper_fighting_knife.wep ===
::Name::"knife"
::Short::"copper fighting knife"
::Main_plural::"copper fighting knives"
::Adjective::({ "copper", "fighting" })
::Long::"This Djelian copper knife is designed for fighting.  Its straight blade and hilt are undecorated, clean and functional.\n"
::Weight::9
::Length::10
::Width::2
::Material::"copper"
::Value::180
::Setup::32000
::Attack::"slash", 100, ({ 10, 5, 15 }), "sharp", "sharp"
::Attack::"stab", 50, ({ 10, 2, 20 }), "pierce", "pierce"


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/letter_opener.wep ===
::Name::"opener"
::Short::"pearl-handled letter opener"
::Adjective::({ "pearl-handled", "pearl", "handled", "letter" })
::Main Plural::"pearl-handled letter openers"
::Long::"This letter opener has a lovely pearl handle.  It has a pointy
blade that could come in handy in a crunch.\n"
::Weight::4
::Length::8
::Width::1
::Material::"steel"
::Value::5000
::Setup::1600
::Damage Chance::8
::Attack::"stab", 40, ({ 30, 3, 10 }), "pierce", "pierce", 0


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/.tanto.wep_virtual_.c ===
#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/tanto.wep#1" );
  call_other( clone, "set_name", "tanto"  );
  call_other( clone, "set_short", "tanto"  );
  call_other( clone, "add_alias", "dagger"  );
  call_other( clone, "add_plural", ({"daggers","tantos"})  );
  call_other( clone, "set_main_plural", "tantos"  );
  call_other( clone, "set_long", "This large auriental dagger is an excellent weapon for close-in fighting.  It is short, well crafted and looks pretty durable.\n"  );
  call_other( clone, "set_weight", 9  );
  call_other( clone, "set_length", 10  );
  call_other( clone, "set_width", 3  );
  call_other( clone, "set_material", "steel"  );
  call_other( clone, "set_value", 4000  );
  call_other( clone, "new_weapon", 50000  );
  call_other( clone, "set_damage_chance", 2  );
  call_other( clone, "add_attack", "slash", 75, ({ 0, 2, 40 }), "sharp", "sharp", 0  );
  call_other( clone, "add_attack", "stab", 50, ({ 9, 4, 30 }), "pierce", "pierce", 0 );
   return clone;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/scout_knife.wep ===
::Name::"knife"
::Short::"A short, sharp scout knife. "
::Adjective::({"short", "sharp", "scout"})
::Main Plural::"scout knives"
::Long::"This is a short, but very sharp knife.  " 
        "It was probably made to carve things with "
        "but if necessary, it could probably be a good weapon. /n"
::Weight::4
::Length::4
::Width::1
::Material:: "steel"
::Value::18
::Type::({"knife"})
::Damage Chance::15
::Property::"no recycling",1
::Setup::80
::Attack::"slash", 90, ({ 0, 1, 25 }), "sharp", "sharp"
::Attack::"stab", 90, ({ 0, 1, 25 }), "pierce", "pierce"


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/silver_sickle.wep ===
::Name::"sickle"
::Short::"silver sickle"
::Adjective::"silver"
::Long::"This is a dagger with a crescent shaped blade cast from silver.\n"
::Weight::9
::Length::12
::Width::8
::Material:: "silver"
::Value:: 2000
::Setup::12800
::Damage Chance::5
::Attack:: "slash", 75, ({ 10, 5, 15 }), "sharp", "sharp"
::Attack:: "stab", 50, ({ 10, 2, 25 }), "pierce", "pierce"


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/emerald_hilted_knife.wep ===
::Name::"knife"
::Short::"emerald hilted knife"
::Adjective::({ "emerald", "hilted" })
::Main Plural::"emerald hilted knives"
::Plural::"knives"
::Long::"With a long, one sharp sided blade this knife is pretty much "
"like any other knife, except it is quite a bit heavier.  The cause of "
"this is the large emerald which resides at the base of the handle, "
"as well as the emeralds which have been crafted into the handle in "
"circles all the way up and down its length.  While the handle looks "
"pretty and quite intricate and delicate, the blade is a different "
"affair, a dark and evil affair.\n"
::Weight::5
::Length::10
::Width::2
::Material:: "steel"
::Value::10000
::Setup::60000
::Damage Chance::10
::Attack::"slash", 70, ({ 10, 2, 20 }), "sharp", "sharp", 0
::Attack::"stab", 40, ({ 20, 2, 60 }), "pierce", "pierce", 0
::$add_immune::"sharp"
::Property::"no recycling", 1


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/.stiletto.wep_virtual_.c ===
#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/stiletto.wep#1" );
  call_other( clone, "set_name", "stiletto"  );
  call_other( clone, "set_short", "stiletto"  );
  call_other( clone, "add_alias", "knife"  );
  call_other( clone, "add_adjective", "slender"  );
  call_other( clone, "set_main_plural", "stilettoes"  );
  call_other( clone, "add_plural", "knives"  );
  call_other( clone, "set_long", "This is a slender knife with a dark steel blade, and sharp tip.  "         "It's perfect for slipping between someone's ribs.\n"  );
  call_other( clone, "set_weight", 7  );
  call_other( clone, "set_length", 10  );
  call_other( clone, "set_width", 1  );
  call_other( clone, "set_material",  "steel"  );
  call_other( clone, "set_value", 2000  );
  call_other( clone, "new_weapon",  5000  );
  call_other( clone, "set_damage_chance",  5  );
  call_other( clone, "add_attack",  "stab", 70, ({ 40, 4, 20 }), "pierce", "pierce"  );
  call_other( clone, "add_attack",  "stabstab", 70, ({ 40, 4, 20 }), "pierce", "pierce"  );
  call_other( clone, "set_no_limbs", 1 );
   return clone;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/ruby_hilted_knife.wep ===
::Name::"knife"
::Short::"ruby hilted knife"
::Adjective::({ "ruby", "hilted" })
::Main Plural::"ruby hilted knives"
::Plural::"knives"
::Long::"With a long, one sharp sided blade this knife is pretty much "
"like any other knife, except it is quite a bit heavier.  The cause of "
"this is the large ruby which resides at the base of the handle, "
"as well as the rubies which have been crafted into the handle in "
"circles all the way up and down its length.  While the handle looks "
"pretty and quite intricate and delicate, the blade is a different "
"affair, a dark and evil affair.\n"
::Weight::5
::Length::10
::Width::2
::Material:: "steel" 
::Value::10000
::Setup::60000
::Damage Chance::10
::Attack::"slash", 70, ({ 10, 2, 20 }), "sharp", "sharp", 0
::Attack::"stab", 40, ({ 20, 2, 60 }), "pierce", "pierce", 0
::$add_immune::"sharp"
::Property::"no recycling", 1


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/sapphire_hilted_dagger.wep ===
::Name::"dagger"
::Short::"sapphire hilted dagger"
::Adjective::({ "sapphire", "hilted" })
::Main Plural::"sapphire hilted daggers"
::Plural::"daggers"
::Long::"The short, fairly thick and double edged blade of this dagger looks
pretty much like any other, except that this particular one has an odd bluish
hue about it.  The hue is augmented by an almost clear blue stone which
resides in the small pommel of the dagger and appears to glow with its own
light.  While the blade and pommel shine a crystal blue, the handle itself
doesn't, in fact the handle is just a plain, everyday dagger handle with a
leather criss-crossed grip.\n"
::Weight::4
::Length::10
::Width::2
::Material:: "steel" 
::Value::10000
::Setup::60000
::Damage Chance::10
::Attack::"slash", 75, ({ 10, 5, 15 }), "sharp", "sharp"
::Attack::"stab", 50, ({ 10, 2, 25 }), "pierce", "pierce"
::$add_immune::"sharp"
::Property::"no recycling", 1


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/.small_knife.wep_virtual_.c ===
#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/small_knife.wep#1" );
  call_other( clone, "set_name", "knife"  );
  call_other( clone, "set_short", "small knife"  );
  call_other( clone, "add_adjective", ({ "small" })  );
  call_other( clone, "add_alias", "utensil"  );
  call_other( clone, "add_plural", "utensils"  );
  call_other( clone, "set_long", "This small knife might be the sort of thing " "you'd use to peel an apple, slice carrots or " "stab in someone's kidney.  You could say " "that it's a multi-purpose utensil.\n"  );
  call_other( clone, "set_weight", 6  );
  call_other( clone, "set_length", 7  );
  call_other( clone, "set_width", 1  );
  call_other( clone, "set_material",  "steel"  );
  call_other( clone, "set_value", 50  );
  call_other( clone, "new_weapon", 500  );
  call_other( clone, "add_attack", "slash", 70, ({ 5, 2, 20 }), "sharp", "sharp", 0  );
  call_other( clone, "add_attack", "stab", 40, ({ 10, 2, 30 }), "pierce", "pierce", 0 );
   return clone;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/knife.wep ===
::Name::"knife"
::Short::"knife"
::Adjective::({ "medium-sized", "medium" })
::Main Plural::"knives"
::Long::"This is a medium-sized knife, the sort of thing someone might
keep in a boot to ward off a would-be attacker.  You just have to hope
that it's not then used to prepare your dinner.\n"
::Weight::8
::Length::7
::Width::2
::Material:: "steel"
::Value::100
::Setup::9000
::Attack:: "slash", 70, ({ 10, 3, 20 }), "sharp", "sharp", 0
::Attack:: "stab", 40, ({ 15, 3, 30 }), "pierce", "pierce", 0


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/.small_copper_knife.wep_virtual_.c ===
#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/small_copper_knife.wep#1" );
  call_other( clone, "set_name", "knife"  );
  call_other( clone, "set_short", "small copper knife"  );
  call_other( clone, "set_main_plural", "small copper knives"  );
  call_other( clone, "add_adjective", ({ "small", "copper" })  );
  call_other( clone, "set_long", "This is a small, Djelian, copper knife.  Its straight blade and hilt are undecorated, clean and functional.\n"  );
  call_other( clone, "set_weight", 5  );
  call_other( clone, "set_length", 8  );
  call_other( clone, "set_width", 3  );
  call_other( clone, "set_material",  "copper"  );
  call_other( clone, "set_value", 100  );
  call_other( clone, "new_weapon", 16000  );
  call_other( clone, "add_attack", "slash", 100, ({ 10, 5, 10 }), "sharp", "sharp"  );
  call_other( clone, "add_attack", "stab", 50, ({ 10, 2, 15 }), "pierce", "pierce" );
   return clone;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/.dagger.wep_virtual_.c ===
#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/dagger.wep#1" );
  call_other( clone, "set_name", "dagger"  );
  call_other( clone, "set_short", "dagger"  );
  call_other( clone, "add_adjective", ({ })  );
  call_other( clone, "add_alias", ({ })  );
  call_other( clone, "add_plural", ({ "daggers" })  );
  call_other( clone, "set_long",  "This is a largish looking knife.\n"  );
  call_other( clone, "set_material", "steel"  );
  call_other( clone, "set_weight", 10  );
  call_other( clone, "set_length", 11  );
  call_other( clone, "set_width", 2  );
  call_other( clone, "set_value",  200  );
  call_other( clone, "new_weapon", 12800  );
  call_other( clone, "set_damage_chance", 5  );
  call_other( clone, "add_attack", "slash", 75, ({ 10, 5, 15 }), "sharp", "sharp"  );
  call_other( clone, "add_attack", "stab", 50, ({ 10, 2, 25 }), "pierce", "pierce" );
   return clone;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/.white_handled_ceremonial_bronze_knife.wep_virtual_.c ===
#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/white_handled_ceremonial_bronze_knife.wep#1" );
  call_other( clone, "set_name", "knife"  );
  call_other( clone, "set_short", "white handled ceremonial bronze knife"  );
  call_other( clone, "add_adjective", ({ "white", "handled", "ceremonial", "bronze" })  );
  call_other( clone, "set_main_plural", "white handled ceremonial bronze knives"  );
  call_other( clone, "add_plural", "knives"  );
  call_other( clone, "set_long", "This is a ceremonial knife, for use in magic rituals.  Its ornate handle is made of ivory and its long bronze blade has been carved with mystic runes.\n"  );
  call_other( clone, "set_weight", 11  );
  call_other( clone, "set_length", 18  );
  call_other( clone, "set_width", 3  );
  call_other( clone, "set_material",  "bronze"  );
  call_other( clone, "set_value", 1000  );
  call_other( clone, "new_weapon", 2000  );
  call_other( clone, "add_attack", "slash", 70, ({ 10, 2, 20 }), "sharp", "sharp", 0  );
  call_other( clone, "add_attack", "stab", 40, ({ 20, 2, 60 }), "pierce", "pierce", 0 );
   return clone;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/howondalandish_throwing_knife.wep ===
::Name::"knife"
::Adjective::({ "howondalandish", "throwing" })
::Short::"howondalandish throwing knife"
::Main Plural::"howondalandish throwing knives"
::Long::"From one of the more remote Howondalandish tribes, this knife "
  "doesn't look throwable, much less a knife.  From a short handle, "
  "spiky steel blades jut out at all angles, sure to deliver a nasty "
  "shock to whoever gets hit with it.\n"
::Weight::9
::Length::9
::Width::3
::Material::"steel"
::Setup::200
::Damage Chance::10
::Attack::"stab", 60, ({ 40, 3, 30 }), "pierce", "pierce", 0
::Attack::"slash", 60, ({ 25, 5, 30 }), "sharp", "sharp", 0
::Value::7000


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/.copper_fighting_knife.wep_virtual_.c ===
#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/copper_fighting_knife.wep#1" );
  call_other( clone, "set_name", "knife"  );
  call_other( clone, "set_short", "copper fighting knife"  );
  call_other( clone, "set_main_plural", "copper fighting knives"  );
  call_other( clone, "add_adjective", ({ "copper", "fighting" })  );
  call_other( clone, "set_long", "This Djelian copper knife is designed for fighting.  Its straight blade and hilt are undecorated, clean and functional.\n"  );
  call_other( clone, "set_weight", 9  );
  call_other( clone, "set_length", 10  );
  call_other( clone, "set_width", 2  );
  call_other( clone, "set_material", "copper"  );
  call_other( clone, "set_value", 180  );
  call_other( clone, "new_weapon", 32000  );
  call_other( clone, "add_attack", "slash", 100, ({ 10, 5, 15 }), "sharp", "sharp"  );
  call_other( clone, "add_attack", "stab", 50, ({ 10, 2, 20 }), "pierce", "pierce" );
   return clone;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/.klatchian_steel_dirk.wep_virtual_.c ===
#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/klatchian_steel_dirk.wep#1" );
  call_other( clone, "set_name", "dirk"  );
  call_other( clone, "set_short", "Klatchian steel dirk"  );
  call_other( clone, "add_adjective", ({ "klatchian", "steel" })  );
  call_other( clone, "add_alias", "dagger"  );
  call_other( clone, "add_plural", "daggers"  );
  call_other( clone, "set_long", "This is a very long, curving knife with a wickedly sharp point.  It is made of Klatchian steel.\n"  );
  call_other( clone, "set_weight", 12  );
  call_other( clone, "set_length", 18  );
  call_other( clone, "set_width", 3  );
  call_other( clone, "set_material", "steel"  );
  call_other( clone, "set_value", 400  );
  call_other( clone, "new_weapon", 32000  );
  call_other( clone, "set_damage_chance", 5  );
  call_other( clone, "add_attack", "slash", 75, ({ 10, 5, 20 }), "sharp", "sharp"  );
  call_other( clone, "add_attack", "stab", 50, ({ 10, 2, 27 }), "pierce", "pierce" );
   return clone;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/.meat_cleaver.wep_virtual_.c ===
#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/meat_cleaver.wep#1" );
  call_other( clone, "set_name", "cleaver"  );
  call_other( clone, "set_short", "meat cleaver"  );
  call_other( clone, "add_alias", ({ "utensil", "knife" })  );
  call_other( clone, "add_adjective", "meat"  );
  call_other( clone, "set_main_plural", "meat cleavers"  );
  call_other( clone, "add_plural", ({ "utensils", "knives" })  );
  call_other( clone, "set_long", "This is a butcher's implement for cutting animal carcasses into joints or pieces.  It is a large, rectangular knife and is quite heavy.\n"  );
  call_other( clone, "set_weight", 16  );
  call_other( clone, "set_length",  11  );
  call_other( clone, "set_width", 5  );
  call_other( clone, "set_material",  "steel"  );
  call_other( clone, "set_value", 400  );
  call_other( clone, "new_weapon", 750  );
  call_other( clone, "set_damage_chance", 5  );
  call_other( clone, "add_attack", "slash", 50, ({ 10, 4, 10 }), "sharp", "sharp", 0  );
  call_other( clone, "add_attack", "hack", 90, ({ 20, 3, 20 }), "sharp", "sharp", 0 );
   return clone;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/.howondalandish_throwing_knife.wep_virtual_.c ===
#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/weapon.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/howondalandish_throwing_knife.wep#1" );
  call_other( clone, "set_name", "knife"  );
  call_other( clone, "add_adjective", ({ "howondalandish", "throwing" })  );
  call_other( clone, "set_short", "howondalandish throwing knife"  );
  call_other( clone, "set_main_plural", "howondalandish throwing knives"  );
  call_other( clone, "set_long", "From one of the more remote Howondalandish tribes, this knife "   "doesn't look throwable, much less a knife.  From a short handle, "   "spiky steel blades jut out at all angles, sure to deliver a nasty "   "shock to whoever gets hit with it.\n"  );
  call_other( clone, "set_weight", 9  );
  call_other( clone, "set_length", 9  );
  call_other( clone, "set_width", 3  );
  call_other( clone, "set_material", "steel"  );
  call_other( clone, "new_weapon", 200  );
  call_other( clone, "set_damage_chance", 10  );
  call_other( clone, "add_attack", "stab", 60, ({ 40, 3, 30 }), "pierce", "pierce", 0  );
  call_other( clone, "add_attack", "slash", 60, ({ 25, 5, 30 }), "sharp", "sharp", 0  );
  call_other( clone, "set_value", 7000 );
   return clone;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/weapons/knives/crystal_bladed_knife.wep ===
::Name::"knife"
::Short::"crystal bladed knife"
::Adjective::({ "crystal", "bladed" })
::Main Plural::"crystal bladed knives"
::Plural::"knives"
::Long::"Carefully crafted out of a single piece of crystal, the edge "
"on this knife is incredibly sharp.  While it is sharp and undeniably "
"a beautiful weapon, it is also a fragile one, one which probably "
"wouldn't last to long in a typical fight, or in the hands of someone "
"inexperienced.  It could be well used as just a trinket or ornament "
"to adorn some warriors belt, if a barbarian warrior wanted something "
"aesthetically pleasing about their person.\n"
::Weight::4
::Length::10
::Width::2
::Material:: "stone" 
::Value::10000
::Setup::30000
::Damage Chance::20
::Attack:: "slash", 70, ({ 10, 3, 20 }), "sharp", "sharp", 0
::Attack:: "stab", 40, ({ 15, 3, 40 }), "pierce", "pierce", 0
::Property::"no recycling", 1

