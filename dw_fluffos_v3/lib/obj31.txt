
=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/player_shop/staff_book.c ===
#include <player_shop.h>
inherit "/std/book";
private string _office = "";
void setup()
{
   set_name( "book" );
   add_alias( "handbook" );
   set_short( "staff handbook");
   set_main_plural( "staff handbooks" );
   add_adjective( "staff" );
   set_weight( 5 );
   set_value( 5 );
   set_no_pages( 12 );
   add_property( "no recycling", 1 );
}
private string cap_name(string name)
{
   if (test_player(name))
      return PLAYER_HANDLER->query_cap_name(name);
   else return capitalize(name);
}
void set_office( string office )
{
   _office = office;
   if ( !query_property( "office" ) )
   {
      add_property( "office", office );
   }
   set_long( "This is a handbook for staff of "+
     office->query_shop_name()+ ", " + office->query_place()+
     ".  It covers all aspects of the job.\n"
     "You may <read book>, <open book to page #> and "
     "<turn a page of book>.\n" );
   set_open_page( 1 );
   set_read_mess( "\n"
     "                            TABLE OF CONTENTS                    Page 1\n"
     "                    .o0o.o0o.o0o.o0o.o0o.o0o.o0o.o0o.\n\n"
     "       Introduction............................................2-4\n"
     "       The job.................................................5-6\n"
     "       The office..............................................6-7\n"
     "       The counter.............................................8\n"
     "       The storeroom...........................................9\n"
     "       The shopkeeper..........................................10\n"
     "       Promotion and pay.......................................11\n"
     "       Termination of employment...............................12\n\n",
     "common", 100 );
   set_open_page( 2 );
   set_read_mess( "\n"
     "                               Introduction                      Page 2\n"
     "                           -=-=-=-=-==-=-=-=-=-\n\n"
     " Welcome to "+ office->query_shop_name()+ ".\n"
     " This is a player-run shop, designed to operate interactively with its\n"
     " employees with minimal input from creators.\n"
     " Players are able to sell items to and buy them from the shop, just like\n"
     " a regular shop, but prices should be set such that it is advantageous\n"
     " to deal with us,  rather than some other general shop.\n\n"
     " A list of items in which the shop deals is maintained in the shop's\n"
     " office, where a chart shows the buying and selling prices of items,\n"
     " as well as how many are in stock, the maximum number that the shop\n"
     " will keep in stock and the average number that has recently been in\n"
     " stock; the stock itself is saved over a reboot.        (Continued...)",
     "common", 100 );
   set_open_page( 3 );
   set_read_mess( "\n"
     "                                                                 Page 3\n\n"
     " The most important feature of the shop is that it is run by players,\n"
     " with a non-player employee who stands in when there are no player\n"
     " employees about.  Players who work faithfully for the shop will be\n"
     " promoted to supervisor and then to manager, as well as receiving a\n"
     " regular wage which increases with employment level.\n\n"
     " As well as hiring new employees, managers are also responsible for\n"
     " firing employees who break trust.  Supervisors (and managers) are\n"
     " responsible for keeping the shop running efficiently by adding new\n"
     " items to those in which the shop deals, by adjusting selling and\n"
     " buying prices and inventory limits to reflect supply and demand and\n"
     " by removing items in which it is no longer reasonable to deal.\n\n"
     " Supervisors are also given access to the shop's log books which\n"
     " contain details of everything that happens.           (Continued...)",
     "common", 100 );
   set_open_page( 4 );
   set_read_mess( "\n"
     "                                                                 Page 4\n\n"
     " Finally, while it is intended, and hoped, that the shop will run\n"
     " autonomously under player control, it is inevitable that problems\n"
     " will arise from time to time which cannot be solved by the shop's\n"
     " player managers and supervisors.  Should such problems arise, please\n"
     " don't hesitate to contact myself or another creator.\n"
     " Enjoy your time with "+ _office->query_shop_name()+ ".\n "+
     cap_name( _office->query_creator() )+ " (caretaker)\n", "common", 100 );
   set_open_page( 5 );
   set_read_mess( "\n"
     "                                 The Job                         Page 5\n"
     "                               -=-=-=-=-=-\n\n"
     " It is the responsibility of employees to ensure that the shop is\n"
     " kept as fully stocked as possible.  This may be achieved by buying\n"
     " items from players, or by collecting the items yourself.  Although\n"
     " you are not expected to come running to the shop every time a\n"
     " customer walks in, once you are clocked in, you should not leave\n"
     " the shop until you clock out again.\n\n"
     " All of the commands that are available to the shop's employees\n"
     " should be obvious from the various rooms of the shop; those available\n"
     " in the office are described by giving the command %^B_RED%^office%^RESET%^.\n"
     " Possibly the most important command is %^B_RED%^log%^RESET%^, which must be "
     "used to record\n"
     " each transaction.  All activity within the shop is logged, and so it is\n"
     " vital to record each sale and purchase in the correct manner so that the\n"
     " shop's supervisors and managers can see what happened when they examine\n"
     " the logs.  Examples of the \"log\" command are given in the section\n"
     " dealing with the counter.\n",
     "common", 100 );
   set_open_page( 6 );
   set_read_mess( "\n"
     "                               The Office                          Page 6\n"
     "                             -=-=-=-==-=-=-\n\n"
     " The office of the shop is the nerve-centre.  This is where you can\n"
     " obtain most of your information, and is where you clock in and out.\n"
     " A description of the \"office\" commands you can use from here is\n"
     " given below.\n\n"
     " clock - Clock in or out of work.  You are only paid for the work\n"
     "         you do whilst you are clocked in.\n"
     " claim - Claim a staff badge, a copy of this book, or your monthly\n"
     "         bonus.  The badge itself has some nifty functions - look\n"
     "         at one for further information.\n"
     " list - List the employees of the shop, and find out your current\n"
     "        standing for promotion.  This shows the percentage of points\n"
     "        you have achieved towards your next promotion.\n"
     " bank - Change, or check your banking details.  Your pay can be paid\n"
     "        into the bank of your choice.  Your bonus is given in cash when\n"
     "        you \"claim\" it.\n"
     " promotion - Allows you to specify whether to be automatically promoted\n"
     "             or not.  If not, you will not be promoted once gaining the\n"
     "             required points until you specify otherwise.\n"
     " resign - End your employment with the shop.             (Continued...)\n",
     "common", 100 );
   set_open_page( 7 );
   set_read_mess( "\n"
     "                                                                 Page 7\n\n"
     " Supervisors receive two additional commands - \"chart\" and \"logs\".\n"
     " The \"logs\" command allows a supervisor to review the logs, whilst the\n"
     " \"chart\" command allows them to add and remove items from the shop's\n"
     " list, set the maximum stock level, buy & sell prices, and assign them\n"
     " to a cabinet.  If an item is not assigned to a cabinet, it cannot be\n"
     " stored.  The \"check\" command allows supervisors to check which items\n"
     " are allocated to each cabinet.\n"
     " It is important to note that an item can be assigned to more than one\n"
     " cabinet, and that a cabinet can be assigned more than one item.  It is\n"
     " the supervisor's responsibility to ensure that items are judiciously\n"
     " assigned to ensure that the most efficient use is made of the available\n"
     " storage space.\n"
     " To view details of items stocked by the shop, simply \"look\" at the\n"
     " chart in the office.\n\n"
     " In addition, if there is no notice board in the shop, employees may use\n"
     " the \"memo\" command to send a mail to all the employees of the shop.\n",
     "common", 100 );
   set_open_page( 8 );
   set_read_mess( "\n"
     "                               The Counter                        Page 8\n"
     "                             -=-=-=-=-=-=-=-\n\n"
     " The counter houses the shop's cash register, and allows employees to\n"
     " \"log\" transactions.  There is also a \"calc\"ulator for use in those\n"
     " difficult situations.  All monies entering or exiting the register are\n"
     " logged, so if you are tempted, please bear in mind that supervisors can\n"
     " see exactly who took that $1000 from the till ;-)\n\n"
     " The log command can be confusing, so the following examples have been\n"
     " provided.  All entries are made from the point of view of the shop with\n"
     " the syntax: %^B_RED%^log shop bought|sold <quantity> <item> for <amount>%^RESET%^.\n"
     " Examples:\n\n"
     " A customer sells 5 gizmos to the shop at 20 pence each. The log entry is:\n"
     " %^B_RED%^log shop bought 5 gizmos for 100p%^RESET%^ (or $1 instead of 100p)\n\n"
     " A customer buys 20 elephants from the shop at 10 pence each.\n"
     " The log entry is:\n"
     " %^B_RED%^log shop sold 20 elephants for 200p%^RESET%^ (or $2 instead of 200p)\n\n"
     " If you do happen to make an error whilst logging a transaction, you\n"
     " may use the \"correction\" facility to note the error.  This will\n"
     " not erase the error, but will clarify that an error has been made.\n"
     " The syntax is the same as that of \"log\".\n\n"
	  " Please note that these are examples only, and you may be using a different\n"
	  " currency.\n\n",
     "common", 100 );
   set_open_page( 9 );
   set_read_mess( "\n"
     "                               The Storeroom                      Page 9\n"
     "                             -=-=-=-=-=-=-=-=-\n\n"
     " The storeroom, unsurprisingly, is where the shop's stock is stored.\n"
     " The stock itself is stored in several store cabinets, located in this\n"
     " room.  Each cabinet has a maximum stock capacity of "+ STOCK_PER_CABINET+ ".\n"
     " There are three commands available for dealing with the stock:\n\n"
     "   add - add items to the stock\n"
     "   remove - remove items from the stock\n"
     "   list - list all stock, or individual items\n\n"
     " These commands can be used relative to the whole stock, or by an\n"
     " individual cabinet.  For example, to add 10 beans to the stock, you\n"
     " could let the storeroom decide where to put the items by saying:\n"
     "   \"add 10 beans\"\n"
     " or specify a cabinet in which to place the beans:\n"
     "   \"add 10 beans to cabinet 1\"\n"
     " Generally, it is easier to use the first syntax and let the storeroom\n"
     " decide things for you.  Be aware that it will not let you place an item\n"
     " in the wrong cabinet, or in a cabinet that is full.\n"
     " For more information, see \"syntax <command>\"\n\n", "common", 100 );
    set_open_page( 10 );
    set_read_mess( "\n"
     "                              The Shopkeeper                     Page 10\n"
     "                           -=-=-=-=-=-=-=-=-=-\n\n"
     " With regard to the shopkeeper, when you leave the shop for other\n"
     " activities, it is important to clock out in order that they can be\n"
     " summoned from their home to staff the shop.  Conversely, when you clock\n"
     " in for work, say to them that you'll take over, and they will return\n"
     " home. Please also make sure that the cash register always contains\n"
     " plenty of the lowest denomination coins as, for religious reasons,\n"
     " they are incapable of handling the larger denominations of coinage.\n",
     "common", 100 );
   set_open_page( 11 );
   set_read_mess( "\n"
     "                              Promotion and pay                  Page 11\n"
     "                           -=-=-=-=-=-=-=-=-=-=-=-\n\n"
     " Promotion within the shop depends entirely on how much work an\n"
     " employee does.  Once an employee has done the required amount,\n"
     " they will be promoted automatically unless they have requested\n"
     " otherwise.  When you are promoted to supervisor, you will gain\n"
     " access to the shop's logs and also be able to add/remove items\n"
     " from the chart as well as adjust the buy/sell and maximum stock\n"
     " level of those items.  After even more work, the dedicated employees\n"
     " will be promoted to manager.\n"
     " Pay is also based on the amount of work that you do.  You will be\n"
     " paid each month directly into your bank account at whichever bank\n"
     " you specify in the office.  As a supervisor or manager, you will\n"
     " enjoy a higher rate of pay.\n"
     " Managers are responsible for allocating funds towards the monthly\n"
     " bonus fund.  This fund will be divided up between employees at the\n"
     " end of each month as long as those employees have been employed for\n"
     " the full month, and have not had their bonus suspended.\n"
     " It is up to each individual to claim their bonus during that month.\n"
     " All unclaimed bonuses will be added to the next month's fund.\n",
     "common", 100 );
   set_open_page( 12 );
   set_read_mess( "\n"
     "                         Termination of employment                Page 12\n"
     "                      -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n\n"
     " If you no longer wish to work at the shop then you can resign from\n"
     " your position.  This can be done from the shop office.  If you do\n"
     " resign, please remember to return your employee badge.\n\n"
     " Managers have the power to fire employees for breach of trust.\n"
     " Reasons for dismissal include (but are not restricted to):\n"
     "     Dishonesty (Stealing items or cash from the shop)\n"
     "     Inactivity (Not working in the shop for prolonged periods)\n"
     "     The killing of any employee on duty\n"
     "     The killing of anybody whilst on duty\n"
     "     Not returning to the shop whilst on duty\n"
     "     Teleporting into or encoding the location of employee areas\n\n"
     " If you are fired without good reason, then you can appeal to any\n"
     " manager.  Bear in mind though, that all decisions taken with regard\n"
     " to the hiring and firing of employees will normally have been\n"
     " discussed by the managers beforehand and will usually have been\n"
     " preceded by a warning.\n", "common", 100 );
   set_open_page( 0 );
}
void init ()
{
   set_open_page( 0 );
   if ( !_office || _office == "" )
   {
      if ( !query_property( "office" ) )
      {
         return;
      }
      _office = query_property( "office" );
      set_office( _office );
   }
   if ( !_office->query_employee( environment( this_object() )->query_name() ) &&
     !_office->query_retired( environment( this_object() )->query_name() ) &&
     !environment( this_object() )->query_creator() )
   {
      return;
   }
   ::init();
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/player_shop/mgr_book.c ===
#include "player_shop.h"
inherit "/std/book";
private string _office;
void setup() {
    set_name( "book" );
    add_alias( "handbook" );
    set_short( "manager handbook");
    set_main_plural( "manager handbooks" );
    add_adjective( "manager" );
    set_weight( 5 );
    set_value( 5 );
    set_no_pages( 11 );
    add_property( "no recycling", 1 );
}
private string cap_name(string name)
{
   if (test_player(name))
      return PLAYER_HANDLER->query_cap_name(name);
   else return capitalize(name);
}
void set_office( string office ) {
   _office = office;
   if ( !query_property( "office" ) ) {
      add_property( "office", office );
   }
   set_long( "This is a handbook for Managers of "+ office->query_shop_name()+
     ", "+ office->query_place()+ ".  It covers those aspects of "
     "the managers' job not covered by the staff handbook.\n"
     "You may <read book>, <open book to page #> and "
     "<turn a page of book>.\n" );
    set_open_page( 1 );
    set_read_mess( "\n"
      "                            TABLE OF CONTENTS                    Page 1\n"
      "                    .o0o.o0o.o0o.o0o.o0o.o0o.o0o.o0o.\n\n"
      "       Introduction............................................2\n"
      "       The job.................................................3\n"
      "       The way things work.....................................4\n"
      "       Specific commands.......................................5-7\n"
      "       Hiring new employees....................................8-9\n"
      "       Disciplinary procedures.................................10-11\n",
      "common", 100 );
    set_open_page( 2 );
    set_read_mess( "\n"
      "                               Introduction                      Page 2\n"
      "                           -=-=-=-=-==-=-=-=-=-\n\n"
      " This handbook has been written specifically for managers to detail\n"
      " your role in the shop.  You will find details of commands specific\n"
      " to managers, and a more detailed explanation of the workings of the\n"
      " shop.  This book is to be treated as a confidential document, and its\n"
      " contents only to be discussed with other managers.\n",
      "common", 100 );
    set_open_page( 3 );
    set_read_mess( "\n"
      "                                 The Job                         Page 3\n"
      "                               -=-=-=-=-=-\n\n"
      " It is the responsibility of managers to ensure the smooth operation\n"
      " of the shop.  This includes staff motivation, advertising, pay and\n"
      " staffing levels, accounts, discipline and personnel.\n"
      " Motivation and advertisements are left to the judgement of managers,\n"
      " whilst the personnel issues should follow strict guidelines detailed\n"
      " later.\n\n"
      " As you should be aware, since you now hold the highest position in the\n"
      " store, there is nothing to work towards regarding your promotion.  You\n"
      " are paid at a higher rate, however, so there are still benefits to be\n"
      " obtained from carrying out the more 'mundane' tasks within the shop.\n\n"
      " Finally, managers are allowed to \"retire\" and continue in an advisory\n"
      " capacity.  Whilst having very limited functional control over the\n"
      " shop, retired managers are still able to keep their badge, and use\n"
      " the notice board and \"memo\" facility.\n",
      "common", 100 );
    set_open_page( 4 );
    set_read_mess( "\n"
      "                           The way things work                   Page 4\n"
      "                         -=-=-=-=-=-=-=-=-=-=-=-\n\n"
      " On being hired, employees are paid according to the amount of work\n"
      " they do.  Along with their pay, they accumulate points towards\n"
      " promotion in the shop.  The pay and points depend on the amount of\n"
      " work done, and not on the amount of time spent in the shop.  Precisely,\n"
      " employees receive a set amount per transaction, with a maximum of one\n"
      " paid transaction every minute.\n"
      " Each employee's status is reviewed every 3 DW days, their points added,\n"
      " and their pay awarded.  This pay is transferred into their bank account\n"
      " every month, and a written confirmation of the amount is sent.\n"
      " Employees are paid according to their status.  This is done in a ratio\n"
      " of 2:3:4 so that managers will be paid twice as much as employees, with\n"
      " supervisors halfway in between.  The bonuses are calculated in the same\n"
      " way.\n",
      "common", 100 );
    set_open_page( 5 );
    set_read_mess( "\n"
      "                              Specific commands                  Page 5\n"
      "                           -=-=-=-=-=-=-=-=-=-=-=-\n\n"
      " There are a number of additional commands once promotion to manager\n"
      " is gained.  The majority of these are rather self-explanatory, and\n"
      " so will only be covered briefly.  The remainder merit an explanation.\n\n"
      " accounts - Check the current value of the accounts\n"
      " list - As in the main office, with the addition of baddies & applicants\n"
      " mail - Yes, you now have access to your mail from the managers' office\n"
      " memo - Send a memo to the other managers of the shop\n"
      " retire - The alternative to resignation\n"
      " view - View a person's record with this shop.  This is extremely useful\n"
      "        when deciding on disciplinary matters, or before hiring applicants\n"
      " query - Check the current settings for maximum number of employees and\n"
      "         pay rates\n"
      " project - Gives a projection of the months' pay packet based on the\n"
      "           employees' activity so far, and also the projected bonus amounts\n"
      "           based on the current value of the bonus fund.  Useful when setting\n"
      "           these values\n"
      " transfer - Transfer money between two accounts                (Continued...)\n",
      "common", 100 );
    set_open_page( 6 );
    set_read_mess( "\n"
      "                                                                 Page 6\n\n"
      " set - This command sets the maximum number of employees (speaks for\n"
      "       itself), or the base pay rate.  The base pay rate is the amount\n"
      "       that each employee will receive per transaction.  This rate is\n"
      "       then adjusted accordingly for supervisors and managers.\n"
      "       Changing this amount will not affect transactions already made\n"
      "       by employees, but will affect all subsequent transactions.\n"
      " buy/sell - These commands are used to buy and sell storeroom cabinets.\n"
      "            Cabinets are sold for 50% of the buying price, so make sure\n"
      "            you really do want a cabinet before buying it as they can be\n"
      "            expensive.\n"
      " (un)ban - These commands are used to ban or unban a person from the shop.\n"
      "           A person can be banned automatically, and will also be unbanned\n"
      "           automatically after 28 days.  If, however, you wish to unban\n"
      "           someone sooner, you may do so with this command.\n"
      " vote - Allows you to vote for, against, or abstain on an applicant.  This\n"
      "        will be your only chance to vote on this applicant, so make sure it\n"
      "        is the right decision.\n"
      " check - Allows you to check your current votes               (Continued...)\n",
      "common", 100 );
    set_open_page( 7 );
    set_read_mess( "\n"
      "                                                                 Page 7\n\n"
      " leave - Allows you to place an employee on leave for up to 14 days\n"
      " commend - Allows you to commend an outstanding employee.  This will\n"
      "           place an entry in their employment record, and award them\n"
      "           extra promotion points.\n"
      " warn - Officially reprimand an employee.  Will place an entry in their\n"
      "        record, and deduct promotion points.\n"
      " suspend - Suspend an employee's bonus entitlement for a specified\n"
      "           number of months following the current month.\n"
      " demote - Demote a supervisor to employee.  Will start them off as if\n"
      "          they were a new employee, but with their employment record\n"
      "          reflecting their history.\n"
      " fire - Terminate someone's employment with this shop.\n",
      "common", 100 );
    set_open_page( 8 );
    set_read_mess( "\n"
      "                            Hiring new employees                Page 8\n"
      "                        -=-=-=-=-=-=-=-=-=-=-=-=-=-\n\n"
      " This is a brief description of the process involved in hiring a\n"
      " new employee.\n\n"
      " 1) Prospective employees \"apply\" in the shop and a mail is sent\n"
      "    to each manager.  The application is saved and viewable from\n"
      "    within the managers' office.\n"
      " 2) Managers check the list in the office which will show applicants\n"
      "    waiting for employment, applicants yet to confirm their offer,\n"
      "    and new applicants yet to be voted upon (with votes so far).\n"
      " 3) Managers \"vote\" on each prospective employee.  Only one vote\n"
      "    per employee per manager is allowed, and the first vote counts.\n"
      " 4) As soon as the number of votes for employment equals 50% of the\n"
      "    current manager base, the candidate is accepted.  If votes against\n"
      "    exceeds 50%, the candidate is rejected.\n"
      " 5) If 50% hasn't been reached after 7 days, then the candidate is\n"
      "    hired/rejected on the basis of votes received so far.  (Continued...)\n",
      "common", 100 );
    set_open_page( 9 );
    set_read_mess( "\n"
      "                                                                Page 9\n\n"
      " 6) The approved candidate has 7 days from being accepted to confirm\n"
      "    their offer, otherwise they are removed from the list.\n"
      " 7) Once confirmed, the employee is kept advised of their current\n"
      "    position in the waiting list, and hired as soon as a position\n"
      "    becomes vacant in the shop.\n"
      " 8) The candidate can \"cancel\" their application at any time until\n"
      "    they are hired.\n\n"
      " Since the candidates are hired in order of being accepted, please make\n"
      " sure you vote for the oldest applications first.\n",
      "common", 100 );
    set_open_page( 10 );
    set_read_mess( "\n"
      "                           Disciplinary procedures              Page 10\n"
      "                         -=-=-=-=-=-=-=-=-=-=-=-=-=-\n\n"
      " This section is intended as a guide to disciplinary procedures.  It\n"
      " is ultimately down to managers to set their own policies within the\n"
      " shop.\n"
      " The first step in any action is to verbally warn an employee before\n"
      " taking any formal action.  This avoids any unpleasant comebacks on\n"
      " the manager involved.\n"
      " The next stage is either a warning, or suspending an employee's bonus.\n"
      " Whilst a warning reduces an employee's promotion points, bonuses can\n"
      " be suspended indefinitely.\n"
      " If the employee is a supervisor, the next stage is probably demotion.\n"
      " Following demotion, or if the employee is not a supervisor, dismissal\n"
      " may be the only course of action open to you.\n"
      " It is important to check the employee's history before taking any\n"
      " action as this will allow you to see what action has already been\n"
      " taken, and when.                                       (Continued...)\n",
      "common", 100 );
    set_open_page( 11 );
    set_read_mess( "\n"
      "                                                                Page 11\n\n"
      " Again, it is the responsibility of managers to develop a policy as\n"
      " to what merits disciplinary action.  A few guidelines are set out in\n"
      " the staff handbook, but more can be added.\n\n"
      " Finally, if there are any changes that need making to this, or indeed\n"
      " the staff handbook, please let me know.  I am open to comments and\n"
      " suggestions on content as well as shop policy.\n"
      " (c) "+ cap_name(CREATOR)+ " 2001",
      "common", 100 );
    set_open_page( 0 );
}
void init () {
   set_open_page( 0 );
   if ( !_office || _office == "" ) {
      if ( !query_property( "office" ) ) {
         return;
      }
      _office = query_property( "office" );
      set_office( _office );
   }
   if ( !_office->query_manager( environment( this_object() )->query_name() ) &&
     !_office->query_retired( environment( this_object() )->query_name() ) &&
     !environment( this_object() )->query_creator() ) {
      return;
   }
   ::init();
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/player_shop/shop_badge.c ===
#include <player_shop.h>
inherit "/obj/armour";
private int do_badge(string);
private int do_chat(string);
private int get_properties();
private string cap_name(string);
private string _office,
_title,
_channel,
_owner;
private int _echo;
void setup()
{
    set_name("badge");
    set_short("employee badge");
    add_adjective("employee");
    add_adjective("tin");
    add_adjective("small");
    set_main_plural("employee badges");
    set_weight(1);
    set_value(0);
    set_type("badge");
    setup_armour(640);
    set_damage_chance(5);
    set_wear_remove_func(file_name(this_object()),
      "wear_remove_badge");
    add_property("no recycling", 1);
    add_extra_look(this_object());
    if (!query_property("office") || !query_property("owner"))
    {
        return;
    }
    _office = query_property("office");
    _owner = query_property("owner");
    _echo = query_property("echo");
    _title = _office->shop_very_short();
    _channel = _office->query_channel();
    set_long( "This is a small tin badge which marks " +
      cap_name(_owner) + " as an employee of "+
      _office->query_shop_name()+ ", "+ _office->query_place()+ ".\n");
    add_adjective(_channel);
}
private string cap_name(string name)
{
    if (test_player(name))
        return PLAYER_HANDLER->query_cap_name(name);
    else return capitalize(name);
}
void init()
{
    object tp;
    if (!_office || !_owner)
    {
        if (!get_properties()) return;
        set_long("This is a small tin badge which marks "+
          cap_name(_owner) + " as an employee of "+
          _office->query_shop_name()+ ", "+ _office->query_place()+ ".\n");
        add_adjective(_channel);
    }
    tp = this_player();
    if (!_office->query_employee(tp->query_name()) &&
      !_office->query_retired(tp->query_name()) &&
      !tp->query_creator())
    {
        return;
    }
    add_command("badge", ({ "help", "echo" }), (: do_badge($5) :));
    add_command("h"+ _channel, "", (: do_badge("hist") :));
    add_command(_channel+"?", "", (: do_badge("who") :));
    add_command(_channel, "<string'text'>", (: do_chat($4[0]) :));
    add_command(_channel+"@", "<string'text'>", (: do_chat("@"+$4[0]) :));
}
private int do_badge(string args)
{
    if (!_office || !_owner)
    {
        if (!get_properties()) return 1;
    }
    add_succeeded_mess("");
    if (args == "who")
    {
        tell_object(this_player(),
          "The following employees from "+ _office->query_shop_name()+
          " are logged on: \n" + _office->badge_list());
        return 1;
    }
    else if (args == "hist")
    {
        string result = "$P$"+ _channel+ " channel$P$\n";
        mixed *hist = HISTORY_HANDLER->query_chat_history(lower_case(_channel));
        tell_object(this_player(),
          "You ask the badge for the last few chats on the "+ _channel+
          " channel\n");
        if (!arrayp(hist) || !sizeof(hist))
        {
            tell_object(this_player(),
              "The badge mutters that nothing has been said on this channel, "
              "or it is not being remembered.\n");
            return 1;
        }
        result += implode(map(hist, (: "$I$5=$C$" + $1[0] + $1[1] +
              "%^RESET%^" :)), "\n" );
        tell_object(this_player(), result);
    }
    else if (args == "echo")
    {
        if (_echo)
        {
            tell_object(this_player(), "Local echo now off.\n");
            _echo = 0;
        }
        else
        {
            tell_object(this_player(), "Local echo now on.\n");
            _echo = 1;
        }
        add_property("echo", _echo);
    }
    else
    {
        string result = sprintf("Commands for this badge:\n\n"
          "   %-13s - chat a message to the other employees\n"
          "   %-13s - emote a message to the other employees\n"
          "   %-13s - list employees logged on\n"
          "   h%-12s - show recent chat history\n"
          "   badge echo    - Turn local echo on/off\n\n"
          "You can also set your preferred chat colour using the \"colour "
          "shopchat <colour>\" command.\n", _channel, _channel + "@",
          _channel + "?", _channel, _channel);
        tell_object(this_player(), result);
    }
    return 1;
}
private int do_chat(string wisp)
{
    string sender;
    object *things, tp;
    add_succeeded_mess("");
    if (!_office || !_owner)
    {
        if (!get_properties()) return 1;
    }
    tp = this_player();
    if (!tp->query_property(_channel+ "_on"))
    {
        return notify_fail("You are not wearing the " + _channel+
          " badge!\n");
    }
    if (tp->query_property("gagged"))
    {
        return notify_fail("You have been gagged!  You cannot chat until "
          "your gag is removed.  Perhaps you should talk to a creator about "
          "this.\n");
    }
    if (!tp->query_creator())
    {
        wisp = replace_string(wisp, "%^", "");
    }
    if (!wisp || ( wisp == "" ) || wisp == "@")
    {
        return notify_fail("Chat what?\n");
    }
    if (environment(this_object()) != tp)
    {
        return notify_fail("You're too far from the badge to whisper into "
          "it.\n");
    }
    tell_object(tp,  "You whisper into the badge.\n");
    sender = tp->query_cap_name();
    if (tp->query_name() == CREATOR && tp->query_invis())
    {
        sender = tp->query_short();
    }
    wisp = replace(wisp, sprintf("%c", 7), "!");
    things = children(BADGE);
    if (_echo)
    {
        things -= ({find_object(BADGE)});
    }
    else
    {
        things -= ({this_object(), find_object(BADGE)});
    }
    things->receive(_channel ,sender, wisp);
    if (wisp[0] == '@')
    {
        if (wisp[1] == ''')
      {
         HISTORY_HANDLER->add_chat_history(_channel, sender, wisp[1..1000]);
      }
      else
      {
         HISTORY_HANDLER->add_chat_history(_channel, sender+ " ", wisp[1..1000]);
      }
   }
   else
   {
      HISTORY_HANDLER->add_chat_history(_channel, sender +": ", wisp);
   }
   return 1;
}
string extra_look(object thing)
{
   object tp;
   tp = this_player();
   if (!_office || !_owner)
   {
      if (!get_properties()) return "";
   }
   if (!_office->query_employee(tp->query_name()) &&
      !_office->query_retired(tp->query_name()) && !tp->query_creator())
   {
      return "";
   }
   return "You can get a list of commands by typing \"badge help\"\n";
}
private int get_properties()
{
   if (!query_property("office") || !query_property("owner"))
   {
      tell_object(environment(), "This badge is broken.  "
         "Please claim another.\n");
      move("/room/rubbish");
      return 0;
   }
   _office = query_property("office");
   _owner = query_property("owner");
   _echo = query_property("echo");
   _title = _office->shop_very_short();
   _channel = _office->query_channel();
   return 1;
}
string query_channel() { return copy(_channel); }
void receive(string channel, string sender, string text)
{
   object owner = environment();
   string *ignoring, prev_ob;
   if (!_office || !_owner)
   {
      if (!get_properties()) return;
   }
   prev_ob = base_name(previous_object());
   if (prev_ob != BADGE && prev_ob != _office->query_shop_front()
      && prev_ob != "/d/am/square/emporium/TARNACH/consumables")
   {
      LOG_ERROR("shop_badge.c", "receive("+channel+","+sender+","+text+")");
      return;
   }
   if (!owner || (!living(owner)))
   {
      return;
   }
   if (!_office->query_employee(owner->query_name()) &&
      !_office->query_retired(owner->query_name()) &&
      !owner->query_creator())
   {
      return;
   }
   ignoring = owner->query_property("ignoring");
   if (ignoring && member_array(lower_case(sender), ignoring) != -1)
   {
      return;
   }
   if (channel != _channel || !owner->query_property(_channel+ "_on"))
   {
      return;
   }
   if (text[0] == '@')
   {
      if (text[1] == ''')
      {
         text = "["+ lower_case( _channel )+ "] "+ sender + text[1..1000];
      }
      else
      {
         text = "["+ lower_case( _channel )+ "] "+ sender +" "+ text[1..1000];
      }
   }
   else
   {
      text = "["+ lower_case( _channel )+ "] "+ sender +": "+ text;
   }
   tell_object(owner, owner->colour_event("shopchat", "%^CYAN%^") +
      "$I$5=$C$"+ text + "%^RESET%^\n");
   return;
}
void set_props(string path, string owner)
{
   if (!path || path == "")
   {
      return;
   }
   if (previous_object() && previous_object() != find_object(path))
   {
      LOG_ERROR("shop_badge.c", "set_props("+path+","+owner+")");
      return;
   }
   set_long("This is a small tin badge which marks " +
      cap_name( owner ) + " as an employee of "+
      path->query_shop_name()+ ", "+ path->query_place()+ ".\n");
   add_property("office", path);
   add_property("owner", owner);
   _office = path;
   _owner = owner;
   _title = _office->shop_very_short();
   _channel = _office->query_channel();
   add_adjective( _channel );
}
void wear_remove_badge(object thing)
{
   if (!_office || !_owner)
   {
      if (!get_properties()) return;
   }
   if (thing)
   {
      int level;
      string start;
      if (!living(thing))
      {
         return;
      }
if (thing->query_creator())
{
thing->add_property(_channel+ "_on", 1);
return;
}
      level = _office->query_employee(thing->query_name());
      if (!level || level == -1)
      {
         if (_office->query_retired(thing->query_name()))
         {
            start = "Retired manager of ";
         }
         else return;
      }
      else if (level & MANAGER)
      {
         start = "Manager of ";
      }
      else if (level & SUPERVISOR)
      {
         start = "Supervisor of ";
      }
      else
      {
         start = "Employee of ";
      }
      thing->add_property(_channel+ "_on", 1);
      thing->set_title(_title, start + _office->query_shop_name());
      return;
   }
   thing = previous_object()->query_worn_by();
   if (thing)
   {
      thing->remove_property(_channel+ "_on");
      thing->remove_title(_title);
   }
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/traps/powder_trap.c ===
inherit "/obj/misc/trap";
void setup() {
   set_name("trap");
   set_weight(1);
   set_short("anthrax trap");
   add_adjective("anthrax");
   set_long("This is a anthrax trap suitable for rigging inside "
            "the lock of a door. It uses a small envelope that "
            "will open in the face of anyone clumsily picking "
            "the lock.\n");
   make_trap(200, "pick",
             "Hidden inside the lock is a small envelope "
             "which, if touched by an clumsily wielded tool "
             "will open up and infect an unwary thief.\n",
             ({"A small envelope opens up and a puff of powder "
                "explodes into your face, which you inadvertantly "
                "inhale. The envelope has \"Congratulations! You've "
                "Been Infected With Anthrax!\" written in bold "
                "cheery letters.\n",
                 "A cloud of powder puffs out of the lock.\n" }),
             ({ "/std/effects/disease/common_cold", 6000 }));
   set_value(10000);
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/traps/fast_acting_needle_trap.c ===
inherit "/obj/misc/trap";
void setup() {
   set_name("trap");
   set_weight(1);
   set_short("fast-acting needle trap");
   add_adjective(({ "fast-acting", "fast", "acting", "needle" }));
   set_long("This is a needle trap suitable for rigging inside "
            "the lock of a door. It uses a small needle that "
            "will inject a fast acting poison into anyone "
            "clumsily picking "
            "the lock.\n");
   make_trap(250, "pick",
             "Hidden inside the lock is a small mechanism "
             "which, if touched by an clumsily wielded tool "
             "will cause a small needle to swing out and poison "
             "an unwary thief.\n",
             ({"A small needle swings out of the lock injecting "
                 "poison.\n",
                 "A small needle sings out of the lock.\n" }),
             500);
   set_value(80000);
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/traps/gas_trap.c ===
inherit "/obj/misc/trap";
void setup() {
   set_name("trap");
   set_weight(1);
   set_short("gas trap");
   add_adjective("gas");
   set_long("This is a gas trap suitable for rigging inside "
            "the lock of a door. It uses a small ampule of "
            "poison gas that is ejected by someone attempting "
            "to pick the lock.\n");
   make_trap(300, "pick",
             "Hidden inside the lock is a small ampule which, "
             "if touched by an unwary tool would trigger a "
             "puff of poisonous gas.",
             ({"A small cloud of gas puffs out of the lock.\n",
                 "A small cloud of gas puffs out of the lock.\n"}),
             ({"/std/effects/poisons/poison_gas", 600}));
   set_value(120000);
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/traps/leg_trap.c ===
inherit "/obj/misc/trap";
void setup() {
   set_name("trap");
   set_weight(1);
   set_short("leg trap");
   add_adjective("leg");
   set_long("This trap has a trigger suitable for rigging inside "
            "the lock of a door. It uses a small portion of the floor "
            "in front of the door to conceal a blunt leg trap that will "
            "shatter the femurs of any clumsy thief that attempt to "
            "pass through.\n");
   make_trap(350, "pick",
             "Hidden inside the lock is a trigger that leads down to a "
             "concealed panel on the floor. Carefully lifting the panel "
             "you see a vicious blunt man trap, designed to break any "
             "unskilled questionable entrant.\n",
             ({"A small click is heard, and the floor beneath your feet "
               "snaps away to reveal a leg trap which snaps together "
               "violently, shattering both your legs at once!\n",
               "A small click is heard and the jaws of a man trap burst out "
               "of the ground below " + this_player()->query_short() + "'s "
               "feet and shatters both of their legs!\n" }),
             ({ "/std/effects/disease/broken_leg", ({ "left", "right"}) }));
   set_value(1000000);
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/traps/needle_trap.c ===
inherit "/obj/misc/trap";
void setup() {
   set_name("trap");
   set_weight(1);
   set_short("needle trap");
   add_adjective("needle");
   set_long("This is a needle trap suitable for rigging inside "
            "the lock of a door. It uses a small needle that "
            "will inject poison into anyone clumsily picking "
            "the lock.\n");
   make_trap(200, "pick",
             "Hidden inside the lock is a small mechanism "
             "which, if touched by an clumsily wielded tool "
             "will cause a small needle to swing out and poison "
             "an unwary thief.\n",
             ({"A small needle swings out of the lock injecting "
                 "poison.\n",
                 "A small needle sings out of the lock.\n" }),
             ({ "/std/effects/poisons/spider_venom", 30 }));
   set_value(20000);
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/buckets/bucket_medium.ob ===
#  -*- LPC -*- #
#
# $Locker:  $
# $Id: bucket_medium.ob,v 1.2 2002/08/12 19:57:59 tilly Exp $
#
#
#

# It's a Medium Bucket!
# Vesta, February 2002
#
::#Class:: "/obj/vessel.c" 
::name:: "bucket"
::short:: "medium bucket"
::long:: "This is a medium-sized metal bucket.  It is not very shiny.\n"
::main_plural:: "medium buckets"
::adjective:: "medium"
::plural:: "buckets"
::$set_stuck:: 1
::$set_leak_rate:: 0
::$set_max_volume:: 1000
::$set_max_weight:: 60
::$set_full_weight:: 60
::value:: 60
::weight:: 20
::material:: "metal"
  


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/buckets/.bucket_small.ob_virtual_.c ===
#include <virtual.h>
void dest_me() { destruct( this_object() ); }
void create()
{
  seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
}
object create_virtual_ob() {
   object clone;
  clone = (object)SERVER->create_virtual_object( "/obj/vessel.c", 1 );
  clone->add_property( VIRTUAL_NAME_PROP, "/obj/misc/buckets/bucket_small.ob#1" );
  call_other( clone, "set_name",  "bucket"  );
  call_other( clone, "set_short",  "small bucket"  );
  call_other( clone, "set_long",  "This is a small metal bucket.  It is not very shiny.\n"  );
  call_other( clone, "set_main_plural",  "small buckets"  );
  call_other( clone, "add_adjective",  "small"  );
  call_other( clone, "add_plural",  "buckets"  );
  call_other( clone, "set_stuck",  1  );
  call_other( clone, "set_leak_rate",  0  );
  call_other( clone, "set_max_volume",  3000  );
  call_other( clone, "set_max_weight",  30  );
  call_other( clone, "set_full_weight",  30  );
  call_other( clone, "set_value",  85  );
  call_other( clone, "set_weight",  10  );
  call_other( clone, "set_material",  "metal" );
   return clone;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/buckets/bucket_small.ob ===
#  -*- LPC -*- #
#
# $Locker:  $
# $Id: bucket_small.ob,v 1.2 2002/08/12 19:57:59 tilly Exp $
#
#
#

# It's an Ickle Bucket!
# Vesta, February 2002
#
::#Class:: "/obj/vessel.c" 
::name:: "bucket"
::short:: "small bucket"
::long:: "This is a small metal bucket.  It is not very shiny.\n"
::main_plural:: "small buckets"
::adjective:: "small"
::plural:: "buckets"
::$set_stuck:: 1
::$set_leak_rate:: 0
::$set_max_volume:: 3000
::$set_max_weight:: 30
::$set_full_weight:: 30
::value:: 85
::weight:: 10
::material:: "metal"
  


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/buckets/bucket_large.ob ===
#  -*- LPC -*- #
#
# $Locker:  $
# $Id: bucket_large.ob,v 1.1 2002/08/12 12:16:59 tilly Exp $
#
#
#

# It's a Big Bucket!
# Vesta, February 2002
#
::#Class:: "/obj/vessel.c" 
::name:: "bucket"
::short:: "large bucket"
::long:: "This is a large metal bucket.  It is not very shiny.\n"
::main_plural:: "large buckets"
::adjective:: "large"
::plural:: "buckets"
::$set_stuck:: 1
::$set_leak_rate:: 0
::$set_max_volume:: 5000
::$set_max_weight:: 100
::$set_full_weight:: 100
::value:: 110
::weight:: 30
::material:: "metal"
  

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/jewellery/anklets/beaded_anklet.arm ===
#AM
#CREATOR Saffra

::Name::"anklet"
::Short::"beaded anklet"
::Adjective::"beaded"
::Alias::"jewellery"
::Plural::({"rings","anklets"})
::Main Plural::"beaded anklets"
::Long::"Red glass beads have been linked together on a silver chain to make "
        "this anklet.  It would look great with a pair of sandals, high-heeled "
        "shoes, or even on bare feet.\n"
::Weight::1
::Value::2000
::Type::"anklet"
::Property::"shop type", "jewellers"
::Setup::50
::Damage Chance::7


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/jewellery/necklaces/beaded_necklace.arm ===
#AM
#CREATOR Saffra

::Name::"necklace"
::Short::"beaded necklace"
::Adjective::"beaded"
::Alias::"jewellery"
::Plural::({"necklaces","jewellery"})
::Main Plural::"beaded necklaces"
::Long::"Three strands of tiny multi-coloured seed beads have been twined "
        "together to form this necklace.  It looks very fashionable.\n"
::Weight::1
::Value::1200
::Property::"shop type", "jewellers"
::Type::"necklace"
::Setup::640
::Damage Chance::7


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/jewellery/bracelets/beaded_bracelet.arm ===
#AM
#CREATOR Saffra

::Name::"bracelet"
::Short::"beaded bracelet"
::Adjective::"beaded"
::Alias:: "jewellery"
::Plural::({"bracelets","jewellery"})
::Main Plural::"beaded bracelets"
::Long::"A dozen strands of small blue and green beads have been twisted "
        "together to form this bracelet.  The disorderliness of the strands is "
        "surely intentional.\n"
::Weight::2
::Value::400
::Type::"bracelet"
::Property::"shop type", "jewellers"
::Setup::640
::Damage Chance::7


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/jewellery/rings/bead_ring.arm ===
#AM
#CREATOR Saffra

::Name::"ring"
::Short::"bead ring"
::Adjective::"bead"
::Alias:: "jewellery"
::Plural::({"rings","jewellery"})
::Main Plural::"bead rings"
::long::"Three shiny black beads have been strung onto twisting silver wires "
        "to make this ring.  It's the type that would look good worn with lots "
        "of other similar rings.\n"
::Weight::1
::Value::300
::Property::"shop type", "jewellers"
::Type::"ring"
::Setup::320
::Damage Chance::7


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/jewellery/misc/beaded_belly_chain.arm ===
#AM
#CREATOR Saffra

::Name::"chain"
::Short::"beaded belly chain"
::Adjective::({"beaded", "belly"})
::Plural::({"chains","jewellery"})
::Main Plural::"beaded belly chains"
::Alias::"jewellery"
::Long::"Dozens of shiny white and silver beads of various sizes and patterns "
        "have been carefully linked together to form this chain. Draping this "
        "across a bare stomach or through the belt loops on a pair of trousers "
        "would add sparkle to any outfit, although it certainly wouldn't do "
        "anything to hold the trousers up.\n"
::Weight::1
::Value::1600
::Property::"shop type", "jewellers"
::Setup::100
::Type::"belt"
::Material::"metal"
::Damage Chance::10


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/jewellery/earrings/bead_earrings.arm ===
#AM
#CREATOR Saffra

::Name::"earrings"
::Short::"pair of bead earrings"
::Adjective::({ "pair of", "bead" })
::Plural Adjective::({"pairs","of"})
::Main Plural::"pairs of bead earrings"
::Alias::"jewellery"
::Plural::({"earrings","jewellery"})
::Long::"Painted wooden beads have been hooked together with wire to form "
        "this pair of dangly bead earrings.  They look very ethnic, although "
        "what particular ethnicity is meant is not clear.\n"
::Weight::1
::Value::440
::Type::"earring"
::Property::"shop type", "jewellers"
::Setup::640
::Damage Chance::7


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/monster/commercial.c ===
inherit "/obj/monster";
#include <money.h>
private object _sell_to;
private string* _furniture;
private string _commercial_type;
int do_list(int force);
void setup() {
   set_name("spulluf");
   set_gender(1 + random(2) );
   set_long("A nice happy person with a nice smile.\n");
   add_property("demon", 1);
   set_race( "human" );
   set_level( 1 );
   add_help_file("spulluf");
   add_respond_to_with(({ "@say", "browse" }), "#do_browse");
   add_respond_to_with(({ "@say", "buy" }), "#do_buy");
   _furniture = ({
        "/obj/furnitures/commercial/smithy",
        "/obj/furnitures/commercial/money_changer",
        "/obj/furnitures/commercial/blackjack",
        "/obj/furnitures/commercial/small_shop",
        "/obj/furnitures/commercial/pickler",
        "/obj/furnitures/commercial/blackboard",
        "/obj/furnitures/commercial/newspaper_box",
        "/obj/furnitures/commercial/newspaper_archive_box",
        "/obj/furnitures/commercial/bank_master",
        "/obj/furnitures/commercial/bank_franchise_small",
        "/obj/furnitures/commercial/postal",
        "/obj/furnitures/commercial/poll_data",
      });
}
string query_money_place() {
   return environment()->query_property("place");
}
void set_commercial_type(string commercial_type) {
   _commercial_type = commercial_type;
}
void do_start_speil(object sellto) {
   setup_nationality(sellto->query_nationality(), sellto->query_nationality_region());
   _sell_to = sellto;
   queue_command("sayto " + file_name(_sell_to) +
                 " Hello!  So you are looking at some commercial "
                 "furniture?");
}
int do_list(int force) {
   string furn;
   string place;
   int num;
   int size;
   object ob;
   if (!_sell_to) {
      call_out("leave_room", 5);
      return 0;
   }
   if (!force && this_player() != _sell_to) {
      queue_command("sayto " + file_name(this_player()) +
                 " I am dealing with " + _sell_to->the_short() +
                 " right now.");
      return 1;
   }
   queue_command("sayto " + file_name(_sell_to) +
                 " I have the following items available.");
   num = 0;
   place = query_money_place();
   foreach (furn in _furniture) {
      if (!_commercial_type ||
          furn->query_commercial_type() == _commercial_type) {
         queue_command("sayto " + file_name(_sell_to) +
                    sprintf(" %c) %s costs %s (%d square yards)",
                            num + 'A', furn->the_short(),
                            MONEY_HAND->money_value_string(furn->query_value(), place),
                            furn->query_commercial_size()));
         num++;
      }
   }
   foreach (ob in all_inventory(environment())) {
      size += ob->query_commercial_size();
   }
   queue_command("sayto " + file_name(_sell_to) +
                  " The size of your shop is " +
                  environment()->query_property_size() +
                  " square yards and you have " +
                  (environment()->query_property_size() - size) +
                  " square yards of empty space.");
   return 1;
}
string strip_spaces(string str) {
   while (strlen(str) && str[0] == ' ') {
      str = str[1..];
   }
   while (strlen(str) && str[<1] == ' ') {
      str = str[0..<2];
   }
   return str;
}
void leave_room() {
   move("/room/rubbish", "$N shuffles away.");
}
int do_browse(string str) {
   mapping options;
   mapping values;
   string option_name;
   string thing;
   string* bits;
   string place;
   int cost;
   int pos;
   string* furns;
   if (!_sell_to) {
      call_out("leave_room", 5);
      return 0;
   }
   place = query_money_place();
   if (this_player() != _sell_to) {
      queue_command("sayto " + file_name(this_player()) +
                 " I am dealing with " + _sell_to->the_short() +
                 " right now.");
      return 1;
   }
   str = lower_case(str);
   pos = str[0] - 'a';
   if (_commercial_type) {
      furns = filter(_furniture, (: $1->query_commercial_type() == _commercial_type :));
   } else {
      furns = _furniture;
   }
   if (strlen(str) > 1 || pos < 0 || pos >= sizeof(furns)) {
      queue_command("sayto " + file_name(_sell_to) +
                    " Sorry, I do not understand which thing "
                    "you want to browse.\n");
      return 1;
   }
   queue_command("sayto " + file_name(_sell_to) + " " +
                 furns[pos]->the_short() + " costs " +
                 MONEY_HAND->money_value_string(furns[pos]->query_value(), place) +
                 " and takes up " + furns[pos]->query_commercial_size() +
                 " square yards.");
   if (furns[pos]->query_weekly_upkeep_cost()) {
      queue_command("sayto " + file_name(_sell_to) +
                    " Costs " +
                    MONEY_HAND->money_value_string(furns[pos]->query_weekly_upkeep_cost(), place) +
                    " per week in upkeep.");
   }
   queue_command("sayto " + file_name(_sell_to) +
                 " " +
                 furns[pos]->long()[0..<2]);
   thing = furns[pos]->query_commercial_information();
   if (thing) {
      queue_command("sayto " + file_name(_sell_to) +
                    " " + thing);
   }
   options = furns[pos]->query_commercial_options();
   if (options) {
      queue_command("sayto " + file_name(_sell_to) +
                    " You have the following options for " +
                    furns[pos]->the_short());
      foreach (option_name, values in options) {
         bits = ({ });
         foreach (thing, cost in values) {
            bits += ({ "'" + thing + "' costs " +
                       MONEY_HAND->money_value_string(cost, place) });
         }
         queue_command("sayto " + file_name(_sell_to) +
                       " The options for '" + option_name  + "' are " +
                       query_multiple_short(bits));
      }
   }
   return 1;
}
int do_buy(string str, string options) {
   string place;
   string* bits;
   string name;
   string value;
   string thing;
   string option_name;
   string my_option;
   int pos;
   int size;
   int cost;
   int total_cost;
   int bad_option;
   int found;
   mapping option_types;
   object ob;
   string* furns;
   mapping values;
   mapping option_values;
   if (!_sell_to) {
      call_out("leave_room", 5);
      return 0;
   }
   place = query_money_place();
   if (this_player() != _sell_to) {
      queue_command("sayto " + file_name(this_player()) +
                 " I am dealing with " + _sell_to->the_short() +
                 " right now.");
      return 0;
   }
   str = lower_case(str);
   pos = str[0] - 'a';
   if (_commercial_type) {
      furns = filter(_furniture, (: $1->query_commercial_type() == _commercial_type :));
   } else {
      furns = _furniture;
   }
   if (strlen(str) > 1 || pos < 0 || pos >= sizeof(furns)) {
      queue_command("sayto " + file_name(_sell_to) +
                    " Sorry, I do not understand which thing "
                    "you want to buy.\n");
      return 1;
   }
   if (furns[pos]->disallow_sale_here(environment())) {
      queue_command("sayto " + file_name(_sell_to) +
                    " Sorry, this room disallows the purchase of that item.");
      return 0;
   }
   bits = explode(options, ",");
   option_types = ([ ]);
   foreach (thing in bits) {
      if (sscanf(thing, "%s=%s", name, value) == 2) {
         name = strip_spaces(name);
         value = strip_spaces(value);
         option_types[lower_case(name)] = lower_case(value);
      }
   }
   foreach (ob in all_inventory(environment())) {
      size += ob->query_commercial_size();
   }
   if (size + furns[pos]->query_commercial_size() >
       environment()->query_property_size()) {
      queue_command("sayto " + file_name(_sell_to) +
                    " The item " + furns[pos]->the_short() +
                    " is too big to fit into " + environment()->the_short());
      return 0;
   }
   option_values = furns[pos]->query_commercial_options();
   if (option_values) {
      foreach (option_name, values in option_values) {
         my_option = option_types[lower_case(option_name)];
         if (!my_option) {
            queue_command("sayto " + file_name(_sell_to) +
                    " The option '" + option_name + "' needs to be "
                    "specified.");
            bad_option = 1;
         } else {
            foreach (thing, cost in values) {
               if (lower_case(thing) == my_option) {
                  total_cost += cost;
                  found = 1;
                  option_types[lower_case(option_name)] = thing;
               }
            }
            if (!found) {
               queue_command("sayto " + file_name(_sell_to) +
                       " The option " + option_name + " has options "
                       "of " + query_multiple_short(keys(values)) + ".");
               bad_option = 1;
            }
         }
      }
   }
   if (bad_option) {
      return 0;
   }
   total_cost += furns[pos]->query_value();
   if (this_player()->query_value_in(place) < total_cost) {
      queue_command("sayto " + file_name(_sell_to) +
              " You do not have the " +
              MONEY_HAND->money_value_string(total_cost, place) +
              " to buy " + furns[pos]->the_short() + ".");
      return 0;
   }
   this_player()->pay_money(MONEY_HAND->create_money_array(total_cost, place),
                            place);
   ob = clone_object(furns[pos]);
   foreach (name, thing in option_types) {
      ob->set_commercial_option(name, thing, environment());
   }
   ob->move(environment());
   return 1;
}
int do_dismiss() {
   if (_sell_to && this_player() != _sell_to) {
      queue_command("sayto " + file_name(this_player()) +
                 " I am dealing with " + _sell_to->the_short() +
                 " right now.");
      return 1;
   }
   queue_command("sayto " + file_name(this_player()) +
                 " Goodbye, see you next time.");
   call_out("leave_room", 5);
   return 1;
}
int do_trash(object* obs) {
   object* ok;
   object* bad;
   ok = filter(obs, (: $1->query_commercial_furniture() :));
   if (!sizeof(ok)) {
      queue_command("sayto " + file_name(_sell_to) +
                    " None of " + query_multiple_short(obs) + " are "
                    "commercial items, so I cannot remove them.");
      return 0;
   }
   bad = filter(ok, (: !$1->can_trash_furniture() :));
   if (sizeof(bad)) {
      this_player()->add_failed_mess(this_object(),
                      "The items $I are unable to be trashed.  Perhaps they "
                      "still have something in them?\n");
      return 0;
   }
   write("Are you sure you want to trash " + query_multiple_short(ok) +
         "; this will get rid of them completely? ");
   input_to("complete_trash", 0, ok);
   this_player()->add_succeeded_mess(this_object(), "", ({ }));
   return 1;
}
void complete_trash(string str, object* obs) {
   str = lower_case(str);
   if (!strlen(str) || str[0] != 'y') {
      write("Aborting trash.\n");
   }
   queue_command("sayto " + file_name(_sell_to) + " Trashing " +
                 query_multiple_short(obs) + " for you.\n");
   obs->move("/room/rubbish", "", the_short() + " points at $N and it rips "
             "apart then vanishes.");
}
void init() {
   ::init();
   this_player()->add_command("trash", this_object(),
                              "<indirect:object> with <direct:object>",
                              (: do_trash :));
   this_player()->add_command("dismiss", this_object(),
                              "<direct:object>",
                              (: do_dismiss() :));
   this_player()->add_command("list", this_object(),
                              "<direct:object>",
                              (: do_list(0) :));
   this_player()->add_command("list", this_object(),
                              "{on|from} <direct:object>",
                              (: do_list(0) :));
   this_player()->add_command("browse", this_object(),
                              "<string'name'> on <direct:object>",
                              (: do_browse($4[0]) :));
   this_player()->add_command("buy", this_object(),
                              "<string'name'> {on|from} <direct:object>",
                              (: do_buy($4[0], "") :));
   this_player()->add_command("buy", this_object(),
                              "<string'name'> with <string'options'> {on|from} <direct:object>",
                              (: do_buy($4[0], $4[1]) :));
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/monster/cabbage.c ===
inherit "/obj/monster";
#define SCATHE "/cmds/guild-race/magic/scathe"
#define LANCE "/obj/spells/mental_lance"
#include <config.h>
#ifndef __DISTRIBUTION_LIB__
#include <special_day.h>
#endif
#include <move_failures.h>
#include <armoury.h>
object query_owner();
void check_env();
void zap_cabbage();
string long_desc();
int eaten;
string owner_name, owner_short, language;
object owner;
void setup() {
  set_name( "cabbage" );
  set_short( "cabbage" );
  set_long( "A small cute looking cabbage.\n" );
  set_race( "cabbage" );
  set_level( 1 );
  add_respond_to_with( ({ ({ "@hug", "@snuggle", "@cuddle", "@nestle",
    "@snuffle", "@smooch", "@fondle", "@huggle", "@squeeze", "@wuffle"
    "@hop", "@lick", "@snog", "@fluff", "@nuzzle" }), "you" }),
    "#respond_nice");
  add_respond_to_with( ({ ({ "@skick", "@spunch", "@sburn", "@jump", }),
    "you" }), "#respond_nasty");
#ifndef __DISTRIBUTION_LIB__
  if (SPECIAL_DAY_HANDLER->query_special_day() == CABBAGE_DAY) {
    add_property( "player", 1 );
    set_get();
  }
#endif
}
void init() {
  ::init();
  this_player()->add_command("eat", this_object(), "<direct:object'cabbage'>" );
  call_out( "check_env", 3 );
}
void set_owner( object thing ) {
  if (!objectp( thing ) )
    return;
  set_long( (: long_desc :) );
  owner = thing;
  owner_name  = owner->query_name();
  owner_short = owner->query_short();
  language = owner->query_default_language();
  add_language( language );
  set_language( language );
  load_chat(30, ({
    1, "@roll up",
    1, "@purr",
    1, ":$V$0=ruffles its,ruffle their$V$ fronds.",
    1, ":$V$0=looks,look$V$ green.",
    3, "#soul_owner",
    1, "@roll over",
    1, "#check_env" }) );
  check_env();
}
string long_desc() {
  if ( owner && environment( owner ) == environment() ) {
    return "This small, cute-looking cabbage stares adoringly at "
      + owner->the_short() + ".\n";
  }
  return "This small, cute-looking cabbage is looking off into the "
    "distance.  It is obviously hopelessly lost.\n";
}
void respond_nice( object souler ) {
  if ( !souler->query_visible(this_object()) )
    return;
  if ( owner && souler == owner) {
    do_command("nestle " + souler->query_name() );
  } else {
    do_command("peer curiously " + souler->query_name() );
  }
}
void respond_nasty( object souler ) {
  if ( !souler->query_visible(this_object()) )
    return;
  if ( owner && souler == owner) {
    do_command("gasp");
    do_command("cry");
  } else {
    do_command( "sburn " + souler->query_name() + " dreams");
  }
}
int do_eat() {
  if ( this_player() != owner || eaten) {
    this_player()->add_failed_mess( this_object(), "You cannot eat this "
      "cabbage!\n" );
  return -1;
  }
  if( this_player()->query_property("dead") ) {
    this_player()->add_failed_mess( this_object(), "You are dead.  You "
      "cannot eat.\n" );
  }
#ifndef __DISTRIBUTION_LIB__
    if (SPECIAL_DAY_HANDLER->query_special_day() == CABBAGE_DAY) {
      this_player()->add_failed_mess(this_object(), "This is *my* day, "
      "how can you even think of eating me, your faithful cabbage!\n" );
      return -1;
    }
#endif
  this_player()->add_succeeded_mess( this_object(),
    ({ "The cabbage lovingly and "
       "adoringly purrs quietly as you viciously rip off its fronds and "
       "eat it.  It dies looking wonderingly into your face.\n",
       "$N $V $D.\n" }) );
    this_player()->add_effect("/std/effects/object/cabbage", 150);
    call_out("zap_cabbage", 2 );
    return 1;
}
void zap_cabbage() {
  if ( environment() ) {
    all_inventory()->move( environment() );
  }
  if ( owner ) {
    do_command( "unfollow " + owner_name );
  }
  eaten = 1;
  owner = 0;
  owner_name = 0;
  owner_short = 0;
  move( "/room/rubbish" );
}
int attack_by(object ob) {
  if( ( !query_owner() || ob == query_owner() ) &&
        base_name( previous_object() ) == LANCE )
    call_out( "coleslaw", 2 );
  ob->stop_fight(this_object());
  tell_object(ob, "The cabbage is a terrible pacifist.\n");
}
int attack_ob(object ob) {
  ob->stop_fight(this_object());
  tell_object(ob, "The cabbage is a terrible pacifist.\n");
}
int adjust_hp(int number, object attacker) {
  return 0;
}
void soul_owner() {
  string *souls = ({ "snuggle ", "nestle ", "stare dreamily ", "snuffle " });
  if(!owner)
    return;
  if ( environment() != environment( owner ) ) {
    do_command( "sniffle sadly" );
    return;
  }
  if ( !owner->query_visible(this_object()) )
    return;
  do_command( souls[random(sizeof(souls))] + owner_name );
}
void check_env() {
  object my_env, owner_env, *caterpillars;
  if ( !owner_name )
    return;
  my_env = environment();
    if ( !my_env ) {
        return;
    }
  if ( owner_name && !owner ) {
    do_command( "cry" );
    do_command( "'Woe is me! Where art thou, " + owner_short + "?" );
    call_out("zap_cabbage", 1);
    return;
  }
  owner_env = environment( owner );
  if ( !owner_env ) {
    return;
  }
  if ( file_name( my_env ) == "/room/rubbish" ) {
    return;
  }
  if ( this_object()->query_property( "dead" ) ) {
    return;
  }
  if (my_env == owner) {
    return ;
  }
  if (owner_env == my_env) {
    return ;
  }
  if (owner_env->query_mirror_room() == my_env) {
    return ;
  }
  caterpillars = match_objects_for_existence( "caterpillar", ({ owner_env }) );
  if ( my_env != owner_env && !sizeof(caterpillars)) {
    move( owner_env, "$N appear$s with a squelch.",
      "$N disappear$s with a squelch." );
    do_command( "follow " + owner_name );
  }
}
object query_owner() {
    return owner;
}
int query_theft_command() {
    return -1;
}
void coleslaw() {
  object ob;
  tell_room( environment(), the_short() + " explodes in a shower of "
      "fronds.\n" );
  ob = ARMOURY->request_object("coleslaw", 100);
  if (ob) {
     ob->move( environment() );
  }
  zap_cabbage();
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/monster/cockroach.c ===
inherit "/obj/monster";
void setup() {
   set_name("cockroach");
   set_short("cockroach");
   set_race("cockroach");
   set_level( random( 1 + random( 3 ) ) );
   set_main_plural("cockroaches");
   add_alias( "roach" );
   add_plural( "roaches" );
   add_adjective("dirty");
   set_long("This is a huge dirty great big cockroach, the size of your "
            "hand at least.  It waves it feelers at you and looks "
            "horrible and black.  Not only can cockroaches survive "
            "a nuclear blast, they can survive in Ankh-Morpork!\n");
   load_chat( 5, ({
         10, ":scuttles around a bit.",
         10, ":cleans its feelers.",
         10, ":rushes around in circles.",
         1,  ":jerks off in a strange direction.",
      }) );
   set_wimpy( 30 );
   load_a_chat( 50, ({
         1, ":oozes horrible white stuff.",
         1, ":makes a sort of scraping noise."
      }) );
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/monster/greco.c ===
#define ITEM_TRACKER ("/obj/handlers/item_tracker")
inherit "/obj/monster";
object my_player;
mixed total_als;
object *save_obs;
object *unhandled_obs;
object *done_obs;
int grecos_day_off;
void setup() {
  seteuid("Root");
  if (!grecos_day_off) {
    set_name("greco");
    set_short("Greco the Departure Gecko");
    set_long("A small mottled grey gecko whose job it is to record all of "
             "the baggage of players so they can be restocked when they "
             "come back.  Greco is currently scribbling in "
             + query_possessive() + " notebook furiously.\n");
  } else {
    set_name("gumboot");
    set_short("Gumboot");
    set_long("A big black lizard who looks rather confused about what "
             + query_pronoun() + " is supposed to be doing.  Nevertheless, "
             + query_pronoun() + " is trying to look busy, scrawling "
             "something into a huge log book.\n");
  }
  add_property("determinate", "");
  add_property("no_attack", 1);
  set_gender(1+random(2));
  basic_setup("gnome", "warrior", 30);
  set_language("general");
}
void set_grecos_day_off(int day_off) {
  grecos_day_off = day_off;
  setup();
}
int query_grecos_day_off() {
  return grecos_day_off;
}
void get_rid_of(object player, int verbose) {
  int i;
  catch(set_grecos_day_off("/obj/monster/greco"->query_grecos_day_off()));
  if (verbose) {
    if (!grecos_day_off) {
      tell_object(player, "Greco the Departure Gecko starts inspecting "
                          "all your items and scribbling on a "
                          "notepad.\n");
    } else {
      tell_object(player, "This is Greco's day off.\nGumboot, Greco's "
                          "distant relative, is here to take your "
                          "information.  Gumboot looks very confused "
                          "and sticks the pencil in "+
                          query_possessive()+" ear.\n");
    }
  }
  my_player = player;
  unhandled_obs = save_obs = all_inventory(player);
  total_als = ({ });
  done_obs = ({ });
  for (i = 0; i < sizeof(save_obs); i++)
    call_out("get_ob_al", 1, save_obs[i], verbose);
  call_out("finish_player", 2, verbose);
}
void get_ob_al(object ob, int verbose)
{
  mixed *als;
  unhandled_obs -= ({ ob });
  als = my_player->fragile_auto_str_ob(ob);
  done_obs += ({ ob });
  if (sizeof(als) == 0) return;
  total_als += als;
}
void handle_dead_ob(object ob) {
  int value;
  mixed *als;
  string obname;
  catch(ob->move("/room/broken"));
  value = 1000;
  catch(value = ob->query_value());
  obname = "unknown object";
  catch(obname = ob->short(1));
  catch("/obj/misc/al_receipt"->set_object(file_name(ob)));
  "/obj/misc/al_receipt"->set_obname(obname);
  "/obj/misc/al_receipt"->set_value(value);
  als = "/global/auto_load"->
    fragile_auto_str_ob(find_object("/obj/misc/al_receipt"));
  als[0] = 1;
  if (!undefinedp(als[2][1]["::"]["cloned by"])) {
    als[2][1]["::"]["cloned by"] = "greco";
  }
  log_file("GRECO", "%s: %s - Broken object at logout: %O\n",
           ctime(time()), my_player?my_player->query_name():"0", ob);
  total_als += als;
}
void finish_player(int verbose) {
  int i, one_more;
  object *missing_obs;
  if (find_call_out("get_ob_al") != -1) {
    call_out("finish_player", 2, verbose);
    return;
  }
  if ( sizeof( unhandled_obs ) ) {
    call_out("finish_player", 2, verbose);
    return;
  }
  missing_obs = save_obs - done_obs;
  if (sizeof(missing_obs)) {
    one_more = sizeof(missing_obs);
    if (!grecos_day_off) {
      do_command("'"+(one_more==1?"One":"Some")+
                 " of your objects "+(one_more==1?"is":"are")+" broken and "
                 "will not save properly, so I will give you "+
                 (one_more==1?"a receipt for it.  This":
                              "receipts for them.  These")+
                 " can either be "
                 "sold for something vaguely like the replacement value of "
                 "the object or taken to a creator as proof of ownership "
                 "so you can ask very nicely to have it replaced.");
    } else {
      do_command("'Ummm.  I think some of these things of yours might "
                 "be broken.  Ummmm.....  Here, have some of these "
                 "receipt things.  Give them to a creator and they will "
                 "help you in trying to replace them.  Ummmm....  "
                 "Good luck.");
    }
    for (i = 0; i < sizeof(missing_obs); i++)
      handle_dead_ob(missing_obs[i]);
  }
  my_player->save_with_auto_load(total_als);
  if (verbose) {
    if (!grecos_day_off) {
      do_command( "smile brightly" );
      do_command( "'Well, everything seems to be in order.  Bye bye!" );
      do_command( "wave" );
      switch (random(3)) {
      case 0:
        tell_object(my_player, "You clamber aboard the giant spider.  It "
                    "opens the door, releases a thread of silk out into space "
                    "and, after a brief pause, climbs out after it possibly "
                    "never to be seen again ...\n");
        say(my_player->short(1) + " clambers aboard the giant spider.  It "
            "opens the door, releases a thread of silk out into space and, after "
            "a brief pause, climbs out after it.\n", my_player);
        break;
      case 1:
        tell_object(my_player, "The giant bird grabs you in its talons and leaps "
                    "out of the now open door to fly at great speed into the "
                    "black unknown ...\n");
        say(my_player->short(1) + " is grabbed by the talons of the giant bird "
            "and dragged out a door into the blackness of space.\n", my_player);
        break;
      case 2:
        tell_object(my_player, "You are thrown on to the back of the chimera.  "
                    "Clinging desperately to its mane you follow the beast out "
                    "into the inky depths.\n");
        say(my_player->short(1) + " is thrown onto the back of the chimera and "
            "dragged out into the inky depths.\n", my_player);
        break;
      }
    } else {
      do_command("smile strangely");
      do_command("'Well.  Uhhhh.  Thats it.");
      do_command("'I...  Umm.  Hope.");
      switch (random(3)) {
        case 0 :
          tell_object(my_player,
             "You clamber about a giant spider.  Gumboot starts to walk out "
             "the door and stands on one of it's feet.  You are flung from "
             "the back of the giant spider out through the door and "
             "floating meaninglessly through space.  You hope you will "
             "be seen again...\n");
          say(my_player->short(1)+" clambers aboard the giant spider.  It "
             "moves towards the door when something happens.  "+
             my_player->short(1)+" gets flung out through the door.\n");
          break;
        case 1 :
          tell_object(my_player,
             "The giant bird grabs you in it's talons and leaps out towards "
             "the now open door.\nGumboot exclaims: Wait!  I forgot to get your "
             "name!\nThe bird pauses confused and you thud into the side of "
             "the door and tumble backwards out into space, you try not "
             "notice the huge rents in your shoulder from where the talons "
             "ripped about your flesh.  Just a flesh wound.\n");
          say(my_player->short(1)+" is grabbed by the talons of the giant "
             "bird.  As they are heading for the door, Gumboot yells "
             "something at them, the bird gets disconcerted and rams "+
             my_player->short(1)+" into the door.  They tumble out into "
             "space a red line of blood showing their path.\n");
          break;
        case 2 :
          tell_object(my_player,
             "You are thrown towards the back of a chimera, you completely "
             "fail to get a hold on the mane and falls off it onto the "
             "floor.  The chimera steps backwards, convenient impaling you "
             "on a foot.  It then leaps through the door, you clutch your "
             "stomach hoping it is not permanent.\n");
          say(my_player->short(1)+" is thrown at a chimera, they don't catch "
             "hold of it, but they get impaled on it's foot when it steps "
             "back.  The chimera with a look of satisfaction dives through "
             "the door.\n");
          break;
      }
    }
  }
  tell_object(my_player, "Do come again!\n");
  foreach( object saved_ob in done_obs ) {
     reset_eval_cost();
     catch(saved_ob->set_tracked_item_status_reason("PLAYER_QUIT"));
     catch(saved_ob->dest_me());
     if ( saved_ob ) {
         catch(saved_ob->dwep());
     }
  }
  reset_eval_cost();
  catch( ITEM_TRACKER->save_all_item_states_delete_cache( my_player->query_name() ));
  catch(my_player->effects_quiting());
  catch(my_player->dest_me());
  if ( my_player ) {
    catch( my_player->dwep() );
  }
  if (my_player) {
    say(short(1) + " sighs deeply.\n");
  }
  move( "/room/rubbish", "$N appear$s.",
        "$N disappear$s in a puff of smoke." );
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/monster/path.h ===
#define PATH "/obj/monster/"

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/monster/godmother/granny.c ===
inherit "/obj/monster";
#include <panic.h>
#include <armoury.h>
void finish_up();
int state, start_time, prodded;
object lost;
string safeplace;
void setup() {
  start_time = time();
  set_name( "godmother" );
  set_short( "fairy godmother" );
  add_adjective( "fairy" );
  set_long( "This fairy godmother isn't quite what you expected.  She is "
    "tall and forbidding; not in the slightest bit cuddly or smiley.  She "
    "looks slightly uncomfortable and is currently glaring at her wand, "
    "which appears to be malfunctioning.  If you cross her, you might find "
    "yourself turned into a wombat or worse.\n" );
  set_race( "human" );
  set_guild( "witch" );
  set_level( 300 );
  set_gender( 2 );
  set_language("general");
  set_response_mon_understand_anything(1);
  add_property( "anchor", 1);
  ARMOURY->request_item("hobnailed boots", 100)->move( this_object() );
  ARMOURY->request_item("antique black dress", 100)->move( this_object() );
  ARMOURY->request_item("witchs pointy hat", 100)->move( this_object() );
  ARMOURY->request_item("black witches cloak", 100)->move( this_object() );
  init_equip();
  add_respond_to_with(({ "yes" }), "#yes_response");
  add_respond_to_with(({ "@nod" }), "#yes_response");
  add_respond_to_with(({ "no" }), "#no_response");
  add_respond_to_with(({ "@shake" }), "#no_response");
  add_respond_to_with(({ "@think", "somewhere", "safe" }), "#think_safe");
  add_respond_to_with(({ "@think", "safe" }), "#think_safe");
  add_respond_to_with(({ "@think", "safety" }), "#think_safe");
  add_respond_to_with(({ "@womble" }), "#think_mended_drum");
}
void do_panic(object pl) {
  string home;
  string nationality;
  nationality = pl->query_nationality();
  if ( !nationality ) {
      queue_command( "say Oops.. you haven't got a nationality, I can't "
        "send you home!");
      finish_up();
      return;
  }
  home = nationality->query_default_start_location();
  safeplace = home->query_short();
  queue_command( "say I hope you're not foreign.  You know, where "
    "you gabble at me in heathen lingo and eat foreign muck and "
    "worship objects." );
  queue_command( "say So.  You want some help to get back to the "
    + safeplace + "?" );
  queue_command( "glare "+pl->query_name() );
  lost = pl;
  start_time = time();
}
int query_waiting() { return time()-start_time; }
void yes_response(object ob) {
  if (ob != lost)
    return ;
  queue_command( "say Right then.  Close your eyes and concentrate." );
  queue_command( "say Think of somewhere safe." );
  prodded = 0;
  call_out("check_think", 30);
}
void no_response(object ob) {
  if (ob != lost)
    return ;
  queue_command( "say So why did you call me up then?", 1 );
  queue_command( "roll eyes "+lost->query_name() );
  queue_command( "pinch "+lost->query_name()+" cheek" );
  PANIC_HANDLER->finish_panic(lost, PANIC_NOT_OK);
  lost = 0;
}
void think_safe(object ob) {
  if (ob != lost)
    return ;
  queue_command( "say Now the world will just rearrange itself "
    "to suit you." );
  PANIC_HANDLER->finish_panic(lost, PANIC_OK);
  lost = 0;
}
void check_think() {
  if(!lost)
    return;
  if (prodded < 3 ) {
    queue_command( "say Come on, I haven't got all day.  Just think of "
      "safety." );
    queue_command( "tap" );
    prodded ++ ;
    call_out("check_think", 60);
  } else {
    queue_command( "say Young people of today..." );
    queue_command( "mutter no manners" );
    PANIC_HANDLER->finish_panic(lost, PANIC_NOT_OK);
    lost = 0;
  }
}
void event_exit(object ob, string message, object to) {
  if (ob == lost) {
    queue_command("hrmph");
    queue_command("tell "+lost->query_name()+" Thats right!  Just walk "
      "out on me.");
    queue_command("glare "+lost->query_name() );
    PANIC_HANDLER->finish_panic(lost, PANIC_NOT_OK);
    lost = 0;
  }
}
void event_fight_in_progress(object attacker, object attackee) {
  if (attackee == this_object()) {
    attacker->adjust_tmp_str(-4);
    attacker->adjust_tmp_con(-4);
    attacker->adjust_tmp_dex(-4);
    attacker->adjust_tmp_int(-4);
    attacker->adjust_tmp_wis(-4);
    queue_command( "say What is this travesty!  Attacking your fairy "
               "godmother, Well I never." );
    queue_command( "say "+attacker->one_short()+" I here by curse you!" );
    queue_command( "say Don't expect me to help you again." );
    queue_command( "glare "+attacker->query_name() );
    attacker->add_property("attacked godmother", time());
    PANIC_HANDLER->finish_panic(lost, PANIC_NOT_OK);
    lost = 0;
  }
}
void hurry_up() {
  if (!lost) {
    queue_command( "blink" );
    queue_command( "say Where'd that bugger go?  Oh well.");
    PANIC_HANDLER->finish_panic(lost, PANIC_NOT_OK);
    lost = 0;
  }
  else  check_think();
}
void finish_up() {
  if (lost) {
    queue_command( "say Well.  You took too long.  What a complete "
      "waste of time." );
    queue_command( "glare " + lost->query_name() );
    lost = 0;
  }
  else  {
    queue_command( "peer" );
    queue_command( "say Damn, they buggered off somewhere.  I hate "
      "it when they do that." );
    queue_command( "scowl" );
  }
  PANIC_HANDLER->finish_panic(lost, PANIC_NOT_OK);
}
void event_dest(object ob) {
  if (ob == lost) {
    PANIC_HANDLER->finish_panic(lost, PANIC_NOT_OK);
    lost = 0;
  }
}
void dest_me() {
  if (lost) {
    PANIC_HANDLER->finish_panic(lost, PANIC_NOT_OK);
    lost = 0;
  }
  ::dest_me();
}
int unambushable() {
  return 1;
}
