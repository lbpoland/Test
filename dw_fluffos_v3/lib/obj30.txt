
=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/easel.c ===
#define DIRS ([ \
      "north" : ({ ({ 0, -1 }), ({ "|" }) }), \
      "northeast" : ({ ({ 1, -1 }), ({ "/" }) }), \
      "east" : ({ ({ 1, 0 }), ({ "-" }) }), \
      "southeast" : ({ ({ 1, 1 }), ({ "\\" }) }), \
      "south" : ({ ({ 0, 1 }), ({ "|" }) }), \
      "southwest" : ({ ({ -1, 1 }), ({ "/" }) }), \
      "west" : ({ ({ -1, 0 }), ({ "-" }) }), \
      "northwest" : ({ ({ -1, -1 }), ({ "\\" }) }), \
   ])
#define PRIMES ({ 2, 3, 5, 7, 11, 13, 17, 19, 23, 29 })
inherit "/std/object";
int *origin;
string *lines;
void setup() {
   set_name( "easel" );
   set_short( "small easel" );
   add_adjective( "small" );
   set_main_plural( "small easels" );
   set_value( 800 );
   origin = ({ 0, 0 });
   lines = ({ });
}
int *query_origin() { return origin; }
string *query_lines() { return lines; }
string long( string word, int dark ) {
   int i, max, min, width;
   string part;
   if ( !sizeof( lines ) )
      return "The easel is blank.\n";
   width = ( (int)this_player()->query_cols() - 2 ) / 2;
   min = origin[ 0 ] - width;
   max = origin[ 0 ] + width;
   if ( min < 0 ) {
      max -= min;
      min = 0;
   }
   if ( max >= strlen( lines[ 0 ] ) )
      max = strlen( lines[ 0 ] ) - 1;
   part = "";
   for ( i = 0; i < sizeof( lines ); i++ )
      part += " "+ lines[ i ][ min .. max ] +"\n";
   return part;
}
int query_at( int *place ) {
   if ( !sizeof( lines ) )
      return 32;
   if ( ( origin[ 0 ] + place[ 0 ] ) < 0 )
      return 32;
   if ( ( origin[ 0 ] + place[ 0 ] ) >= strlen( lines[ 0 ] ) )
      return 32;
   if ( ( origin[ 1 ] + place[ 1 ] ) < 0 )
      return 32;
   if ( ( origin[ 1 ] + place[ 1 ] ) >= sizeof( lines ) )
      return 32;
   return lines[ origin[ 1 ] + place[ 1 ] ][ origin[ 0 ] + place[ 0 ] ];
}
void add_shape( int *start, string *pieces ) {
   int i, number, max, width;
   string gap, front, back;
   for ( i = 0; i < sizeof( pieces ); i++ )
      if ( strlen( pieces[ i ] ) > max )
         max = strlen( pieces[ i ] );
   if ( sizeof( lines ) )
       width = strlen( lines[ 0 ] );
   else
      lines = ({ "" });
   if ( ( origin[ 0 ] + start[ 0 ] ) < 0 ) {
      gap = "";
      for ( i = origin[ 0 ] + start[ 0 ]; i < 0; i++ )
         gap += " ";
      for ( i = 0; i < sizeof( lines ); i++ )
         lines[ i ] = gap + lines[ i ];
      origin[ 0 ] = -start[ 0 ];
   }
   if ( ( origin[ 0 ] + start[ 0 ] + max ) > width ) {
      gap = "";
      for ( i = width; i < ( origin[ 0 ] + start[ 0 ] + max ); i++ )
         gap += " ";
      for ( i = 0; i < sizeof( lines ); i++ )
         lines[ i ] += gap;
   }
   max = sizeof( pieces );
   width = sizeof( lines );
   if ( ( origin[ 1 ] + start[ 1 ] ) < 0 ) {
      gap = "";
      for ( i = 0; i < strlen( lines[ 0 ] ); i++ )
         gap += " ";
      for ( i = origin[ 1 ] + start[ 1 ]; i < 0; i++ )
         lines = ({ gap }) + lines;
      origin[ 1 ] = -start[ 1 ];
   }
   if ( ( origin[ 1 ] + start[ 1 ] + max ) > width ) {
      gap = "";
      for ( i = 0; i < strlen( lines[ 0 ] ); i++ )
         gap += " ";
      for ( i = width; i < ( origin[ 1 ] + start[ 1 ] + max ); i++ )
         lines += ({ gap });
   }
   for ( i = origin[ 1 ] + start[ 1 ]; i < ( origin[ 1 ] + start[ 1 ] + max );
         i++ ) {
      number = origin[ 0 ] + start[ 0 ];
      if ( number > 0 )
         front = lines[ i ][ 0 .. number - 1 ];
      else
         front = "";
      number = origin[ 0 ] + start[ 0 ] +
            strlen( pieces[ i - origin[ 1 ] - start[ 1 ] ] );
      if ( number < strlen( lines[ i ] ) )
         back = lines[ i ][ number .. strlen( lines[ i ] ) - 1 ];
      else
         back = "";
      lines[ i ] = front + pieces[ i - origin[ 1 ] - start[ 1 ] ] + back;
   }
}
string *make_block( int size, int home ) {
   int i, j;
   string start, end, *blocks;
   if ( size == 1 )
      if ( home )
         return ({ "@" });
      else
         return ({ "#" });
   blocks = allocate( size );
   if ( home )
      blocks[ 0 ] = "@";
   else
      blocks[ 0 ] = "+";
   for ( i = 2; i < size; i++ )
      blocks[ 0 ] += "-";
   if ( home )
      blocks[ 0 ] += "@";
   else
      blocks[ 0 ] += "+";
   for ( i = 2; i < size; i++ ) {
      blocks[ i - 1 ] = "|";
      for ( j = 2; j < size; j++ )
         blocks[ i - 1 ] += ".";
      blocks[ i - 1 ] += "|";
   }
   if ( home )
      blocks[ size - 1 ] = "@";
   else
      blocks[ size - 1 ] = "+";
      for ( i = 2; i < size; i++ )
      blocks[ size - 1 ] += "-";
   if ( home )
      blocks[ size - 1 ] += "@";
   else
      blocks[ size - 1 ] += "+";
   return blocks;
}
void make_map( mixed *locations, mapping connections ) {
   int i, j, k, x, y, *sizes;
   string *places;
   mapping centres;
   sizes = ({ });
   places = ({ });
   centres = ([ ]);
   for ( i = 0; i < sizeof( locations ); i+= 2 ) {
      sizes += ({ locations[ i + 1 ] });
      places += ({ locations[ i ] });
      reset_eval_cost();
   }
   for ( i = 0; i < sizeof( PRIMES ); i++ ) {
      x = 0;
      y = 0;
      for ( j = 0; j < sizeof( sizes ); j++ ) {
         if ( PRIMES[ i ] > sizes[ j ] ) {
            x = 1;
            break;
         }
         if ( sizes[ j ] % PRIMES[ i ] )
            y = 1;
      }
      if ( x )
         break;
      if ( !y ) {
         for ( j = 0; j < sizeof( sizes ); j++ )
            sizes[ j ] /= PRIMES[ i ];
         i--;
      }
   }
   reset_eval_cost();
   centres[ places[ 0 ] ] = ({ 0, 0 });
   for ( i = 0; i < sizeof( places ); i++ ) {
      tell_object( find_player( "deutha" ), "On "+ i +", "+ places[ i ] +
            ", at "+ centres[ places[ i ] ][ 0 ] +", "+
            centres[ places[ i ] ][ 1 ] +" for "+ sizes[ i ] +"\n" );
      add_shape( ({ centres[ places[ i ] ][ 0 ] - sizes[ i ],
            centres[ places[ i ] ][ 1 ] - sizes[ i ] }),
            make_block( 2 * sizes[ i ] - 1, !i ) );
      if ( undefinedp( connections[ places[ i ] ] ) )
            continue;
      for ( j = 0; j < sizeof( connections[ places[ i ] ] ); j += 2 ) {
         reset_eval_cost();
         add_shape( ({ centres[ places[ i ] ][ 0 ] -1 + sizes[ i ] *
               DIRS[ connections[ places[ i ] ][ j ] ][ 0 ][ 0 ],
               centres[ places[ i ] ][ 1 ] -1 + sizes[ i ] *
               DIRS[ connections[ places[ i ] ][ j ] ][ 0 ][ 1 ] }),
               DIRS[ connections[ places[ i ] ][ j ] ][ 1 ] );
         k = member_array( connections[ places[ i ] ][ j + 1 ], places );
         if ( k < 0 )
            continue;
         x = centres[ places[ i ] ][ 0 ] +
               DIRS[ connections[ places[ i ] ][ j ] ][ 0 ][ 0 ] *
               ( sizes[ i ] + sizes[ k ] );
         y = centres[ places[ i ] ][ 1 ] +
               DIRS[ connections[ places[ i ] ][ j ] ][ 0 ][ 1 ] *
               ( sizes[ i ] + sizes[ k ] );
         centres[ places[ k ] ] = ({ x, y });
         tell_object( find_player( "deutha" ), "Put "+
               connections[ places[ i ] ][ j + 1 ] +" at "+
               x +", "+ y +"\n" );
         reset_eval_cost();
      }
   }
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/mortar_pestle.c ===
inherit "/obj/misc/grinder";
void setup() {
  set_name( "pestle" );
  set_short( "mortar and pestle" );
  set_long( "Roughly hewn from stone, the mortar's bowl has been "
      "smoothed from long use.  The stone pestle used for grinding "
      "herbs within the bowl is smooth as well and hangs from a "
      "leather thong tied through a ring in the side of the bowl.\n" );
  set_main_plural( "mortars and pestles" );
  add_adjective( ({ "mortar and", "rough", "stone", "smooth" }) );
  add_alias( ({ "mortar", "pestle", "bowl" }) );
  set_value( 800 );
  set_weight( 44 );
  set_max_grindable( 8 );
  set_max_weight( 8 );
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/keyring.c ===
inherit "/std/container";
void create() {
   do_setup++;
   container::create();
   set_name( "keyring" );
   set_short( "keyring" );
   add_property( "determinate", "a " );
   set_main_plural( "keyrings" );
   add_property("shop type", "jewellers");
   set_long( "This is a ring of metal that overlaps itself at one point, "
         "allowing keys to be strung onto it and be kept together.  It's "
         "amazing how useful a ring of metal can be.\n" );
   set_weight( 2 );
   set_value( 20 );
   set_max_weight( 1 );
   do_setup--;
   if (!do_setup)
      this_object()->setup();
}
string long( string word, int dark ) {
   return ::long( word, dark ) +
         query_contents( "$C$"+ the_short() +" holds: " );
}
mapping query_properties() {
   object thing;
   mixed arg, *args;
   mapping props, map;
   props = ::query_properties();
   args = copy( keys( props ) );
   foreach ( thing in find_inv_match( "", this_player() ) ) {
      map = (mapping)thing->query_properties();
      foreach ( arg in keys( map ) ) {
         if ( !stringp( arg ) ) {
            continue;
         }
         if ( member_array( arg, args ) != -1 ) {
            continue;
         }
         props[ arg ] = map[ arg ];
         args += ({ arg });
      }
   }
   return props;
}
mixed query_property( string word ) {
   object thing;
   mixed arg;
   arg = ::query_property( word );
   if ( arg ) {
      return arg;
   }
   foreach ( thing in find_inv_match( "", this_player() ) ) {
      arg = (mixed)thing->query_property( word );
      if ( arg ) {
         return arg;
      }
   }
   return 0;
}
int test_add( object thing, int flag ) {
   if ( !thing->id( "key" ) && environment( thing ) ) {
      return 0;
   }
   return 1;
}
int add_weight(int n) {
  int tmp, ret;
  if(sizeof(all_inventory(this_object())) >= 15)
    return 0;
  return ::add_weight(n);
}
mapping query_static_auto_load() {
   if ( explode( file_name(), "#" )[ 0 ] == "/obj/misc/keyring" ) {
      return int_query_static_auto_load();
   }
   return ([ ]);
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/dead_book.c ===
inherit "/std/book_dir";
#define DEAD_PAGES "/save/books/dead/dead_page"
void setup() {
  int i, max;
  seteuid(getuid());
  add_property("dead usable", 1);
  set_short("dark brown book");
  set_name("book");
  add_adjective( ({ "dark", "brown", "dead", "death", "dieing" }) );
  set_long("The book has some writing "
           "burnt into the dark brown leather cover.\n");
  add_read_mess("Introduction to death, or what to "
                "do when your blood runs out", 0, "general", 0 );
  set_book_language("general");
  set_book_dir(DEAD_PAGES);
  set_open_page(0);
}
void recovery_from_death() {
  call_out((: tell_object($1, the_short()+" crumbles and vanishes "
                              "mysteriously.\n") :), 1, previous_object());
  call_out("dest_me", 2);
}
mixed query_static_auto_load() { return 0; }
mixed query_dynamic_auto_load() { return 0; }
mixed query_auto_load() { return 0; }
void check_location() {
  if (environment() &&
      !environment()->query_property("dead") &&
      !environment()->query_creator()) {
    say(the_short()+" vanishes suddenly and randomly.\n");
    call_out("dest_me", 1);
  }
}
varargs int move(object dest, string mess1, string mess2) {
  ::move(dest, mess1, mess2);
  call_out("check_location", 1);
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/cash_register.c ===
#include <money.h>
inherit "/std/container";
object shop;
object query_shop() { return shop; }
void set_shop( object thing ) { shop = thing; }
string long( string word, int dark ) {
   int i;
   string ret, *coins;
   object cash;
   ret = query_long();
   cash = present( MONEY_ALIAS, this_object() );
   if ( !cash )
      return ret +"There is no money in the register.\n";
   coins = (string *)cash->half_short( 1 );
   if ( !sizeof( coins ) )
      return ret +"There is no money in the register.\n";
   ret += "The register contains:\n";
   for ( i = 0; i < sizeof( coins ); i++ )
      ret += "      "+ coins[ i ] +"\n";
   return ret;
}
int test_add( object thing, int flag ) {
   if ( !thing->id( MONEY_ALIAS ) )
      return 0;
   if ( shop )
      shop->save_register();
   return 1;
}
int test_remove( object thing, int flag ) {
   if ( shop )
      shop->save_register();
   return 1;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/dart_board.c ===
#include <player_handler.h>
inherit "/std/object";
string  *creators, name1, name2, target;
object  player1, player2;
int     score1, score2, in_use, thrown, bet;
void setup();
void init();
int abandon( string str );
string find_target();
int play( string str );
int throw_dart();
int score_it( int i );
void heart_beat();
void end_game();
void setup() {
  set_name("dartboard");
    add_property( "there", "mounted on the wall" );
  add_adjective("party");
  set_main_plural("dartboards");
  set_short("party dartboard");
  set_long("This is a party dartboard.  It's round, with concentric "
    "circles in black and yellow painted on it.\n");
  set_weight(10000);
  set_value(0);
  reset_get();
  set_read_mess(
    "This is a game of darts for two players. Before beginning "
    "their throws, the players must both type 'play'. Each player "
    "in turn can then throw three darts at the board (by typing "
    "'throw' three times). Note that your accuracy is affected "
    "by your DEX stat. The winner of the game is the player with the "
    "highest score after all darts have been thrown.\n" );
}
void init() {
  add_command("abandon", "", (:this_object()->abandon(""):));
  add_command("play", "", (:this_object()->play(0):));
  add_command("throw", "", (:this_object()->throw_dart():));
}
int abandon( string str ) {
  if (this_player() == player1 || this_player() == player2) {
    write("You call off the game of darts.\n");
    say("The game of darts is called off by "
      + this_player()->query_short()+".\n");
    end_game();
    return 1;
  }
}
string find_target() {
  string *creators, victim;
  creators = get_dir("/w/");
  victim = (creators[(random(sizeof(creators)))]);
  while (!PLAYER_HANDLER->test_user(victim) ) {
    victim = (creators[(random(sizeof(creators)))]);
}
  return capitalize(victim);
}
int play( string str ) {
  int val;
  if (in_use) {
    write("The dartboard is in use right now.\n");
    return 1;
  }
  if (!str) str = "0";
  if (!sscanf(str, "%d", val) || val < 0) {
    write("Bets must be for zero or greater coins.\n");
    return 1;
  }
  if (this_player()->query_money() < val) {
    write("Betting is not yet supported... I'm working on it! "
   "Just type \"play\".\n");
    return 1;
  }
  if (player1) {
    if (this_player() == player1) {
      write("You can't play against yourself!\n");
      return 1;
    }
    if (val != bet) {
      write("Bet amounts must match. " + name1 + " bet " + bet + ".\n");
      return 1;
    }
    player2 = this_player();
    name2 = player2->query_short();
    target = find_target();
    tell_room( environment(), name1 + " and " + name2 +
      " have started a game of darts, throwing at " + target
      + ".\n", ({ player1, player2 }) );
    tell_object( player2, "You accept " + name1 + "'s challenge, "
      "and you both prepare to throw darts at " + target + ".\n" );
    tell_object( player1, name2 + " accepts your challenge, and you "
      "both prepare to throw darts at " + target + ".\nThrow your darts.\n");
    in_use = 1;
    return 1;
  }
  bet = val;
  player1 = this_player();
  name1 = player1->query_short();
  write("You can 'abandon' the game if no one takes up your challenge.\n");
  say( name1 + " is looking for someone else to play darts with.\n");
  set_heart_beat(1);
  return 1;
}
int throw_dart() {
  int hit;
  string start;
  if (!in_use)  {
     return notify_fail( "You are not currently playing.\n ");
  }
  if (this_player() != player1 && this_player() != player2)  {
     return notify_fail( "You are not currently playing.\n" );
  }
  if (in_use == 1 && this_player() == player1) {
    thrown += 1;
    write("You throw a dart.\n");
    say( name1 + " throws a dart.\n" );
    hit = score_it(random(21) + ((player1->query_dex() -13 ) / 2 ));
    if (hit == 500 && bet >= 50) {
      write("You feel a bit more experienced.\n");
      player1->ajdust_xp(10);
    }
    score1 += hit;
    if (thrown == 3) {
      write("That was your third dart. Your score is " + score1 + ".\n");
      say(name1 + " has a score of " + score1 + " after three darts.\n");
      if (player2) tell_object(player2, "Your turn to throw.\n");
      in_use = 2;
    }
    return 1;
  }
  if (in_use == 2 && this_player() == player2) {
    thrown += 1;
    write("You throw a dart.\n");
    say(name2+ " throws a dart.\n" );
    hit = score_it(random(21) + ((player2->query_dex() - 13 ) / 2 ));
    if (hit == 500 && bet >= 50) {
      write("You feel a bit more experienced.\n");
      player2->adjust_xp(10);
    }
    score2 += hit;
    if (thrown == 6) {
      write("That was your third dart.\n");
      if (score1 > score2) {
        start = " with a score of " + score1 + " to " +
          score2 + ".\n";
        write(name1 + " beats you" + start);
        tell_room( environment(), name1 + " beats " + name2 + start,
                ({ player1, player2 }));
        tell_object(player1, "You beat " + name2 + start);
      } else if (score2 > score1) {
        start = " with a score of " + score2 + " to " +
          score1 + ".\n";
        write("You beat " + name1 + start);
        tell_room( environment(), name2 + " beats " + name1 + start,
                    ({ player1, player2 }));
        tell_object(player1, name2 + " beats you" + start);
      } else {
        tell_room(environment(this_object()),
          "It's a tie with a score of " + score1 + "!\n");
      }
      end_game();
    }
    return 1;
  }
  write("It's not your turn to throw a dart!\n");
  return 1;
}
int score_it( int i ) {
  string rest_mess;
  int ret;
  if (i < 2) {
    rest_mess = "the wall. No score.\n";
    ret = 0;
  } else if (i < 19) {
    rest_mess = "number "+i+", scoring "+(i*5)+".\n" ;
    ret = i * 5;
  } else if (i == 19) {
    rest_mess =  target+"'s face! Score of 250!\n";
    ret = 250;
  } else {
    rest_mess = target+"'s nose! Score of 500!\n";
    ret = 500;
  }
  write("You hit " + rest_mess);
  say( this_player()->query_short() + " hit " + rest_mess);
  return ret;
}
void heart_beat() {
  if (!player1) player1 = find_player(lower_case(name1));
  if (name2 && !player2) player2 = find_player(lower_case(name2));
  if (!player1 || environment() != environment(player1))
    say(name1 + " is no longer here. The game of darts is called off.\n");
  else if (name2 && (!player2 || environment() != environment(player2)))
    say(name2 + " is no longer here. The game of darts is called off.\n");
  else
    return;
  end_game();
}
void end_game() {
  set_heart_beat(0);
  in_use  = 0; bet    = 0; thrown  = 0;
  player1 = 0; player2 = 0;
  name1  = 0; name2  = 0;
  score1  = 0; score2  = 0;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/wearable_corpse.c ===
inherit "/obj/corpse";
inherit "/std/basic/wearable";
void create() {
  corpse::create();
  wearable::create();
}
string long( string word, int dark ) {
  return corpse::long( word, dark ) + wearable::long( word, dark );
}
void init_static_arg( mapping map ) {
   if ( map[ "corpse" ] )
      corpse::init_static_arg( map[ "corpse" ] );
   if ( map[ "wearable" ] )
      corpse::init_static_arg( map[ "wearable" ] );
}
void init_dynamic_arg( mapping map ) {
 if ( !undefinedp( map[ "corpse" ] ) )
      corpse::init_dynamic_arg( map[ "corpse" ] );
 if ( !undefinedp( map[ "wearable" ] ) )
      wearable::init_dynamic_arg( map[ "wearable" ] );
}
mapping query_static_auto_load() {
   return ([
      "corpse" : corpse::query_static_auto_load(),
      "wearable" : wearable::query_static_auto_load(),
   ]);
}
mapping query_dynamic_auto_load() {
   return ([
      "corpse" : corpse::query_dynamic_auto_load(),
      "wearable" : wearable::query_dynamic_auto_load()
   ]);
}
mixed *stats() {
	return corpse::stats() + wearable::stats();
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/beeswax_candle.c ===
inherit "/std/lightable";
void setup() {
   set_name( "candle" );
   set_short( "beeswax candle" );
   add_adjective( "beeswax" );
   set_long( "This is a small candle, like you'd "
         "see on a birthday cake.  It is quite soft and "
         "squidgy.\n" );
   set_fuel_messages( ({
         "It is almost burnt to a stub.", 10,
         "It is more than halfway burnt.", 50,
         "It is not yet halfway burnt.", 85,
	 "It is almost new.", 99,
         "It is new.", 100
         }) );
   set_empty_mess( "is burnt to a stub." );
   set_max_fuel( 900 );
   set_fuel( 900 );
   set_brightness( 60 );
   set_value( 400 );
   set_hold_required( 1 );
   add_property( "no recycling", 1 );
   new_weapon( 10 );
   set_weight( 1 );
   set_hide_cond( 1 );
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/pawn_receipt.c ===
#include <am_time.h>
#include <armoury.h>
#include <money.h>
#include <move_failures.h>
#include <player.h>
#include <virtual.h>
#define TO this_object()
#define TP this_player()
inherit "/obj/misc/paper" ;
private int    _expired ;
private int    _expired_sold ;
private int    _expiry_time ;
private int    _item_value, _obplural ;
private int    _timestamp;
private mixed  _static_save;
private string _obname, _obpath, _obshort ;
private string _shop_path, _virt_name ;
object do_kiss();
void setup() {
    set_name( "receipt" );
    set_short( "pawned item receipt" ) ;
    add_adjective( ({ "pawned", "item" }) );
    set_long( "This is a small slip of paper, with a black border.\n" );
    set_main_plural( "pawned item receipts" ) ;
    add_plural( "receipts" );
    add_adjective( "pawned" ) ;
    set_value( 0 ) ;
    set_weight( 1 );
    _obname = "unknown object";
    _obpath = "***";
    _timestamp = time();
}
void init() {
    add_command( "reclaim", "<direct:object:me'receipt'>" ) ;
}
void reset() {
    object item ;
    if ( ( ! _expired ) && time() > _expiry_time ) {
        _expired = 1 ;
        set_short( "expired pawned item receipt" ) ;
        add_adjective( "expired" ) ;
        if ( ! _expired_sold ) {
            _expired_sold = 1 ;
            item = do_kiss() ;
            if ( item ) {
                item->move( _shop_path->query_store_room() ) ;
            }
        }
    }
}
void set_obshort( string s ) {
  _obshort = s;
}
string query_obshort() {
  return _obshort;
}
void set_expiry_time( int time ) {
    _expiry_time = time ;
}
int query_expiry_time() {
    return _expiry_time ;
}
void set_item_value( int value ) {
    _item_value = value ;
}
int query_item_value() {
    return _item_value ;
}
void set_shop_path( mixed shop ) {
    if ( objectp( shop ) ) {
        _shop_path = base_name( shop ) ;
        return ;
    }
    _shop_path = shop ;
    return ;
}
string query_shop_path() {
    return _shop_path ;
}
void set_obname( string name ) {
    _obname = name;
}
void set_object( string path ) {
    _obpath = path;
}
void set_virtobname( string name ) {
    _virt_name = name;
}
string query_obname() {
    return _obname;
}
string query_obpath() {
    return _obpath;
}
int query_timestamp() {
    return _timestamp;
}
string query_virt_obname() {
    return _virt_name;
}
mixed query_static_save() {
  return _static_save;
}
int query_pawned_item_receipt() {
    return 1 ;
}
void set_static_save( mixed args ) {
  mixed p;
  _static_save = args;
  if (_obname != "unknown object") {
    return;
  }
  p = args[0];
  while (mapp(p)) {
    if (!undefinedp(p["short"])) {
      _obname = p["short"];
      return;
    }
    p = p["::"];
  }
}
void set_object_plural( object ob ) {
  if ( ob->query_collective() && ob->query_amount() > 1 ) {
    _obplural = 1;
  } else {
    _obplural = 0;
  }
}
int query_object_plural() {
  return _obplural;
}
string query_correct_short( object ob ) {
    if ( ! ob ) {
      return 0;
    }
    set_object_plural( ob );
    if ( _obplural ) {
      return pluralize( ob->query_short() );
    }
    return ob->query_short();
}
void setup_receipt( object ob ) {
   mixed* bits;
   bits = AUTO_LOAD_OB->fragile_auto_str_ob(ob);
   set_obname(ob->query_name());
   set_obshort( query_correct_short( ob ) );
   set_object(bits[1]);
   set_static_save(bits[2]);
}
string pluralize_sentence( string text, int plural ) {
  if ( plural ) {
    return replace( text, ({
      "$o", "them",
      "$r", "they",
      "$ve", "ve"
    }) );
  }
  return replace( text, ({
    "$o", "it",
    "$r", "it",
    "$ve", "s"
  }) );
}
string query_details() {
    if ( _expired ) {
        return pluralize_sentence(
          "This is a receipt for your pawned " + query_obshort() + ".\n"
          "Sadly, you have left it too long to collect $o and $r ha$ve "
          "expired, so the shop will put $o up for sale.  Better hurry to "
          + _shop_path->the_short() + " sharpish and try to buy $o back!",
          _obplural );
    }
    return pluralize_sentence(
      "This is a receipt for your pawned " + query_obshort() + ".\n"
      "You must reclaim $o from " + _shop_path->the_short() + " before "
      + AM_TIME_HANDLER->query_am_time( _expiry_time ) + " or $r will "
      "be sold.", _obplural );
}
mixed *query_read_mess() {
  string lang;
  if ( _shop_path ) {
    lang = _shop_path->query_language();
  } else {
    lang = "general";
  }
  return ::query_read_mess()
    + ({ ({ (: query_details() :), "neat printing", lang, 0 }) });
}
mapping query_dynamic_auto_load()
{
   return ([
     "::"         : ::query_dynamic_auto_load(),
     "obname"     : _obname,
     "obpath"     : _obpath,
     "obvalue"    : value,
     "virt"       : _virt_name,
     "timestamp"  : _timestamp,
     "static"     : _static_save,
     "been sold"  : _expired_sold,
     "expired"    : _expired,
     "expires on" : _expiry_time,
     "item value" : _item_value,
     "item short" : _obshort,
     "item plural": _obplural,
     "shop path"  : _shop_path
  ]);
}
void init_dynamic_arg(mapping arg, object) {
   _obname = arg["obname"];
   if ( stringp( _obname ) ) {
       add_adjective( explode( lower_case( _obname ), " " ) );
   }
   _obpath = arg["obpath"];
   set_value(arg["obvalue"]);
   _virt_name = arg["virt"];
   _timestamp = arg["timestamp"];
   _static_save = arg["static"];
   _expired = arg["expired"] ;
   _expired_sold = arg["been sold"] ;
   _expiry_time = arg["expires on"] ;
   _item_value = arg["item value"] ;
   _obshort = arg["item short"];
   _obplural = arg["item plural"];
   _shop_path = arg["shop path"] ;
   ::init_dynamic_arg(arg["::"]);
   if ( _expired ) {
       set_short( "expired pawned item receipt" ) ;
       add_adjective( "expired" ) ;
       set_main_plural( "expired pawned item receipts" ) ;
       add_plural( "pawned item receipts" ) ;
   }
}
mixed *stats() {
  mixed *stuff;
  stuff = ::stats() + ({
      ({ "obname", _obname }),
      ({ "obpath", _obpath }),
      ({ "timestamp", _timestamp + " (" + ctime(_timestamp) + ")" }),
      ({ "been sold", _expired_sold }),
      ({ "expired", _expired }),
      ({ "expires on", _expiry_time }),
      ({ "item short", _obshort }),
      ({ "item value", _item_value }),
      ({ "item plural", _obplural }),
      ({ "shop path", _shop_path })
   });
  if (_virt_name)
    stuff += ({ ({ "virtname", _virt_name }) });
  return stuff;
}
object do_kiss() {
    object thing;
    if (sizeof(_static_save) < 2) {
        if (this_player()->query_creator()) {
            write("This receipt has no auto-load information, possibly "
                  "because the object was broken when the player logged "
                  "out.  It will have to be replaced by hand.\n");
        } else {
            write("Sorry, but this object is too broken to repair "
                  "with a kiss.  You'll have to contact a creator.\n");
        }
        return 0;
    }
    if (_virt_name) {
       _virt_name = CLONER->other_file( _virt_name );
       if (file_size(_virt_name) <= 0) {
          _virt_name = ARMOURY->remap_file_path(_virt_name);
       }
       if (file_size(_virt_name) <= 0) {
           write("The receipt whispers: Sorry, I'm still broken.  "
                 "Try again some other time, or contact a creator.\n");
           return 0;
       }
    }
    if ( !catch( thing = (object)CLONER->clone( _obpath ) ) ) {
        if ( thing ) {
            thing->init_static_arg(_static_save[0]);
            thing->init_dynamic_arg(_static_save[1]);
            thing->add_property(VIRTUAL_NAME_PROP, _virt_name);
            move("/room/rubbish");
            return thing;
        } else {
            write("The receipt whispers: I'm going to need some "
                  "creator help.\n");
            thing->dest_me();
        }
    } else {
         write("The receipt whispers: Sorry, I'm still broken.  "
               "Try again some other time, or contact a creator.\n");
    }
    return 0;
}
int do_reclaim() {
    int cost, i ;
    object change, item ;
    string change_str, place ;
    if ( ! query_pawned_item_receipt() ) {
        add_failed_mess( "$D is not a pawned item receipt.\n" ) ;
        return 0 ;
    }
    if ( base_name( environment( TP ) ) != _shop_path ) {
        add_failed_mess(
            "This is not the right place for you to reclaim $D.  "
            "Try a pawn shop.\n" ) ;
        return 0 ;
    }
    if ( ! environment( TP )->is_open( TP, 0 ) ) {
        return 0;
    }
    if ( _expired ) {
        add_failed_mess( "Oh dear, your receipt has expired.  With luck, your "
            + query_obshort() + " will be available for sale in the shop.\n" ) ;
        return 0 ;
    }
    place = query_property( "place" ) ;
    if ( ! place || ( place == "" ) ) {
        place = "default" ;
    }
    cost = ( ( 100 + _shop_path->query_pawn_markup() ) * _item_value ) / 100 ;
    debug_printf( "cost = %d, _item_value = %d, markup = %d",
        cost, _item_value, _shop_path->query_pawn_markup() ) ;
    if ( TP->query_value_in( place ) < cost ) {
        add_failed_mess( "You don't have enough money to reclaim $D.  "
            "It would cost you "
            + MONEY_HAND->money_value_string( cost, place ) + "\n" ) ;
        return 0 ;
    }
    change = MONEY_HAND->pay_amount_from( cost, TP, place ) ;
    if ( change ) {
        change->move( TP ) ;
        change_str = change->short() ;
    }
    item = do_kiss();
    if ( ! item ) {
        add_failed_mess(
          "Oh dear, your item doesn't seem to be here any more.  "
          "Please contact a liaison.\n" );
        return 0;
    }
    i = item->move( TP );
    if ( i != MOVE_OK ) {
        tell_object( TP, "You're too heavily burdened to accept "
          + item->the_short() + ", so it is placed on the floor for you.\n" );
        item->move( environment(TP) );
    }
    add_succeeded_mess( ({
        "$N $V " + item->the_short() + " for "
          + MONEY_HAND->money_value_string( cost, place )
          + ( change_str ? " and receive " + change_str + " in change" : "" )
          + ".\n",
        "$N $V $D and receives " + item->the_short() + " in exchange.\n"
    }) ) ;
    return 1 ;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/press_credentials.c ===
inherit "/obj/clothing";
private string _owner = "someone";
private string _paper;
void set_owner_stuff();
void update_stuff();
void setup() {
   add_property("press credentials",1);
   set_name( "badge" );
   set_short( "press credentials badge" );
   add_adjective( ({ "press", "credentials" }) );
   add_alias( "badge" );
   add_property( "nosteal", 1 );
   add_alias( "credentials" );
   set_type( "badge" );
   setup_clothing( 1000 );
   set_weight( 1 );
   reset_drop();
   set_wear_remove_func(base_name(this_object()), "wear_badge");
}
void init() {
   if( _owner == "someone" ) {
      update_stuff();
   }
   if( this_player()->query_name() == lower_case(_owner) ) {
      add_command( "show", "<direct:object:me'credentials'>");
   }
}
void wear_badge(object ob, object player) {
   if (!ob) {
      if (player) {
         player->remove_title("newspaper");
      }
   } else if (_paper) {
      player->set_title("newspaper", "Reporter for " + _paper);
   }
}
void set_owner_stuff() {
   set_long( "This is a small badge with a hand-drawn picture of " +
     _owner + " on it, underneath the logo of " + _paper + ".  "
     "Emblazoned along the bottom are the words \"Official Reporter\".\n");
   if (query_worn_by()) {
      query_worn_by()->set_title("newspaper", "Reporter for " + _paper);
   }
}
int do_show() {
   add_succeeded_mess( ({ "With a practiced flick of your wrist, you display "
     "your press credentials to the room.\n", "With a practiced flick of $p "
     "wrist, $N whips out $p press credentials for " + _paper +
     " and shows them to "
     "everybody.\n" }) );
   return 1;
}
void set_paper_name(string paper) {
   _paper = paper;
}
string query_paper_name() {
   return _paper;
}
void update_stuff() {
   object ob;
   ob = environment();
   if( ob && living( ob ) ) {
      _owner = ob->query_cap_name();
   }
   set_owner_stuff();
}
mapping query_dynamic_auto_load() {
   return ([
     "::" : ::query_dynamic_auto_load(),
     "cred owner" : _owner,
     "paper" : _paper
   ]);
}
void init_dynamic_arg( mapping map ) {
   _paper = map["paper"];
   _owner = map["cred owner"];
   ::init_dynamic_arg( map[ "::" ] );
   set_owner_stuff();
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/dead_eel.c ===
#include <move_failures.h>
#define EEL_SKIN "/obj/misc/eel_skin"
inherit "/obj/food";
void    setup();
void    init();
int     do_skin( object *indirect_obs, string indir_match, string dir_match,
                 mixed *args, string pattern );
int     test_sharp( object weapon );
mixed   query_dynamic_auto_load();
void    init_dynamic_arg(mapping arg, object);
int skinned;
void setup()
{
  set_name( "eel" );
  set_short( "dead eel" );
  add_alias( ({ "corpse", "eel corpse" }) );
  add_adjective( "dead" );
  set_main_plural( "dead eels" );
  set_long( function()
	    {
	      if( skinned )
		return
		  "This is the dead body of an unfortunate eel.  "
		  "As if being dead wasn't bad enough, it has also "
		  "been skinned.\n";
	      return
		  "This is the dead body of an unfortunate eel.  "
		  "Most people skin such a fish before eating it.\n";
	    } );
  set_weight( 60 );
  set_value( 200 );
  set_weight_per_bite( 2 );
}
void init()
{
  ::init();
  this_player()->add_command( "skin", this_object(),
        "<direct:object:me-here> with <indirect:object:me>" );
}
int do_skin( object *indirect_obs, string indir_match, string dir_match,
   mixed *args, string pattern )
{
  object skin;
  if ( skinned ) return notify_fail( "The eel is already skinned.\n" );
  if( !test_sharp( indirect_obs[0] ) )
    {
      tell_room( environment( this_player() ),
	     this_player()->one_short() + " unsuccessfully tries to "
             "skin an eel with " + indirect_obs[0]->one_short() + ".\n",
             this_player() );
      return notify_fail( indirect_obs[0]->the_short() +
            " only makes a shallow mark in the eel skin.  "
            "It would probably be easier to skin the eel "
            "with some kind of sharp implement.\n" );
    }
  skinned = 1;
  skin = clone_object( EEL_SKIN );
  if( MOVE_OK != skin->move( this_player() ) )
        skin->move( environment() );
  tell_room( environment( this_player() ),
        this_player()->one_short() + " skins an eel with "
        + indirect_obs[0]->one_short() + ".\n",
        this_player() );
  return notify_fail( "You skin the dead eel with " +
        indirect_obs[0]->the_short() + ".\n" );
}
int test_sharp( object weapon )
{
  int i;
  mixed *pongo;
  pongo = weapon->weapon_attacks();
  for( i = 1; i < sizeof( pongo ); i++ )
    {
      if( pongo[i] == "sharp" ) return 1;
    }
  return 0;
}
mixed query_dynamic_auto_load() {
  return ([ "::" : ::query_dynamic_auto_load(),
            "skinned" : skinned ]);
}
void init_dynamic_arg(mapping arg, object) {
  ::init_dynamic_arg(arg["::"]);
  skinned = arg["skinned"];
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/terrain_shovel.c ===
#include <dirs.h>
#include <terrain.h>
inherit "/std/object";
void setup() {
   set_name( "shovel" );
   set_short( "ceremonial shovel" );
   add_adjective( "ceremonial" );
   set_long( "This is a small ceremonial shovel, carried by those "+
         "responsible for the care, upkeep and expansion of "+
         "dungeons.\n" );
}
void init() {
   if ( this_player()->query_creator() ) {
      add_action( "do_add", "add" );
      add_action( "do_remove", "remove" );
      add_action( "do_visit", "visit" );
   }
}
int do_add( string words ) {
   int i, distance, level, *new_co_ord, *old_co_ord, *vector;
   string direc, file, terrain, type;
   object room, *things;
   if ( !words )
      return notify_fail( "Add what?\n" );
   if ( sscanf( words, "%s %s %s", type, file, direc ) != 3 )
      return notify_fail( "Syntax: add fixed|floating <file> <direction>\n" );
   i = member_array( direc, STD_ORDERS );
   if ( i == -1 )
      return notify_fail( capitalize( direc ) +" is not a valid "+
            "direction.\n" );
   room = environment( this_player() );
   if ( room->query_exit( direc ) )
      return notify_fail( "There is already an exit to the "+
            direc +".\n" );
   vector = STD_ORDERS[ i + 1 ];
   if ( file_size( file +".c" ) < 0 )
      return notify_fail( capitalize( file ) +" does not exist.\n" );
   file->force_load();
   if ( !find_object( file ) )
      return notify_fail( capitalize( file ) +" will not load.\n" );
   distance = (int)file->query_room_size() +
         (int)room->query_room_size();
   old_co_ord = (int *)room->query_co_ord();
   if ( sizeof( old_co_ord ) != 3 )
      return notify_fail( "Environment does not have coordinates.\n" );
   new_co_ord = allocate( 3 );
   for ( i = 0; i < 3; i++ )
      new_co_ord[ i ] = old_co_ord[ i ] - distance * vector[ i ];
   terrain = (string)room->query_property( "terrain name" );
   if ( !terrain )
      return notify_fail( "Environment is not in the terrain "+
            "handling system.\n" );
   switch( type ) {
      case "fixed" :
         i = (int)TERRAIN_MAP->add_fixed_location( terrain,
               file, new_co_ord );
         break;
      case "floating" :
         i = (int)TERRAIN_MAP->add_floating_location( terrain,
               file, new_co_ord, level );
         break;
      default :
         return notify_fail( "Type must be fixed or floating.\n" );
   }
   if ( !i )
      return notify_fail( "Failed to add "+ file +" ("+ type +
            ") to "+ terrain +" at "+ new_co_ord[ 0 ] +", "+
            new_co_ord[ 1 ] +", "+ new_co_ord[ 2 ] +".\n" );
   write( "Added "+ file +" ("+ type +") to "+ terrain +" at "+
         new_co_ord[ 0 ] +", "+ new_co_ord[ 1 ] +", "+
         new_co_ord[ 2 ] +".\n" );
   if ( type == "fixed" )
      file->dest_me();
   TERRAIN_MAP->clear_connections( terrain );
   TERRAIN_MAP->delete_cloned_location( terrain, file_name( room ) );
   things = all_inventory( room );
   things->move( "/room/void" );
   room->dest_me();
   room = (object)TERRAIN_MAP->find_location( terrain, old_co_ord );
   things->move( room );
   return 1;
}
int do_remove() {
   write( "This function has not been written yet.\n" );
   return 1;
}
int do_visit( string words ) {
   int x, y, z;
   string terrain;
   object room;
   if ( !words )
      return notify_fail( "Visit where?\n" );
   if ( sscanf( words, "%s %d %d %d", terrain, x, y, z ) != 4 )
      return notify_fail( "Syntax: visit <terrain> <x co-ord> "+
            "<y co-ord> <z co-ord>\n" );
   room = (object)TERRAIN_MAP->find_location( terrain, ({ x, y, z }) );
   if ( !objectp( room ) )
      return notify_fail( "There is no location at ("+ x +","+ y +","+ z +
            ") in \""+ terrain +"\".\n" );
   this_player()->move_with_look( room, "There is a strange smell, like "+
         "freshly broken earth, and $N appear$s.", "With a squelch, "+
         "$N vanish$s." );
   return 1;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/football.s ===


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/s_badge.c ===
#include <mail.h>
#define DOMAIN explode( theres[ i ], "/" )[ 1 ]
#define LORD capitalize( (string)( "/d/"+ DOMAIN +"/master" )->query_lord() )
#define MASTER "/secure/master"
#define HANDLER "/obj/handlers/playtesters"
#define PROTECTION_EFFECT "/d/playtesters/effects/pt_protection"
inherit "/obj/armour";
mapping routes;
int access_mail(string str);
int list_destinations();
int list_transits();
int do_goto(string destination);
void setup() {
   set_name( "badge" );
   set_short( "bejewelled gold badge" );
   add_adjective( "gold" );
   set_long( "This bejewelled gold badge is the mark of a Senior Playtester."
           "  It has a drawing of a womble on the front; it seems to be using"
           " a magnifying glass to examine something.  On the back is "
           "engraved a scroll with some words on it.\n" );
   setup_armour( 100 );
   set_damage_chance( 0 );
   set_type( "badge" );
   reset_drop();
   call_out( (: add_wear_effect :), 0, PROTECTION_EFFECT );
   routes = ([
      "/d/klatch/djel/city/port/riverwalk09" : ({
         "/d/klatch/djel/city/port/pier1",
       }),
      "/d/klatch/djel/city/port/pier1" : ({
        "/d/klatch/djel/city/port/riverwalk09",
       }),
       "/d/am/isle_gods/siege/siege4" : ({
           "/d/am/isle_gods/buildings/parlour/parlor",
       }),
       "/d/am/ninth/ninth1" : ({
          "/d/am/blood/blood01",
       }),
       "/d/ram/ohulan/market/market_c" : ({
         "/d/ram/rambling_trail",
       }),
      "/d/klatch/djel/city/roads/widder35" : ({
         "/d/klatch/ephebe/desert/roads/road5",
       }),
      "/d/am/gates/hubwards" : ({
         "/d/sur/beta/topography/Sto_Plains/s_caravan/entrance",
      }),
    ]);
   set_read_mess( "This badge allows the bearer to move into certain areas "
         "to be playtested from certain entry locations (near to where the "
         "areas will be eventually connected).  To see the possible "
         "destinations from your current room, use the command "
         "\"destinations\", and to move into one of them, use the command "
         "\"goto <label>\" where <label> will be A, B, C, etc..  You can "
         "get a list of all transit points with \"transits\", although no "
         "guarantee is made that each item on this list will be "
         "recognisable.  Please report any problems with rooms not "
         "loading to the relevant domain Lord or Liaison(s)." );
}
void init() {
   string word;
   if ( !environment() )
      return;
   if ( !living( environment() ) )
      return;
   if ( !environment()->query_creator() ) {
      word = (string)environment()->query_name();
      if ( !HANDLER->query_playtester( word ) ) {
         tell_object( environment(), "You are not a playtester.  "
               "The playtester's badge disappears in a flurry of fluff.\n" );
         set_drop();
         move( "/room/rubbish" );
         return;
      }
      if ( HANDLER->query_senior_playtester( word ) ) {
         add_command( "mail", "", (: access_mail(0) :) );
         add_command( "mail", "<string>", (: access_mail($4[0]) :) );
      }
   }
   add_command("destinations", "", (: list_destinations() :) );
   add_command("transits", "", (: list_transits() :) );
   add_command("goto", "<string>", (: do_goto($4[0]) :) );
}
int access_mail( string words ) {
   return (int)MAIL_TRACK->mail( words );
}
int list_destinations() {
  int i;
  string here, *theres;
  object there;
  here = file_name( environment( this_player() ) );
  if ( !sizeof ( theres = routes[ here ] ) )
    return notify_fail( "You cannot use the badge to move from here.\n" );
  write( "From here you can use the badge to move to:\n" );
  for ( i = 0; i < sizeof( theres ); i++ ) {
    if ( !( there = find_object( theres[ i ] ) ) ) {
      if ( file_size( theres[ i ] +".c" ) < 0 ) {
        write( sprintf( "%c: %s cannot be found; please contact %s.\n", 65 + i,
            theres[ i ], LORD ) );
        continue;
      }
      catch( theres[ i ]->force_load() );
      if ( !( there = find_object( theres[ i ] ) ) ) {
        write( sprintf( "%c: %s will not load, please contact %s.\n", 65 + i,
            theres[ i ], LORD ) );
        continue;
      }
    }
    write( sprintf( "%c: %s\n", 65 + i, (string)there->a_short() ) );
  }
  return 1;
}
int list_transits() {
   int i;
   string *theres;
   object there;
   theres = keys( routes );
   if ( !sizeof( theres ) )
      return notify_fail( "There are no transit points at the moment.\n" );
   write( "You can use the badge to move from:\n" );
   for ( i = 0; i < sizeof( theres ); i++ ) {
    if ( !( there = find_object( theres[ i ] ) ) ) {
      if ( file_size( theres[ i ] +".c" ) < 0 ) {
        write( sprintf( "%s cannot be found; please contact %s.\n",
            theres[ i ], LORD ) );
        continue;
      }
      catch( theres[ i ]->force_load() );
      if ( !( there = find_object( theres[ i ] ) ) ) {
        write( sprintf( "%s will not load, please contact %s.\n",
            theres[ i ], LORD ) );
        continue;
      }
    }
    write( sprintf( "   %s\n", (string)there->a_short() ) );
  }
  return 1;
}
int do_goto( string destination ) {
  int i;
  string here, *theres;
  object there;
  i = destination[ 0 ] - 65;
  if ( ( i < 0 ) || ( i > 25 ) ) {
    notify_fail( "The destination label needs to be a capital letter "+
        "between A and Z.\n" );
    return 0;
  }
  here = file_name( environment( this_player() ) );
  if ( !sizeof ( theres = routes[ here ] ) ) {
    notify_fail( "You cannot use the badge to move from here.\n" );
    return 0;
  }
   if ( i >= sizeof( theres ) )
      return notify_fail( "That is not a valid label from here.\n" );
  if ( !( there = find_object( theres[ i ] ) ) ) {
    if ( file_size( theres[ i ] +".c" ) < 0 ) {
      write( theres[ i ] +" cannot be found; please contact "+ LORD +".\n" );
      return 1;
    }
    catch( theres[ i ]->force_load() );
    if ( !( there = find_object( theres[ i ] ) ) ) {
      write( theres[ i ] +" will not load; please contact "+ LORD +".\n" );
      return 1;
    }
  }
  write( "Moving you to "+ (string)there->the_short() +"...\n" );
  this_player()->move_with_look( there, "$N appear$s in a flurry of fluff "
             "that only $N could muster.", "$N disappear$s in a flurry of fluff." );
  return 1;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/blank_book.ob ===
#  -*- LPC -*- #
#
# $Locker:  $
# $Id: blank_book.ob,v 1.2 2002/08/30 14:48:00 tilly Exp $
#
#
#

::#Class:: "/std/book.c"
::Name:: "book"
::Short:: "brown book"
::Long:: "This is a rather plain book.\n"
::Adjective:: ({ "plain" })
::Property:: "writeable", 1
::$set_no_pages::25
::Weight:: 8
::Value::5000


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/glasses/std_wine_glass.ob ===
::#Class::"/obj/vessel.c"
::#include::<volumes.h>
::Name::"glass"
::Short::"wine glass"
::Adjective::"wine"
::Long::"This is a nicely made wine glass, of the sort usually used to "
        "serve red, white and rose wine in pubs and restaurants.\n"
::$set_stuck::1
::$set_leak_rate::0
::Value::0
::Weight::5
::$set_max_volume::VOLUME_WINE
::$set_material::"glass"
::$add_property::"fragile",500
::$add_property::"pub item",1
::$remove_property::"opaque"


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/glasses/std_tumbler.ob ===
::#Class::"/obj/vessel.c"
::#include::<volumes.h>
::Name::"tumbler"
::Short::"glass tumbler"
::Adjective::"glass"
::Long::"This is a short glass tumbler, of the sort usually found in pubs "
        "and restaurants.\n"
::$set_stuck::1
::$set_leak_rate::0
::Value::0
::Weight::5
::$set_max_volume::VOLUME_TUMBLER
::$set_material::"glass"
::$add_property::"fragile",500
::$add_property::"pub item",1
::$remove_property::"opaque"


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/glasses/std_cocktail_glass.ob ===
::#Class::"/obj/vessel.c"
::#include::<volumes.h>
::Name::"glass"
::Short::"cocktail glass"
::Adjective::"cocktail"
::Long::"This is a nicely made cocktail glass, of the sort usually used to "
        "serve exotic coloured cocktails in pubs and restaurants.\n"
::$set_stuck::1
::$set_leak_rate::0
::Value::0
::Weight::5
::$set_max_volume::VOLUME_COCKTAIL
::$set_material::"glass"
::$add_property::"fragile",500
::$add_property::"pub item",1
::$remove_property::"opaque"


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/glasses/std_brandy_glass.ob ===
::#Class::"/obj/vessel.c"
::#include::<volumes.h>
::Name::"glass"
::Short::"brandy glass"
::Adjective::"brandy"
::Long::"This is a nicely made brandy glass, of the sort usually used to "
        "serve brandy in the more refined pubs and restaurants.\n"
::$set_stuck::1
::$set_leak_rate::0
::Value::0
::Weight::5
::$set_max_volume::VOLUME_BRANDY
::$set_material::"glass"
::$add_property::"fragile",500
::$add_property::"pub item",1
::$remove_property::"opaque"


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/glasses/std_teacup.ob ===
::#Class::"/obj/vessel.c"
::#include::<volumes.h>
::Name::"teacup"
::Short::"teacup"
::Long::"This is a teacup, complete with saucer, of the sort usually used "
        "to serve tea.\n"
::$set_stuck::1
::$set_leak_rate::0
::Value::0
::Weight::5
::$set_max_volume::VOLUME_TEACUP
::$set_material::"pottery"
::$add_property::"fragile",500
::$add_property::"pub item",1
::$remove_property::"opaque"


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/glasses/std_tankard.ob ===
::#Class::"/obj/vessel.c"
::#include::<volumes.h>
::Name::"tankard"
::Short::"large tankard"
::Adjective::"large"
::Long::"This is a large tankard, of the sort usually used to serve beer "
        "and cider in pubs and restaurants when a pint glass isn't quite "
        "enough.\n"
::$set_stuck::1
::$set_leak_rate::0
::Value::0
::Weight::5
::$set_max_volume::VOLUME_LITRE
::$set_material::"glass"
::$add_property::"fragile",500
::$add_property::"pub item",1
::$remove_property::"opaque"


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/glasses/std_mug.ob ===
::#Class::"/obj/vessel.c"
::#include::<volumes.h>
::Name::"mug"
::Short::"mug"
::Long::"This is a mug, of the sort usually used to serve hot drinks such "
        "as coffee.\n"
::$set_stuck::1
::$set_leak_rate::0
::Value::0
::Weight::5
::$set_max_volume::VOLUME_MUG
::$set_material::"pottery"
::$add_property::"fragile",500
::$add_property::"pub item",1
::$remove_property::"opaque"


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/glasses/std_half_glass.ob ===
::#Class::"/obj/vessel.c"
::#include::<volumes.h>
::Name::"glass"
::Short::"half-pint glass"
::Adjective::"half-pint"
::Long::"This is a nicely made half-pint glass, of the sort usually used to "
        "serve soft drinks in pubs and restaurants.\n"
::$set_stuck::1
::$set_leak_rate::0
::Value::0
::Weight::5
::$set_max_volume::VOLUME_HALFPINT
::$set_material::"glass"
::$add_property::"fragile",500
::$add_property::"pub item",1
::$remove_property::"opaque"


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/glasses/std_shot_glass.ob ===
::#Class::"/obj/vessel.c"
::#include::<volumes.h>
::Name::"glass"
::Short::"shot glass"
::Adjective::"shot"
::Long::"This is a nicely made shot glass, of the sort usually used to "
        "serve spirit measures in pubs and restaurants.\n"
::$set_stuck::1
::$set_leak_rate::0
::Value::0
::Weight::5
::$set_max_volume::VOLUME_SHOT
::$set_material::"glass"
::$add_property::"fragile",500
::$add_property::"pub item",1
::$remove_property::"opaque"


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/glasses/std_pint_glass.ob ===
::#Class::"/obj/vessel.c"
::#include::<volumes.h>
::Name::"glass"
::Short::"pint glass"
::Adjective::"pint"
::Long::"This is a nicely made pint glass, of the sort usually used to "
        "serve beer and cider in pubs and restaurants.\n"
::$set_stuck::1
::$set_leak_rate::0
::Value::0
::Weight::5
::$set_max_volume::VOLUME_PINT
::$set_material::"glass"
::$add_property::"fragile",500
::$add_property::"pub item",1
::$remove_property::"opaque"


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/glasses/std_flute_glass.ob ===
::#Class::"/obj/vessel.c"
::#include::<volumes.h>
::Name::"glass"
::Short::"flute glass"
::Adjective::"flute"
::Long::"This is a tall, thin, flute glass, of the sort usually used to "
        "serve sparkling wine in the more refined pubs and restaurants.\n"
::$set_stuck::1
::$set_leak_rate::0
::Value::0
::Weight::5
::$set_max_volume::VOLUME_FLUTE
::$set_material::"glass"
::$add_property::"fragile",500
::$add_property::"pub item",1
::$remove_property::"opaque"


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/plates/std_side_plate.ob ===
::#Class::"/obj/misc/plate.c"
::Name::"plate"
::Short::"side plate"
::Long::"This is a nicely made side plate, of the sort usually used to "
        "serve side orders in pubs and restaurants.  You could probably eat "
        "from it, if it contained food.\n"
::Main Plural:: "side plates"
::Plural:: "plates"
::Value::0
::Weight::5
::$set_max_weight::30
::$set_material::"pottery"
::$add_property::"fragile",500
::$add_property::"pub item",1
::$remove_property::"opaque"


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/plates/std_dessert_plate.ob ===
::#Class::"/obj/misc/plate.c"
::Name::"plate"
::Short::"dessert plate"
::Long::"This is a nicely made dessert plate, complete with cutlery, of the "
        "sort usually used to serve desserts in pubs and restaurants.  You "
        "could probably eat from it, if it contained food.\n"
::Main Plural:: "dessert plates"
::Plural:: "plates"
::Value::0
::Weight::5
::$set_max_weight::30
::$set_material::"pottery"
::$add_property::"fragile",500
::$add_property::"pub item",1
::$remove_property::"opaque"


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/plates/std_dessert_dish.ob ===
::#Class::"/obj/misc/plate.c"
::Name::"dish"
::Short::"dessert dish"
::Long::"This is a nicely made dessert dish, complete with cutlery, of the "
        "sort usually used to serve desserts in pubs and restaurants.  You "
        "could probably eat from it, if it contained food.\n"
::Main Plural:: "dessert dishes"
::Plural:: "dishes"
::Value::0
::Weight::5
::$set_max_weight::30
::$set_material::"pottery"
::$add_property::"fragile",500
::$add_property::"pub item",1
::$remove_property::"opaque"


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/plates/std_plate.ob ===
::#Class::"/obj/misc/plate.c"
::Name::"plate"
::Short::"plate"
::Long::"This is a nicely made plate, of the sort usually used to "
        "serve meals in pubs and restaurants.  You could probably eat from "
        "it, if it contained food.\n"
::Main Plural:: "plates"
::Value::0
::Weight::5
::$set_max_weight::50
::$set_material::"pottery"
::$add_property::"fragile",500
::$add_property::"pub item",1
::$remove_property::"opaque"


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/plates/std_soup_dish.ob ===
::#Class::"/obj/vessel.c"
::#include::<volumes.h>
::Name::"bowl"
::Short::"soup bowl"
::Long::"This is a nicely made soup dish, complete with soup spoon, of the "
        "sort usually used to serve soup in pubs and restaurants.  You "
        "could probably eat from it, if it contained food.\n"
::Main Plural:: "soup bowls"
::Plural:: "bowls"
::$set_stuck::1
::$set_leak_rate::0
::Value::0
::Weight::5
::$set_max_volume::VOLUME_PINT
::$set_material::"pottery"
::$add_property::"fragile",500
::$add_property::"pub item",1
::$remove_property::"opaque"


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/plates/std_dish.ob ===
::#Class::"/obj/misc/plate.c"
::Name::"dish"
::Short::"dish"
::Long::"This is a nicely made dish, of the sort usually used in pubs and "
        "restaurants.  You could probably eat from it, if it contained "
        "food.\n"
::Main Plural:: "dishes"
::Value::0
::Weight::5
::$set_max_weight::30
::$set_material::"pottery"
::$add_property::"fragile",500
::$add_property::"pub item",1
::$remove_property::"opaque"


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/plates/std_dinner_plate.ob ===
::#Class::"/obj/misc/plate.c"
::Name::"plate"
::Short::"dinner plate"
::Long::"This is a nicely made dinner plate, complete with cutlery, of the "
        "sort usually used to serve main courses in pubs and restaurants.  "
        "You could probably eat from it, if it contained food.\n"
::Main Plural:: "dinner plates"
::Plural:: "plates"
::Value::0
::Weight::5
::$set_max_weight::50
::$set_material::"pottery"
::$add_property::"fragile",500
::$add_property::"pub item",1
::$remove_property::"opaque"


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/plates/std_bowl.ob ===
::#Class::"/obj/misc/plate.c"
::Name::"bowl"
::Short::"bowl"
::Long::"This is a nicely made bowl, of the sort usually used in pubs and "
        "restaurants.  You could probably eat from it, if it contained "
        "food.\n"
::Main Plural:: "bowls"
::Value::0
::Weight::5
::$set_max_weight::30
::$set_material::"pottery"
::$add_property::"fragile",500
::$add_property::"pub item",1
::$remove_property::"opaque"


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/jars/medium_jar.ob ===
# Generic Jar - Medium
# Pinched from Granny's Pantry
# Vesta, July 2002

::#Class:: "/obj/vessel.c"
::name:: "jar"
::short:: "medium jar"
::long:: "This is a medium jar.\n"
::adjective:: ({ "glass" , "medium" })
::plural:: "jars"
::Main_Plural:: "medium jars"
::$set_max_volume:: 2000
::$set_max_weight:: 30
::$set_leak_rate:: 0
::material:: "glass"



=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/jars/large_jar.ob ===
# Generic Jar - Large
# Pinched from Granny's Pantry
# Vesta, July 2002

::#Class:: "/obj/vessel.c"
::name:: "jar"
::short:: "large jar"
::long:: "This is a large jar.\n"
::adjective:: ({ "glass" , "large" })
::plural:: "jars"
::Main_Plural:: "large jars"
::$set_max_volume:: 3000
::$set_max_weight:: 45
::$set_leak_rate:: 0
::material:: "glass"



=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/jars/small_jar.ob ===
# Generic Jar - Small
# Pinched from Granny's Pantry
# Vesta, July 2002

::#Class:: "/obj/vessel.c"
::name:: "jar"
::short:: "small jar"
::long:: "This is a small jar.\n"
::adjective:: ({ "glass" , "small" })
::plural:: "jars"
::Main_Plural:: "jars"
::$set_max_volume:: 1000
::$set_max_weight:: 15
::$set_leak_rate:: 0
::material:: "glass"



=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/oddsnends/paint_brush.c ===
inherit "/std/object";
void setup(){
    set_name("brush");
    set_short("camel hair brush");
    add_adjective("hair");
    add_adjective("camel");
    add_adjective("paint");
    set_long("This is a small paint brush with fine camel hairs sticking "
             "out.  It looks to be better suited to the finer arts than for"
             " painting wagons with.\n");
    set_value(15);
    set_weight(15);
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/oddsnends/buffing_cloth.c ===
inherit "/std/object";
void setup(){
    set_name("cloth");
    set_short("buffing cloth");
    set_main_plural("buffing cloths");
    add_adjective( "buffing" );
    set_long("This is a small, soft cloth that might be used for polishing"
	     " metal objects.\n" );
    set_value(32);
    set_weight(2);
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/oddsnends/shoelace.c ===
inherit "/std/object";
void setup(){
    set_name("lace");
    set_short("shoe lace");
    add_adjective("shoe");
    add_alias("shoelace");
    set_main_plural("shoe laces");
    add_plural("shoelaces");
    set_long("A bright yellow coloured shoelace, "
             "just the kind of thing a teenage kid would wear.\n");
    set_value(15);
    set_weight(2);
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/oddsnends/shoehorn.c ===
inherit "/std/object";
void setup(){
    set_name("horn");
    set_short("shoe horn");
    add_adjective("shoe");
    set_long("A normal shoe horn.\n");
    set_value(10);
    set_weight(5);
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/oddsnends/nail.c ===
inherit "/std/object";
void setup(){
    set_name("nail");
    set_short("nail");
    set_main_plural("nails");
    set_long("A typical nail for nailing bits of wood together."
	     "  Quite exciting really.\n" );
    set_value(4);
    set_weight(1);
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/oddsnends/glass.c ===
#include <volumes.h>
inherit "/obj/vessel";
void setup(){
    set_name("glass");
    set_short("glass");
    set_long("This is a limited edition authentic "
             "scumble measure glass, as produced by the "
             "ancient scumble brewers.  It is very exclusive.\n");
    set_max_volume(VOLUME_HALFPINT);
    set_max_weight(10);
    set_leak_rate(0);
    set_value(30);
    set_weight(5);
    set_stuck(1);
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/oddsnends/wedge.c ===
inherit "/std/object";
void setup(){
    set_name("wedge");
    set_short("door wedge");
    add_adjective("door");
    set_main_plural("door wedges");
    set_long("A common wooden door wedge.  "
             "You use them to hold a door open.\n");
    set_value(10);
    set_weight(10);
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/oddsnends/book_end.c ===
inherit "/std/object";
void setup(){
    set_name("end");
    set_short("book end");
    set_main_plural("book ends");
    set_long("A glittering book end wrought in iron.  Just the thing"
	     " for Auntie's Hogswatchday present.\n" );
    set_value(35);
    set_weight(40);
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/oddsnends/small_keyring.c ===
inherit "/obj/misc/keyring";
void setup(){
    set_name("keyring");
    set_short("small keyring");
    set_main_plural("small keyrings");
    add_adjective( "small" );
    set_long("This is a small keyring, suitable for holding a few "
     "small keys.\n" );
    set_weight(1);
    set_max_weight( 10 );
    set_value( 200 );
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/oddsnends/safety_clip.c ===
inherit "/std/object";
void setup(){
    set_name("clip");
    set_short("safety clip");
    add_adjective("safety");
    set_long("This is a high technology item.  "
             "It is designed to be used as a buckle, and "
             "will safeguard you from much harm if used "
             "properly.\n");
    set_value(25);
    set_weight(2);
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/oddsnends/bottleopener.c ===
inherit "/std/object";
void setup(){
    set_name("opener");
    set_short("bottle opener");
    add_adjective("bottle");
    set_main_plural("bottle openers");
    set_long("This is a multipurpose bottle opener that "
             "works for left- and right-handed people.\n");
    set_value(15);
    set_weight(5);
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/oddsnends/hair_brush.c ===
inherit "/std/object";
void setup(){
    set_name("brush");
    set_short("stiff hair brush");
    add_adjective("hair");
    add_adjective("stiff");
    set_long("This is a small brush with rather stiff tines "
             "sticking out from it.  It looks like just the thing to "
             "straighten out your hair after a sandstorm.\n");
    set_value(10);
    set_weight(20);
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/oddsnends/picframe.c ===
inherit "/obj/container";
void setup(){
    set_name("frame");
    set_short("picture frame");
    add_adjective("picture");
    set_long("A lovely gold painted picture frame.\n");
    set_value(20);
    set_weight(30);
    set_max_weight(1);
    set_open();
    set_stuck(1);
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/oddsnends/beeswax_candle.c ===
inherit "/std/lightable";
void setup() {
   set_name( "candle" );
   set_short( "beeswax candle" );
   add_adjective( "beeswax" );
   set_long( "This is a small candle, like you'd "
         "see on a birthday cake.  It is quite soft and "
         "squidgy.\n" );
   set_fuel_messages( ({
         "It is almost burnt to a stub.", 10,
         "It is more than halfway burnt.", 50,
         "It is not yet halfway burnt.", 85,
	 "It is almost new.", 99,
         "It is new.", 100
         }) );
   set_empty_mess( "is burnt to a stub." );
   set_max_fuel( 900 );
   set_fuel( 900 );
   set_brightness( 60 );
   set_value( 24 );
   set_hold_required( 1 );
   add_property( "no recycling", 1 );
   new_weapon( 10 );
   set_weight( 1 );
   set_hide_cond( 1 );
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/shops/item_shop_safe.c ===
inherit "/obj/baggage";
void set_max_float( int );
int query_max_float();
void setup() {
  set_name( "safe" );
  set_short( "cash safe" );
  set_long( "This safe is used to keep the shop's float in.  It's securely set "
    "in the wall.\n" );
  add_adjective( "float" );
  add_property( "there", "in the wall" );
  set_difficulty( 10 );
  reset_get();
  set_closed();
  set_locked();
  set_key( "non-existent key" );
  add_property( "no recycling", 1 );
  set_pick_skill( "covert.lockpick.safes" );
  set_weight( 2000 );
  set_max_weight( 5000 );
  set_value( 120000 );
}
int pick_unlock( object player ){
  this_object()->set_unlocked();
    return 1;
}
int query_accept_money() {
  return 1;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/locks/basic_door_lock.c ===
inherit "/obj/misc/lock";
void setup() {
   set_name("lock");
   set_short("basic door lock");
   add_adjective( ({ "basic", "door" }));
   set_long("A basic brass door lock.\n");
   add_property("difficulty", 2);
   set_weight(19);
   set_value(20000);
}
void set_key_number(int num) {
   add_property("key prop", "door_lock_"+num);
   add_property("locktype", "door");
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/locks/flimsy_door_lock.c ===
inherit "/obj/misc/lock";
void setup() {
   set_name("lock");
   set_short("flimsy door lock");
   add_adjective( ({ "flimsy", "door" }));
   set_long("A flimsy brass door lock.\n");
   add_property("difficulty", 1);
   set_weight(19);
   set_value(10000);
}
void set_key_number(int num) {
   add_property("key prop", "door_lock_"+num);
   add_property("locktype", "door");
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/locks/standard_door_lock.c ===
inherit "/obj/misc/lock";
void setup() {
   set_name("lock");
   set_short("standard door lock");
   add_adjective( ({ "standard", "door" }));
   set_long("A standard brass door lock.\n");
   add_property("difficulty", 4);
   set_weight(19);
   set_value(40000);
}
void set_key_number(int num) {
   add_property("key prop", "door_lock_"+num);
   add_property("locktype", "door");
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/locks/furniture_key.c ===
inherit "/std/key";
void set_lock_number(int num) {
   set_key("small furniture", "furniture_lock_" + num);
   set_long("A small key, it looks like it would be "
            "suitable for a piece of furniture.\n");
   set_value(10);
}
void set_key_number( int num ){
  set_lock_number(num);
}
mapping query_static_auto_load() {
   return int_query_static_auto_load();
}
int query_duplicatable_key() {
   return 1;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/locks/chubby_special_door_lock.c ===
inherit "/obj/misc/lock";
void setup() {
   set_name("lock");
   set_short("chubby special door lock");
   add_adjective( ({ "chubby", "special", "door" }));
   set_long("A chubby special brass door lock.  These high-quality "
                     "locks are made by Grabthroat Shinkicker and Sons.  "
                     "Contrary to popular belief the locks are called "
                     "chubby's not because of their thickness but because "
                     "Grabthroat's real name is Charles and his "
                     "nickname is Chubby.\n");
   add_property("difficulty", 8);
   set_weight(19);
   set_value(160000);
}
void set_key_number(int num) {
   add_property("key prop", "door_lock_"+num);
   add_property("locktype", "door");
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/locks/brass_door_key.c ===
inherit "/std/key";
void set_key_number(int num) {
   set_key("small brass", "door_lock_" + num);
   set_long("A small brass key.  It has a serial number " +
            num + " engraved on it.\n");
   set_value(10);
}
mapping query_static_auto_load() {
   return int_query_static_auto_load();
}
int query_duplicatable_key() {
   return 1;
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/locks/basic_furniture_lock.c ===
inherit "/obj/misc/lock";
void setup() {
   set_name("lock");
   set_short("basic furniture lock");
   add_adjective( ({ "basic", "furniture" }));
   set_long("A basic brass furniture lock.\n");
   add_property("difficulty", 1);
   set_weight(19);
   set_value(10000);
}
void set_key_number(int num) {
   add_property("key prop", "furniture_lock_"+num);
   add_property("locktype", "furniture");
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/locks/chubby_standard_door_lock.c ===
inherit "/obj/misc/lock";
void setup() {
   set_name("lock");
   set_short("chubby standard door lock");
   add_adjective( ({ "chubby", "standard", "door" }));
   set_long("A chubby standard brass door lock.  These "
                     "high-quality "
                     "locks are made by Grabthroat Shinkicker and Sons.  "
                     "Contrary to popular belief the locks are called "
                     "chubby's not because of their thickness but because "
                     "Grabthroat's real name is Charles and his "
                     "nickname is Chubby.\n");
   add_property("difficulty", 6);
   set_weight(19);
   set_value(80000);
}
void set_key_number(int num) {
   add_property("key prop", "door_lock_"+num);
   add_property("locktype", "door");
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/locks/chubby_ultra_door_lock.c ===
inherit "/obj/misc/lock";
void setup() {
   set_name("lock");
   set_short("chubby ultra door lock");
   add_adjective( ({ "ultra", "chubby", "door" }));
   set_long("A chubby ultra brass door lock.  These high-quality "
                     "locks are made by Grabthroat Shinkicker and Sons.  "
                     "Contrary to popular belief the locks are called "
                     "chubby's not because of their thickness but because "
                     "Grabthroat's real name is Charles and his "
                     "nickname is Chubby.\n");
   add_property("difficulty", 10);
   set_weight(19);
   set_value(300000);
}
void set_key_number(int num) {
   add_property("key prop", "door_lock_"+num);
   add_property("locktype", "door");
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/locks/standard_furniture_lock.c ===
inherit "/obj/misc/lock";
void setup() {
   set_name("lock");
   set_short("standard furniture lock");
   add_adjective( ({ "standard", "furniture" }));
   set_long("A standard brass furniture lock.\n");
   add_property("difficulty", 2);
   set_weight(19);
   set_value(10000);
}
void set_key_number(int num) {
   add_property("key prop", "furniture_lock_"+num);
   add_property("locktype", "furniture");
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/papers/gilt.ob ===
#Some nice guilt edged paper.
::#Class::"/obj/misc/paper.c"
::Short::"gilt edged paper"
::Main Plural::"gilt edged papers"
::Adjective::({ "gilt", "edged" })
::Long::"Lovely crafted pieced of paper, they are beautiful and smooth "
"showing much skill and care in the making.\n"


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/papers/paper_file.c ===
inherit "/obj/misc/paper";
string file_name;
void create() {
  seteuid(getuid());
  ::create();
}
void set_file_name(string fname) {
  file_name = fname;
}
string query_file_name() {
  return file_name;
}
mixed *query_read_mess() {
  return read_file(file_name);
}
void init() {
  this_player()->add_command("read", this_object());
  ::init();
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/papers/lavender.ob ===
#Some nice guilt edged paper.
::#Class::"/obj/misc/paper.c"
::Short::"lavender scented paper"
::Main Plural::"lavender scented papers"
::Adjective::({ "lavender", "scented" })
::Long::"The paper is a soft purple colour, you can smell the refreshing "
"smell of lavenders wafting from the page.\n"


=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/player_shop/shop_notice.c ===
inherit "/std/object";
private nosave string _office, _stock_policy;
private nosave int _type = 0;
void setup()
{
   set_name("notice");
   set_short("policy notice");
   set_long("");
   add_adjective("policy");
   reset_get();
}
string long(string word, int dark)
{
   mapping policies= _office->get_policies(_type);
   int i = 1;
   string display;
   if (!_type)
   {
      display = sprintf("This is the list of shop's policies.  The policies "
         "on this notice are definitive and final.  This shop deals strictly "
         "in %s.  Items that do not fit this description should not be "
         "stocked.\n\n", "%^BOLD%^"+ _stock_policy+ "%^RESET%^");
   }
   else
   {
      display = "This is the list of management policies.\n\n";
   }
   if (!m_sizeof(policies))
   {
      return display;
   }
   foreach(string policy in m_indices(policies))
   {
      if(_office->query_manager(this_player()->query_name()) ||
         _office->query_retired(this_player()->query_name()) ||
         this_player()->query_creator())
      {
         display += sprintf("%d [%s]. %s\n", i++, policy,
            policies[policy][0]);
      }
      else
      {
         display += sprintf("%d. %s\n", i++, policies[policy][0]);
      }
   }
   return display;
}
void set_office(string office)
{
   _office = office;
   _stock_policy = _office->get_stock_policy();
}
void set_type(int type) { _type = type; }

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/player_shop/shop_cabinet.c ===
#include <move_failures.h>
inherit "/std/container";
private mapping _stock = ([]);
private nosave string _save_file = "";
private nosave int _call_save = 0;
private void do_save();
void create()
{
   do_setup++;
   ::create();
   do_setup--;
   if (!do_setup)
   {
      this_object()->setup();
      this_object()->reset();
   }
}
object *add_items(object *items, object player)
{
   object *failed = ({});
   foreach( object item in items )
   {
      if (item->move(this_object()) != MOVE_OK)
      {
         failed += ({ item });
      }
   }
   if (sizeof(failed))
   {
      failed->move(player);
   }
   remove_call_out(_call_save);
   _call_save = call_out((: do_save() :), 1);
   return failed;
}
void dest_me()
{
   if (remove_call_out(_call_save) != -1)
   {
      do_save();
   }
   ::dest_me();
}
private void do_load()
{
   if (_save_file)
   {
      if (file_size(_save_file + ".o") > 0)
      {
         unguarded((: restore_object, _save_file :));
         if (sizeof(_stock))
         {
            init_dynamic_arg(_stock,0);
         }
      }
   }
}
private void do_save()
{
   if (_save_file && _save_file != "")
   {
#ifdef DEBUG
      debug_printf("Saving cabinet data to %s.\n", _save_file);
#endif
      _stock = query_dynamic_auto_load();
      unguarded((: save_object, _save_file :));
   }
}
object *remove_items(object *items, object player)
{
   object *failed = ({});
   foreach(object item in items)
   {
      if (item->move(player) != MOVE_OK)
      {
         failed += ({ item });
      }
   }
   if (sizeof(failed))
   {
      failed->move(environment(player));
   }
   remove_call_out(_call_save);
     _call_save = call_out((: do_save() :), 1);
   return failed;
}
void set_save_file(string filename)
{
   _save_file = filename;
   do_load();
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/player_shop/shop_chart.c ===
#include <player_shop.h>
#include <money.h>
inherit "/std/object";
private nosave string _office;
void setup()
{
   set_name("chart");
   set_short("items chart");
   add_adjective("items");
   reset_get();
}
string long(string word, int dark)
{
   mapping list = _office->query_list_mapping();
   string chart, *items = sort_array(keys(list),1);
   if (!m_sizeof(list))
   {
      return "There are no items on the list.\n";
   }
   chart = sprintf("\n%-2s  %-25s  %-3s  %-5s  %-4s  %-4s  %-3s  %-4s  %-8s\n",
      "no", "items", "max", "stock", "avst", "avsl", "buy", "sell", "cabinets");
   chart += sprintf("%-2s  %-25s  %-3s  %-5s  %-4s  %-4s  %-3s  %-4s  %-8s\n",
      "--", "-----", "---", "-----", "----", "----", "---", "----", "--------");
   for (int i = 0; i < sizeof( items ); i++)
   {
      reset_eval_cost();
      chart += sprintf("%2d  %-25s  %3d  %5d  %4d  %4d  %3d  %4d  %8s\n",
         i + 1, items[i], list[items[i]][CHART_MAX],
         _office->query_stock(items[i]), list[items[i]][CHART_AVE],
         list[items[i]][CHART_AVESALE], list[items[i]][CHART_BUY],
         list[items[i]][CHART_SELL],
         implode(list[items[i]][CHART_CAB], (: $1+","+$2 :), "")[1..]);
   }
   return sprintf("%s%s", ::long(word,dark), chart);
}
void set_office(string office)
{
   _office = office;
   set_long("This chart lists the items of interest to the shop.  All "
      "prices are in "+ pluralize(MONEY_HAND->smallest_in(_office->
      query_place()))+ ".\n");
}

=== /mnt/home2/test/Test/dw_fluffos_v3/lib/obj/misc/player_shop/shopping_bag.c ===
#include <move_failures.h>
#include <player_shop.h>
inherit "/obj/baggage";
void setup()
{
   set_name("bag");
   set_short("shopping bag");
   add_adjective("shopping");
   set_main_plural("shopping bags");
   set_long("This is a small paper shopping bag, designed to "
      "hold a number of small items.  It doesn't look very sturdy.\n");
   set_value(3);
   set_transparent();
   add_property("no recycling",1);
   set_weight(1);
   set_max_weight(MAX_BAG_WEIGHT);
}
void change_condition()
{
   adjust_cond(-(10 + random(10)));
}
int test_add(object thing, int flag)
{
   if (sizeof(all_inventory()) >= MAX_BAG_ITEMS)
   {
      tell_object(this_player(), "The bag can only hold "+
         query_num(MAX_BAG_ITEMS)+ " items.\n");
      return 0;
   }
   if (!query_cond()) set_cond(20);
   call_out((: change_condition() :), 1);
   return ::test_add(thing,flag);
}
int test_remove(object thing, int flag, mixed dest)
{
   if (!query_cond()) set_cond(20);
   call_out((: change_condition() :), 1);
   return ::test_remove(thing,flag,dest);
}
